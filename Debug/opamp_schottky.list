
opamp_schottky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008010  08008010  00018010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008464  08008464  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008464  08008464  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008464  08008464  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800846c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000198  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000374  20000374  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3cd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b9b  00000000  00000000  0002c5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  0002e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000880  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002182b  00000000  00000000  0002f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dad5  00000000  00000000  00050b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb9f9  00000000  00000000  0005e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a029  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003564  00000000  00000000  0012a07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ff8 	.word	0x08007ff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007ff8 	.word	0x08007ff8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <uGain_change>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void uGain_change(uint8_t newGain) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	switch(newGain) {
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	2b0e      	cmp	r3, #14
 8000bc8:	d833      	bhi.n	8000c32 <uGain_change+0x7a>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <uGain_change+0x18>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000c0d 	.word	0x08000c0d
 8000bd4:	08000c33 	.word	0x08000c33
 8000bd8:	08000c15 	.word	0x08000c15
 8000bdc:	08000c33 	.word	0x08000c33
 8000be0:	08000c33 	.word	0x08000c33
 8000be4:	08000c33 	.word	0x08000c33
 8000be8:	08000c1f 	.word	0x08000c1f
 8000bec:	08000c33 	.word	0x08000c33
 8000bf0:	08000c33 	.word	0x08000c33
 8000bf4:	08000c33 	.word	0x08000c33
 8000bf8:	08000c33 	.word	0x08000c33
 8000bfc:	08000c33 	.word	0x08000c33
 8000c00:	08000c33 	.word	0x08000c33
 8000c04:	08000c33 	.word	0x08000c33
 8000c08:	08000c29 	.word	0x08000c29
	case 2:
		hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <uGain_change+0xa0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
		break;
 8000c12:	e012      	b.n	8000c3a <uGain_change+0x82>
	case 4:
		hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_4;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <uGain_change+0xa0>)
 8000c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1a:	621a      	str	r2, [r3, #32]
		break;
 8000c1c:	e00d      	b.n	8000c3a <uGain_change+0x82>
	case 8:
		hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_8;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <uGain_change+0xa0>)
 8000c20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c24:	621a      	str	r2, [r3, #32]
		break;
 8000c26:	e008      	b.n	8000c3a <uGain_change+0x82>
	case 16:
		hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <uGain_change+0xa0>)
 8000c2a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000c2e:	621a      	str	r2, [r3, #32]
		break;
 8000c30:	e003      	b.n	8000c3a <uGain_change+0x82>
	default:
		hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <uGain_change+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]

		break;
 8000c38:	bf00      	nop
	}

	hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <uGain_change+0xa0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <uGain_change+0xa0>)
 8000c42:	f002 f96d 	bl	8002f20 <HAL_OPAMP_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <uGain_change+0x98>
	{
	Error_Handler();
 8000c4c:	f000 fabc 	bl	80011c8 <Error_Handler>
	}

}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000298 	.word	0x20000298

08000c5c <__io_putchar>:

int __io_putchar(int ch) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000c64:	1d39      	adds	r1, r7, #4
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <__io_putchar+0x20>)
 8000c6e:	f004 f849 	bl	8004d04 <HAL_UART_Transmit>
	return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200002cc 	.word	0x200002cc

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c86:	f000 fce7 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8a:	f000 f8cb 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8e:	f000 fa4d 	bl	800112c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c92:	f000 fa1b 	bl	80010cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c96:	f000 f925 	bl	8000ee4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c9a:	f000 f993 	bl	8000fc4 <MX_ADC2_Init>
  MX_OPAMP2_Init();
 8000c9e:	f000 f9ef 	bl	8001080 <MX_OPAMP2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, HAL_MAX_DELAY);
 8000ca2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca6:	4855      	ldr	r0, [pc, #340]	; (8000dfc <main+0x17c>)
 8000ca8:	f001 f97f 	bl	8001faa <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000cac:	4853      	ldr	r0, [pc, #332]	; (8000dfc <main+0x17c>)
 8000cae:	f000 ff57 	bl	8001b60 <HAL_ADC_Start>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4852      	ldr	r0, [pc, #328]	; (8000e00 <main+0x180>)
 8000cb6:	f001 f978 	bl	8001faa <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc2);
 8000cba:	4851      	ldr	r0, [pc, #324]	; (8000e00 <main+0x180>)
 8000cbc:	f000 ff50 	bl	8001b60 <HAL_ADC_Start>

  HAL_OPAMP_SelfCalibrate(&hopamp2);
 8000cc0:	4850      	ldr	r0, [pc, #320]	; (8000e04 <main+0x184>)
 8000cc2:	f002 fa02 	bl	80030ca <HAL_OPAMP_SelfCalibrate>
  HAL_OPAMP_Start(&hopamp2);
 8000cc6:	484f      	ldr	r0, [pc, #316]	; (8000e04 <main+0x184>)
 8000cc8:	f002 f9ce 	bl	8003068 <HAL_OPAMP_Start>

  bitRess = 4096.0f;
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <main+0x188>)
 8000cce:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000cd2:	601a      	str	r2, [r3, #0]
  sysVal = 3.30f;
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <main+0x18c>)
 8000cd6:	4a4e      	ldr	r2, [pc, #312]	; (8000e10 <main+0x190>)
 8000cd8:	601a      	str	r2, [r3, #0]

  uint16_t cnt = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	82fb      	strh	r3, [r7, #22]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(userButt_GPIO_Port, userButt_Pin) == GPIO_PIN_RESET) {
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	484c      	ldr	r0, [pc, #304]	; (8000e14 <main+0x194>)
 8000ce4:	f002 f8ec 	bl	8002ec0 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d109      	bne.n	8000d02 <main+0x82>

		  HAL_GPIO_WritePin(ledProcess_GPIO_Port, ledProcess_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f002 f8fb 	bl	8002ef0 <HAL_GPIO_WritePin>
		  uGain_change(4);
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f7ff ff5c 	bl	8000bb8 <uGain_change>
 8000d00:	e005      	b.n	8000d0e <main+0x8e>

	  } else {
		  HAL_GPIO_WritePin(ledProcess_GPIO_Port, ledProcess_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2120      	movs	r1, #32
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f002 f8f1 	bl	8002ef0 <HAL_GPIO_WritePin>
	  }

	  //adc pA_0
	  HAL_ADC_Start(&hadc1);
 8000d0e:	483b      	ldr	r0, [pc, #236]	; (8000dfc <main+0x17c>)
 8000d10:	f000 ff26 	bl	8001b60 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d18:	4838      	ldr	r0, [pc, #224]	; (8000dfc <main+0x17c>)
 8000d1a:	f001 f837 	bl	8001d8c <HAL_ADC_PollForConversion>
	  uint32_t adcVal = HAL_ADC_GetValue(&hadc1);
 8000d1e:	4837      	ldr	r0, [pc, #220]	; (8000dfc <main+0x17c>)
 8000d20:	f001 f936 	bl	8001f90 <HAL_ADC_GetValue>
 8000d24:	6138      	str	r0, [r7, #16]
	  float basicVolt = adcVal * sysVal / bitRess;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <main+0x18c>)
 8000d32:	edd3 7a00 	vldr	s15, [r3]
 8000d36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d3a:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <main+0x188>)
 8000d3c:	ed93 7a00 	vldr	s14, [r3]
 8000d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d44:	edc7 7a03 	vstr	s15, [r7, #12]

	  //Gain depends on readings
	  if(adcVal < 256) {
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	2bff      	cmp	r3, #255	; 0xff
 8000d4c:	d803      	bhi.n	8000d56 <main+0xd6>
		  uGain_change(16);
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f7ff ff32 	bl	8000bb8 <uGain_change>
 8000d54:	e01d      	b.n	8000d92 <main+0x112>
	  }
	  else if(adcVal >= 256 && adcVal < 512) {
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	2bff      	cmp	r3, #255	; 0xff
 8000d5a:	d907      	bls.n	8000d6c <main+0xec>
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d62:	d203      	bcs.n	8000d6c <main+0xec>
		  uGain_change(8);
 8000d64:	2008      	movs	r0, #8
 8000d66:	f7ff ff27 	bl	8000bb8 <uGain_change>
 8000d6a:	e012      	b.n	8000d92 <main+0x112>
	  }
	  else if(adcVal >= 512 && adcVal < 1024) {
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d72:	d307      	bcc.n	8000d84 <main+0x104>
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7a:	d203      	bcs.n	8000d84 <main+0x104>
		  uGain_change(4);
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f7ff ff1b 	bl	8000bb8 <uGain_change>
 8000d82:	e006      	b.n	8000d92 <main+0x112>
	  }
	  else if(adcVal >= 1024) {
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d8a:	d302      	bcc.n	8000d92 <main+0x112>
		  uGain_change(2);
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f7ff ff13 	bl	8000bb8 <uGain_change>
	  }

	  //opamp pA_7
	  uint32_t opVal = HAL_ADC_GetValue(&hadc2);
 8000d92:	481b      	ldr	r0, [pc, #108]	; (8000e00 <main+0x180>)
 8000d94:	f001 f8fc 	bl	8001f90 <HAL_ADC_GetValue>
 8000d98:	60b8      	str	r0, [r7, #8]
	  float opVolt =   opVal * sysVal / bitRess;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <main+0x18c>)
 8000da6:	edd3 7a00 	vldr	s15, [r3]
 8000daa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <main+0x188>)
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db8:	edc7 7a01 	vstr	s15, [r7, #4]


	  printf("\r\n Pomiar %u \r\n", cnt);
 8000dbc:	8afb      	ldrh	r3, [r7, #22]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <main+0x198>)
 8000dc2:	f005 f855 	bl	8005e70 <iprintf>
	  printf("Opamp: %.3f V (%lu) \r\n",opVolt,  opVal);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fbc6 	bl	8000558 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	9100      	str	r1, [sp, #0]
 8000dd4:	4811      	ldr	r0, [pc, #68]	; (8000e1c <main+0x19c>)
 8000dd6:	f005 f84b 	bl	8005e70 <iprintf>
	  printf("Basic: %.3f V (%lu) \r\n",basicVolt, adcVal);
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff fbbc 	bl	8000558 <__aeabi_f2d>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	6939      	ldr	r1, [r7, #16]
 8000de6:	9100      	str	r1, [sp, #0]
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <main+0x1a0>)
 8000dea:	f005 f841 	bl	8005e70 <iprintf>
	  cnt++;
 8000dee:	8afb      	ldrh	r3, [r7, #22]
 8000df0:	3301      	adds	r3, #1
 8000df2:	82fb      	strh	r3, [r7, #22]
	  HAL_Delay(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fc95 	bl	8001724 <HAL_Delay>
  {
 8000dfa:	e770      	b.n	8000cde <main+0x5e>
 8000dfc:	200001f8 	.word	0x200001f8
 8000e00:	20000248 	.word	0x20000248
 8000e04:	20000298 	.word	0x20000298
 8000e08:	20000354 	.word	0x20000354
 8000e0c:	20000350 	.word	0x20000350
 8000e10:	40533333 	.word	0x40533333
 8000e14:	48000800 	.word	0x48000800
 8000e18:	08008010 	.word	0x08008010
 8000e1c:	08008020 	.word	0x08008020
 8000e20:	08008038 	.word	0x08008038

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0a6      	sub	sp, #152	; 0x98
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e2e:	2228      	movs	r2, #40	; 0x28
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 fbaa 	bl	800558c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2258      	movs	r2, #88	; 0x58
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f004 fb9c 	bl	800558c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fa49 	bl	8003318 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000e8c:	f000 f99c 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e94:	2300      	movs	r3, #0
 8000e96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fa88 	bl	80043c0 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eb6:	f000 f987 	bl	80011c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000eba:	2382      	movs	r3, #130	; 0x82
 8000ebc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fcae 	bl	800482c <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ed6:	f000 f977 	bl	80011c8 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3798      	adds	r7, #152	; 0x98
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f62:	f000 fc03 	bl	800176c <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f6c:	f000 f92c 	bl	80011c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000f7c:	f001 fb74 	bl	8002668 <HAL_ADCEx_MultiModeConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f86:	f000 f91f 	bl	80011c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000f96:	2307      	movs	r3, #7
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_ADC1_Init+0xdc>)
 8000fa8:	f001 f872 	bl	8002090 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000fb2:	f000 f909 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001f8 	.word	0x200001f8

08000fc4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <MX_ADC2_Init+0xb4>)
 8000fdc:	4a27      	ldr	r2, [pc, #156]	; (800107c <MX_ADC2_Init+0xb8>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_ADC2_Init+0xb4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_ADC2_Init+0xb4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_ADC2_Init+0xb4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_ADC2_Init+0xb4>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_ADC2_Init+0xb4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_ADC2_Init+0xb4>)
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_ADC2_Init+0xb4>)
 8001008:	2201      	movs	r2, #1
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_ADC2_Init+0xb4>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_ADC2_Init+0xb4>)
 8001014:	2201      	movs	r2, #1
 8001016:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_ADC2_Init+0xb4>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_ADC2_Init+0xb4>)
 8001022:	2204      	movs	r2, #4
 8001024:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_ADC2_Init+0xb4>)
 8001028:	2200      	movs	r2, #0
 800102a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_ADC2_Init+0xb4>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_ADC2_Init+0xb4>)
 8001034:	f000 fb9a 	bl	800176c <HAL_ADC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800103e:	f000 f8c3 	bl	80011c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001042:	2303      	movs	r3, #3
 8001044:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001046:	2301      	movs	r3, #1
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800104e:	2303      	movs	r3, #3
 8001050:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC2_Init+0xb4>)
 8001060:	f001 f816 	bl	8002090 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800106a:	f000 f8ad 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000248 	.word	0x20000248
 800107c:	50000100 	.word	0x50000100

08001080 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <MX_OPAMP2_Init+0x48>)
 8001088:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 800108c:	2240      	movs	r2, #64	; 0x40
 800108e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 8001092:	220c      	movs	r2, #12
 8001094:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_OPAMP2_Init+0x44>)
 80010b0:	f001 ff36 	bl	8002f20 <HAL_OPAMP_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 80010ba:	f000 f885 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000298 	.word	0x20000298
 80010c8:	4001003c 	.word	0x4001003c

080010cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <MX_USART2_UART_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_USART2_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_USART2_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_USART2_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_USART2_UART_Init+0x58>)
 8001110:	f003 fdaa 	bl	8004c68 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 f855 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002cc 	.word	0x200002cc
 8001128:	40004400 	.word	0x40004400

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_GPIO_Init+0x94>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <MX_GPIO_Init+0x94>)
 8001148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x94>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_GPIO_Init+0x94>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <MX_GPIO_Init+0x94>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_GPIO_Init+0x94>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ledProcess_GPIO_Port, ledProcess_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2120      	movs	r1, #32
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f001 feb9 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButt_Pin */
  GPIO_InitStruct.Pin = userButt_Pin;
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButt_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_GPIO_Init+0x98>)
 8001194:	f001 fd0a 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ledProcess_Pin */
  GPIO_InitStruct.Pin = ledProcess_Pin;
 8001198:	2320      	movs	r3, #32
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ledProcess_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f001 fcfb 	bl	8002bac <HAL_GPIO_Init>

}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000800 	.word	0x48000800

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <Error_Handler+0x8>
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x44>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_MspInit+0x44>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x44>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x44>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x44>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x44>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123c:	d12e      	bne.n	800129c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001246:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <HAL_ADC_MspInit+0xf0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	4a2e      	ldr	r2, [pc, #184]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6153      	str	r3, [r2, #20]
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a28      	ldr	r2, [pc, #160]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 800126e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001272:	6153      	str	r3, [r2, #20]
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001280:	2301      	movs	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f001 fc89 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800129a:	e032      	b.n	8001302 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12d      	bne.n	8001302 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_ADC_MspInit+0xf0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_ADC_MspInit+0xf0>)
 80012ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_ADC_MspInit+0xf0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10b      	bne.n	80012d0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6153      	str	r3, [r2, #20]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 80012d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012da:	6153      	str	r3, [r2, #20]
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f001 fc55 	bl	8002bac <HAL_GPIO_Init>
}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000358 	.word	0x20000358
 8001310:	40021000 	.word	0x40021000
 8001314:	50000100 	.word	0x50000100

08001318 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_OPAMP_MspInit+0x5c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d118      	bne.n	800136c <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_OPAMP_MspInit+0x60>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_OPAMP_MspInit+0x60>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_OPAMP_MspInit+0x60>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f001 fc20 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	4001003c 	.word	0x4001003c
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0x7c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d128      	bne.n	80013f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_UART_MspInit+0x80>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a16      	ldr	r2, [pc, #88]	; (80013fc <HAL_UART_MspInit+0x80>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_UART_MspInit+0x80>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_UART_MspInit+0x80>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_UART_MspInit+0x80>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_UART_MspInit+0x80>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ce:	230c      	movs	r3, #12
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013de:	2307      	movs	r3, #7
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f001 fbde 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40004400 	.word	0x40004400
 80013fc:	40021000 	.word	0x40021000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f94a 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <_getpid>:
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
 8001458:	2301      	movs	r3, #1
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_kill>:
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	f004 f863 	bl	8005538 <__errno>
 8001472:	4603      	mov	r3, r0
 8001474:	2216      	movs	r2, #22
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_exit>:
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe7 	bl	8001464 <_kill>
 8001496:	e7fe      	b.n	8001496 <_exit+0x12>

08001498 <_read>:
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fbb5 	bl	8000c5c <__io_putchar>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	2300      	movs	r3, #0
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	2301      	movs	r3, #1
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
 80015a4:	f003 ffc8 	bl	8005538 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20010000 	.word	0x20010000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	2000035c 	.word	0x2000035c
 80015dc:	20000378 	.word	0x20000378

080015e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopForever+0x2>
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopForever+0x6>)
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopForever+0xa>)
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopForever+0xe>)
 800160e:	2300      	movs	r3, #0
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:
 8001612:	58d4      	ldr	r4, [r2, r3]
 8001614:	50c4      	str	r4, [r0, r3]
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:
 8001618:	18c4      	adds	r4, r0, r3
 800161a:	428c      	cmp	r4, r1
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopForever+0x12>)
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopForever+0x16>)
 8001622:	2300      	movs	r3, #0
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:
 800162a:	42a2      	cmp	r2, r4
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>
 800162e:	f7ff ffd7 	bl	80015e0 <SystemInit>
 8001632:	f003 ff87 	bl	8005544 <__libc_init_array>
 8001636:	f7ff fb23 	bl	8000c80 <main>

0800163a <LoopForever>:
 800163a:	e7fe      	b.n	800163a <LoopForever>
 800163c:	20010000 	.word	0x20010000
 8001640:	20000000 	.word	0x20000000
 8001644:	200001dc 	.word	0x200001dc
 8001648:	0800846c 	.word	0x0800846c
 800164c:	200001dc 	.word	0x200001dc
 8001650:	20000374 	.word	0x20000374

08001654 <ADC1_2_IRQHandler>:
 8001654:	e7fe      	b.n	8001654 <ADC1_2_IRQHandler>
	...

08001658 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_Init+0x28>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_Init+0x28>)
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f001 fa6b 	bl	8002b44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	200f      	movs	r0, #15
 8001670:	f000 f808 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001674:	f7ff fdae 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40022000 	.word	0x40022000

08001684 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x54>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x58>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 fa75 	bl	8002b92 <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c0:	f001 fa4b 	bl	8002b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x5c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	20000360 	.word	0x20000360

0800170c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000360 	.word	0x20000360

08001724 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b09a      	sub	sp, #104	; 0x68
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e1e3      	b.n	8001b54 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	d176      	bne.n	800188c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d152      	bne.n	800184c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fd2b 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d13b      	bne.n	800184c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f001 f89d 	bl	8002914 <ADC_Disable>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d12f      	bne.n	800184c <HAL_ADC_Init+0xe0>
 80017ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d12b      	bne.n	800184c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017fc:	f023 0302 	bic.w	r3, r3, #2
 8001800:	f043 0202 	orr.w	r2, r3, #2
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001816:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001826:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001828:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_ADC_Init+0x308>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a92      	ldr	r2, [pc, #584]	; (8001a78 <HAL_ADC_Init+0x30c>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9a      	lsrs	r2, r3, #18
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183e:	e002      	b.n	8001846 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3b01      	subs	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f9      	bne.n	8001840 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001868:	d110      	bne.n	800188c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0312 	bic.w	r3, r3, #18
 8001872:	f043 0210 	orr.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 8150 	bne.w	8001b3a <HAL_ADC_Init+0x3ce>
 800189a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 814b 	bne.w	8001b3a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 8143 	bne.w	8001b3a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018cc:	d004      	beq.n	80018d8 <HAL_ADC_Init+0x16c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_ADC_Init+0x310>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_Init+0x170>
 80018d8:	4b69      	ldr	r3, [pc, #420]	; (8001a80 <HAL_ADC_Init+0x314>)
 80018da:	e000      	b.n	80018de <HAL_ADC_Init+0x172>
 80018dc:	4b69      	ldr	r3, [pc, #420]	; (8001a84 <HAL_ADC_Init+0x318>)
 80018de:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e8:	d102      	bne.n	80018f0 <HAL_ADC_Init+0x184>
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_ADC_Init+0x310>)
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e01a      	b.n	8001926 <HAL_ADC_Init+0x1ba>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a61      	ldr	r2, [pc, #388]	; (8001a7c <HAL_ADC_Init+0x310>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d103      	bne.n	8001902 <HAL_ADC_Init+0x196>
 80018fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e011      	b.n	8001926 <HAL_ADC_Init+0x1ba>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_ADC_Init+0x31c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <HAL_ADC_Init+0x1a6>
 800190c:	4b5f      	ldr	r3, [pc, #380]	; (8001a8c <HAL_ADC_Init+0x320>)
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e009      	b.n	8001926 <HAL_ADC_Init+0x1ba>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a5d      	ldr	r2, [pc, #372]	; (8001a8c <HAL_ADC_Init+0x320>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d102      	bne.n	8001922 <HAL_ADC_Init+0x1b6>
 800191c:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <HAL_ADC_Init+0x31c>)
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e001      	b.n	8001926 <HAL_ADC_Init+0x1ba>
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d108      	bne.n	8001946 <HAL_ADC_Init+0x1da>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Init+0x1da>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_ADC_Init+0x1dc>
 8001946:	2300      	movs	r3, #0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11c      	bne.n	8001986 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800194c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d010      	beq.n	8001974 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_ADC_Init+0x202>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_ADC_Init+0x202>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_ADC_Init+0x204>
 800196e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001970:	2b00      	cmp	r3, #0
 8001972:	d108      	bne.n	8001986 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001984:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7e5b      	ldrb	r3, [r3, #25]
 800198a:	035b      	lsls	r3, r3, #13
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001990:	2a01      	cmp	r2, #1
 8001992:	d002      	beq.n	800199a <HAL_ADC_Init+0x22e>
 8001994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001998:	e000      	b.n	800199c <HAL_ADC_Init+0x230>
 800199a:	2200      	movs	r2, #0
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ac:	4313      	orrs	r3, r2
 80019ae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d11b      	bne.n	80019f2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7e5b      	ldrb	r3, [r3, #25]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	3b01      	subs	r3, #1
 80019c8:	045a      	lsls	r2, r3, #17
 80019ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019cc:	4313      	orrs	r3, r2
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	663b      	str	r3, [r7, #96]	; 0x60
 80019d4:	e00d      	b.n	80019f2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019de:	f043 0220 	orr.w	r2, r3, #32
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d054      	beq.n	8001aa4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <HAL_ADC_Init+0x31c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_ADC_Init+0x2a2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a20      	ldr	r2, [pc, #128]	; (8001a8c <HAL_ADC_Init+0x320>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d140      	bne.n	8001a90 <HAL_ADC_Init+0x324>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001a16:	d02a      	beq.n	8001a6e <HAL_ADC_Init+0x302>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a20:	d022      	beq.n	8001a68 <HAL_ADC_Init+0x2fc>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001a2a:	d01a      	beq.n	8001a62 <HAL_ADC_Init+0x2f6>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001a34:	d012      	beq.n	8001a5c <HAL_ADC_Init+0x2f0>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001a3e:	d00a      	beq.n	8001a56 <HAL_ADC_Init+0x2ea>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001a48:	d002      	beq.n	8001a50 <HAL_ADC_Init+0x2e4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	e023      	b.n	8001a98 <HAL_ADC_Init+0x32c>
 8001a50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a54:	e020      	b.n	8001a98 <HAL_ADC_Init+0x32c>
 8001a56:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a5a:	e01d      	b.n	8001a98 <HAL_ADC_Init+0x32c>
 8001a5c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001a60:	e01a      	b.n	8001a98 <HAL_ADC_Init+0x32c>
 8001a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a66:	e017      	b.n	8001a98 <HAL_ADC_Init+0x32c>
 8001a68:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001a6c:	e014      	b.n	8001a98 <HAL_ADC_Init+0x32c>
 8001a6e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a72:	e011      	b.n	8001a98 <HAL_ADC_Init+0x32c>
 8001a74:	20000000 	.word	0x20000000
 8001a78:	431bde83 	.word	0x431bde83
 8001a7c:	50000100 	.word	0x50000100
 8001a80:	50000300 	.word	0x50000300
 8001a84:	50000700 	.word	0x50000700
 8001a88:	50000400 	.word	0x50000400
 8001a8c:	50000500 	.word	0x50000500
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d114      	bne.n	8001adc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac0:	f023 0302 	bic.w	r3, r3, #2
 8001ac4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7e1b      	ldrb	r3, [r3, #24]
 8001aca:	039a      	lsls	r2, r3, #14
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_ADC_Init+0x3f0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001aec:	430b      	orrs	r3, r1
 8001aee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d10c      	bne.n	8001b12 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f023 010f 	bic.w	r1, r3, #15
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	1e5a      	subs	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b10:	e007      	b.n	8001b22 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 020f 	bic.w	r2, r2, #15
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f023 0303 	bic.w	r3, r3, #3
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
 8001b38:	e00a      	b.n	8001b50 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f023 0312 	bic.w	r3, r3, #18
 8001b42:	f043 0210 	orr.w	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3768      	adds	r7, #104	; 0x68
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	fff0c007 	.word	0xfff0c007

08001b60 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 80f9 	bne.w	8001d6e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_Start+0x2a>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0f4      	b.n	8001d74 <HAL_ADC_Start+0x214>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fe5a 	bl	800284c <ADC_Enable>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80e0 	bne.w	8001d64 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc0:	d004      	beq.n	8001bcc <HAL_ADC_Start+0x6c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6d      	ldr	r2, [pc, #436]	; (8001d7c <HAL_ADC_Start+0x21c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d106      	bne.n	8001bda <HAL_ADC_Start+0x7a>
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_ADC_Start+0x220>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d010      	beq.n	8001bfa <HAL_ADC_Start+0x9a>
 8001bd8:	e005      	b.n	8001be6 <HAL_ADC_Start+0x86>
 8001bda:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_ADC_Start+0x224>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_ADC_Start+0x9a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bee:	d004      	beq.n	8001bfa <HAL_ADC_Start+0x9a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a64      	ldr	r2, [pc, #400]	; (8001d88 <HAL_ADC_Start+0x228>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d115      	bne.n	8001c26 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d036      	beq.n	8001c82 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c24:	e02d      	b.n	8001c82 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c3a:	d004      	beq.n	8001c46 <HAL_ADC_Start+0xe6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_ADC_Start+0x21c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10a      	bne.n	8001c5c <HAL_ADC_Start+0xfc>
 8001c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e008      	b.n	8001c6e <HAL_ADC_Start+0x10e>
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <HAL_ADC_Start+0x228>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8e:	d106      	bne.n	8001c9e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f023 0206 	bic.w	r2, r3, #6
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	221c      	movs	r2, #28
 8001cb2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cbc:	d004      	beq.n	8001cc8 <HAL_ADC_Start+0x168>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <HAL_ADC_Start+0x21c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d106      	bne.n	8001cd6 <HAL_ADC_Start+0x176>
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_ADC_Start+0x220>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03e      	beq.n	8001d52 <HAL_ADC_Start+0x1f2>
 8001cd4:	e005      	b.n	8001ce2 <HAL_ADC_Start+0x182>
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_ADC_Start+0x224>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d037      	beq.n	8001d52 <HAL_ADC_Start+0x1f2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cea:	d004      	beq.n	8001cf6 <HAL_ADC_Start+0x196>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <HAL_ADC_Start+0x21c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d106      	bne.n	8001d04 <HAL_ADC_Start+0x1a4>
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_ADC_Start+0x220>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d027      	beq.n	8001d52 <HAL_ADC_Start+0x1f2>
 8001d02:	e005      	b.n	8001d10 <HAL_ADC_Start+0x1b0>
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_ADC_Start+0x224>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d020      	beq.n	8001d52 <HAL_ADC_Start+0x1f2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d18:	d004      	beq.n	8001d24 <HAL_ADC_Start+0x1c4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_ADC_Start+0x21c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d106      	bne.n	8001d32 <HAL_ADC_Start+0x1d2>
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_ADC_Start+0x220>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d010      	beq.n	8001d52 <HAL_ADC_Start+0x1f2>
 8001d30:	e005      	b.n	8001d3e <HAL_ADC_Start+0x1de>
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_ADC_Start+0x224>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	d009      	beq.n	8001d52 <HAL_ADC_Start+0x1f2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d46:	d004      	beq.n	8001d52 <HAL_ADC_Start+0x1f2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_ADC_Start+0x228>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10f      	bne.n	8001d72 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0204 	orr.w	r2, r2, #4
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	e006      	b.n	8001d72 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d6c:	e001      	b.n	8001d72 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	50000100 	.word	0x50000100
 8001d80:	50000300 	.word	0x50000300
 8001d84:	50000700 	.word	0x50000700
 8001d88:	50000400 	.word	0x50000400

08001d8c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d102      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001da2:	2308      	movs	r3, #8
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e03a      	b.n	8001e1e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db0:	d004      	beq.n	8001dbc <HAL_ADC_PollForConversion+0x30>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <HAL_ADC_PollForConversion+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x34>
 8001dbc:	4b71      	ldr	r3, [pc, #452]	; (8001f84 <HAL_ADC_PollForConversion+0x1f8>)
 8001dbe:	e000      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x36>
 8001dc0:	4b71      	ldr	r3, [pc, #452]	; (8001f88 <HAL_ADC_PollForConversion+0x1fc>)
 8001dc2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d112      	bne.n	8001df6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d11d      	bne.n	8001e1a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0bf      	b.n	8001f76 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f043 0220 	orr.w	r2, r3, #32
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0ad      	b.n	8001f76 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_PollForConversion+0xa6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a54      	ldr	r2, [pc, #336]	; (8001f80 <HAL_ADC_PollForConversion+0x1f4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d106      	bne.n	8001e40 <HAL_ADC_PollForConversion+0xb4>
 8001e32:	4b54      	ldr	r3, [pc, #336]	; (8001f84 <HAL_ADC_PollForConversion+0x1f8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d010      	beq.n	8001e60 <HAL_ADC_PollForConversion+0xd4>
 8001e3e:	e005      	b.n	8001e4c <HAL_ADC_PollForConversion+0xc0>
 8001e40:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <HAL_ADC_PollForConversion+0x1fc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_ADC_PollForConversion+0xd4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e54:	d004      	beq.n	8001e60 <HAL_ADC_PollForConversion+0xd4>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4c      	ldr	r2, [pc, #304]	; (8001f8c <HAL_ADC_PollForConversion+0x200>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d104      	bne.n	8001e6a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e00f      	b.n	8001e8a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e72:	d004      	beq.n	8001e7e <HAL_ADC_PollForConversion+0xf2>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <HAL_ADC_PollForConversion+0x1f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d102      	bne.n	8001e84 <HAL_ADC_PollForConversion+0xf8>
 8001e7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e82:	e000      	b.n	8001e86 <HAL_ADC_PollForConversion+0xfa>
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_ADC_PollForConversion+0x200>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001e8a:	f7ff fc3f 	bl	800170c <HAL_GetTick>
 8001e8e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e90:	e021      	b.n	8001ed6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e98:	d01d      	beq.n	8001ed6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_ADC_PollForConversion+0x124>
 8001ea0:	f7ff fc34 	bl	800170c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d212      	bcs.n	8001ed6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f043 0204 	orr.w	r2, r3, #4
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04f      	b.n	8001f76 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0d6      	beq.n	8001e92 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d131      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d12c      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d125      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d112      	bne.n	8001f4a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d112      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
 8001f48:	e00b      	b.n	8001f62 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0220 	orr.w	r2, r3, #32
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	50000100 	.word	0x50000100
 8001f84:	50000300 	.word	0x50000300
 8001f88:	50000700 	.word	0x50000700
 8001f8c:	50000400 	.word	0x50000400

08001f90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADCEx_Calibration_Start+0x1c>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e05f      	b.n	8002086 <HAL_ADCEx_Calibration_Start+0xdc>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fca0 	bl	8002914 <ADC_Disable>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d14e      	bne.n	800207c <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001ff2:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002008:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002018:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800201a:	f7ff fb77 	bl	800170c <HAL_GetTick>
 800201e:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002020:	e01c      	b.n	800205c <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002022:	f7ff fb73 	bl	800170c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b0a      	cmp	r3, #10
 800202e:	d915      	bls.n	800205c <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800203a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800203e:	d10d      	bne.n	800205c <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f023 0312 	bic.w	r3, r3, #18
 8002048:	f043 0210 	orr.w	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e014      	b.n	8002086 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800206a:	d0da      	beq.n	8002022 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f023 0303 	bic.w	r3, r3, #3
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002090:	b480      	push	{r7}
 8002092:	b09b      	sub	sp, #108	; 0x6c
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x22>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e2ca      	b.n	8002648 <HAL_ADC_ConfigChannel+0x5b8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 82ae 	bne.w	8002626 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d81c      	bhi.n	800210c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	461a      	mov	r2, r3
 80020e6:	231f      	movs	r3, #31
 80020e8:	4093      	lsls	r3, r2
 80020ea:	43db      	mvns	r3, r3
 80020ec:	4019      	ands	r1, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
 800210a:	e063      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b09      	cmp	r3, #9
 8002112:	d81e      	bhi.n	8002152 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	3b1e      	subs	r3, #30
 8002128:	221f      	movs	r2, #31
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	4019      	ands	r1, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	3b1e      	subs	r3, #30
 8002144:	fa00 f203 	lsl.w	r2, r0, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	635a      	str	r2, [r3, #52]	; 0x34
 8002150:	e040      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b0e      	cmp	r3, #14
 8002158:	d81e      	bhi.n	8002198 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	3b3c      	subs	r3, #60	; 0x3c
 800216e:	221f      	movs	r2, #31
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	4019      	ands	r1, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	3b3c      	subs	r3, #60	; 0x3c
 800218a:	fa00 f203 	lsl.w	r2, r0, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	639a      	str	r2, [r3, #56]	; 0x38
 8002196:	e01d      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	3b5a      	subs	r3, #90	; 0x5a
 80021ac:	221f      	movs	r2, #31
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	4019      	ands	r1, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	3b5a      	subs	r3, #90	; 0x5a
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80e5 	bne.w	80023ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	d91c      	bls.n	8002226 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6999      	ldr	r1, [r3, #24]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	3b1e      	subs	r3, #30
 80021fe:	2207      	movs	r2, #7
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	4019      	ands	r1, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6898      	ldr	r0, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	3b1e      	subs	r3, #30
 8002218:	fa00 f203 	lsl.w	r2, r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	619a      	str	r2, [r3, #24]
 8002224:	e019      	b.n	800225a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6959      	ldr	r1, [r3, #20]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	2207      	movs	r2, #7
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	4019      	ands	r1, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6898      	ldr	r0, [r3, #8]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	3b01      	subs	r3, #1
 8002278:	2b03      	cmp	r3, #3
 800227a:	d84f      	bhi.n	800231c <HAL_ADC_ConfigChannel+0x28c>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_ADC_ConfigChannel+0x1f4>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	08002295 	.word	0x08002295
 8002288:	080022b7 	.word	0x080022b7
 800228c:	080022d9 	.word	0x080022d9
 8002290:	080022fb 	.word	0x080022fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800229a:	4b9a      	ldr	r3, [pc, #616]	; (8002504 <HAL_ADC_ConfigChannel+0x474>)
 800229c:	4013      	ands	r3, r2
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	0691      	lsls	r1, r2, #26
 80022a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a6:	430a      	orrs	r2, r1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b4:	e07e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022bc:	4b91      	ldr	r3, [pc, #580]	; (8002504 <HAL_ADC_ConfigChannel+0x474>)
 80022be:	4013      	ands	r3, r2
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	0691      	lsls	r1, r2, #26
 80022c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022c8:	430a      	orrs	r2, r1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022d6:	e06d      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022de:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_ADC_ConfigChannel+0x474>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	0691      	lsls	r1, r2, #26
 80022e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022ea:	430a      	orrs	r2, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022f8:	e05c      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002300:	4b80      	ldr	r3, [pc, #512]	; (8002504 <HAL_ADC_ConfigChannel+0x474>)
 8002302:	4013      	ands	r3, r2
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	0691      	lsls	r1, r2, #26
 800230a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800230c:	430a      	orrs	r2, r1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002318:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800231a:	e04b      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800233e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	069b      	lsls	r3, r3, #26
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002362:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002386:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	069b      	lsls	r3, r3, #26
 8002398:	429a      	cmp	r2, r3
 800239a:	d10a      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80023ac:	e001      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80023ae:	bf00      	nop
 80023b0:	e000      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x344>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x344>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x346>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 8130 	bne.w	800263c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d00f      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	400a      	ands	r2, r1
 80023fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002402:	e049      	b.n	8002498 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	409a      	lsls	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b09      	cmp	r3, #9
 8002424:	d91c      	bls.n	8002460 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6999      	ldr	r1, [r3, #24]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	3b1b      	subs	r3, #27
 8002438:	2207      	movs	r2, #7
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	4019      	ands	r1, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6898      	ldr	r0, [r3, #8]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1b      	subs	r3, #27
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	619a      	str	r2, [r3, #24]
 800245e:	e01b      	b.n	8002498 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6959      	ldr	r1, [r3, #20]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	2207      	movs	r2, #7
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	4019      	ands	r1, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6898      	ldr	r0, [r3, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	fa00 f203 	lsl.w	r2, r0, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a0:	d004      	beq.n	80024ac <HAL_ADC_ConfigChannel+0x41c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_ADC_ConfigChannel+0x478>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x420>
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_ADC_ConfigChannel+0x47c>)
 80024ae:	e000      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x422>
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_ADC_ConfigChannel+0x480>)
 80024b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024cc:	2b11      	cmp	r3, #17
 80024ce:	d105      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024e0:	2b12      	cmp	r3, #18
 80024e2:	f040 80ab 	bne.w	800263c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 80a4 	bne.w	800263c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fc:	d10a      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x484>
 80024fe:	4b02      	ldr	r3, [pc, #8]	; (8002508 <HAL_ADC_ConfigChannel+0x478>)
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e022      	b.n	800254a <HAL_ADC_ConfigChannel+0x4ba>
 8002504:	83fff000 	.word	0x83fff000
 8002508:	50000100 	.word	0x50000100
 800250c:	50000300 	.word	0x50000300
 8002510:	50000700 	.word	0x50000700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_ADC_ConfigChannel+0x5c4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d103      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x496>
 800251e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e011      	b.n	800254a <HAL_ADC_ConfigChannel+0x4ba>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4b      	ldr	r2, [pc, #300]	; (8002658 <HAL_ADC_ConfigChannel+0x5c8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x4a6>
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_ADC_ConfigChannel+0x5cc>)
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e009      	b.n	800254a <HAL_ADC_ConfigChannel+0x4ba>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a48      	ldr	r2, [pc, #288]	; (800265c <HAL_ADC_ConfigChannel+0x5cc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d102      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x4b6>
 8002540:	4b45      	ldr	r3, [pc, #276]	; (8002658 <HAL_ADC_ConfigChannel+0x5c8>)
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e001      	b.n	800254a <HAL_ADC_ConfigChannel+0x4ba>
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_ADC_ConfigChannel+0x4da>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x4da>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_ADC_ConfigChannel+0x4dc>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d150      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002570:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x502>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x502>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_ADC_ConfigChannel+0x504>
 8002592:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002594:	2b00      	cmp	r3, #0
 8002596:	d13c      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b10      	cmp	r3, #16
 800259e:	d11d      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x54c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a8:	d118      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_ADC_ConfigChannel+0x5d0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <HAL_ADC_ConfigChannel+0x5d4>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	0c9a      	lsrs	r2, r3, #18
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025da:	e02e      	b.n	800263a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b11      	cmp	r3, #17
 80025e2:	d10b      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x56c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ec:	d106      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80025f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025fa:	e01e      	b.n	800263a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b12      	cmp	r3, #18
 8002602:	d11a      	bne.n	800263a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800260c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002610:	e013      	b.n	800263a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0220 	orr.w	r2, r3, #32
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002624:	e00a      	b.n	800263c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002638:	e000      	b.n	800263c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800263a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002644:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002648:	4618      	mov	r0, r3
 800264a:	376c      	adds	r7, #108	; 0x6c
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	50000100 	.word	0x50000100
 8002658:	50000400 	.word	0x50000400
 800265c:	50000500 	.word	0x50000500
 8002660:	20000000 	.word	0x20000000
 8002664:	431bde83 	.word	0x431bde83

08002668 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002668:	b480      	push	{r7}
 800266a:	b099      	sub	sp, #100	; 0x64
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002680:	d102      	bne.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002682:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	e01a      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6a      	ldr	r2, [pc, #424]	; (8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d103      	bne.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002692:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	e011      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a67      	ldr	r2, [pc, #412]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d102      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	e009      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a64      	ldr	r2, [pc, #400]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026b4:	4b61      	ldr	r3, [pc, #388]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	e001      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b0      	b.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e0a9      	b.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 808d 	bne.w	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8086 	bne.w	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002704:	d004      	beq.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002712:	e000      	b.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002714:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002716:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d040      	beq.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002732:	035b      	lsls	r3, r3, #13
 8002734:	430b      	orrs	r3, r1
 8002736:	431a      	orrs	r2, r3
 8002738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d15c      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800277e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d14b      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800278c:	f023 030f 	bic.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	6811      	ldr	r1, [r2, #0]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	6892      	ldr	r2, [r2, #8]
 8002798:	430a      	orrs	r2, r1
 800279a:	431a      	orrs	r2, r3
 800279c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a0:	e03c      	b.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ac:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d108      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d123      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80027f0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d112      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80027f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027fe:	f023 030f 	bic.w	r3, r3, #15
 8002802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002804:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002806:	e009      	b.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800281a:	e000      	b.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800281c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800282a:	4618      	mov	r0, r3
 800282c:	3764      	adds	r7, #100	; 0x64
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	50000100 	.word	0x50000100
 800283c:	50000400 	.word	0x50000400
 8002840:	50000500 	.word	0x50000500
 8002844:	50000300 	.word	0x50000300
 8002848:	50000700 	.word	0x50000700

0800284c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <ADC_Enable+0x2c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <ADC_Enable+0x2c>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <ADC_Enable+0x2e>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d143      	bne.n	8002906 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <ADC_Enable+0xc4>)
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f043 0210 	orr.w	r2, r3, #16
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e02f      	b.n	8002908 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80028b8:	f7fe ff28 	bl	800170c <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028be:	e01b      	b.n	80028f8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028c0:	f7fe ff24 	bl	800170c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d914      	bls.n	80028f8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d00d      	beq.n	80028f8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0210 	orr.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e007      	b.n	8002908 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d1dc      	bne.n	80028c0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	8000003f 	.word	0x8000003f

08002914 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d108      	bne.n	8002940 <ADC_Disable+0x2c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <ADC_Disable+0x2c>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <ADC_Disable+0x2e>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d047      	beq.n	80029d6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030d 	and.w	r3, r3, #13
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10f      	bne.n	8002974 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0202 	orr.w	r2, r2, #2
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2203      	movs	r2, #3
 800296a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800296c:	f7fe fece 	bl	800170c <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002972:	e029      	b.n	80029c8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e023      	b.n	80029d8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002990:	f7fe febc 	bl	800170c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d914      	bls.n	80029c8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10d      	bne.n	80029c8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f043 0210 	orr.w	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d0dc      	beq.n	8002990 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b10:	d301      	bcc.n	8002b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00f      	b.n	8002b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <SysTick_Config+0x40>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1e:	210f      	movs	r1, #15
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b24:	f7ff ff8e 	bl	8002a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <SysTick_Config+0x40>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <SysTick_Config+0x40>)
 8002b30:	2207      	movs	r2, #7
 8002b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000e010 	.word	0xe000e010

08002b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ff47 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b6c:	f7ff ff5c 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f7ff ff8e 	bl	8002a98 <NVIC_EncodePriority>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff5d 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffb0 	bl	8002b00 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bba:	e160      	b.n	8002e7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8152 	beq.w	8002e78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d005      	beq.n	8002bec <HAL_GPIO_Init+0x40>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d130      	bne.n	8002c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c22:	2201      	movs	r2, #1
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0201 	and.w	r2, r3, #1
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d017      	beq.n	8002c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d123      	bne.n	8002cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	6939      	ldr	r1, [r7, #16]
 8002cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80ac 	beq.w	8002e78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d20:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <HAL_GPIO_Init+0x2f0>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <HAL_GPIO_Init+0x2f0>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6193      	str	r3, [r2, #24]
 8002d2c:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_GPIO_Init+0x2f0>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d38:	4a59      	ldr	r2, [pc, #356]	; (8002ea0 <HAL_GPIO_Init+0x2f4>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d62:	d025      	beq.n	8002db0 <HAL_GPIO_Init+0x204>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a4f      	ldr	r2, [pc, #316]	; (8002ea4 <HAL_GPIO_Init+0x2f8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d01f      	beq.n	8002dac <HAL_GPIO_Init+0x200>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a4e      	ldr	r2, [pc, #312]	; (8002ea8 <HAL_GPIO_Init+0x2fc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d019      	beq.n	8002da8 <HAL_GPIO_Init+0x1fc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <HAL_GPIO_Init+0x300>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_GPIO_Init+0x1f8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <HAL_GPIO_Init+0x304>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00d      	beq.n	8002da0 <HAL_GPIO_Init+0x1f4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a4b      	ldr	r2, [pc, #300]	; (8002eb4 <HAL_GPIO_Init+0x308>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0x1f0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a4a      	ldr	r2, [pc, #296]	; (8002eb8 <HAL_GPIO_Init+0x30c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_GPIO_Init+0x1ec>
 8002d94:	2306      	movs	r3, #6
 8002d96:	e00c      	b.n	8002db2 <HAL_GPIO_Init+0x206>
 8002d98:	2307      	movs	r3, #7
 8002d9a:	e00a      	b.n	8002db2 <HAL_GPIO_Init+0x206>
 8002d9c:	2305      	movs	r3, #5
 8002d9e:	e008      	b.n	8002db2 <HAL_GPIO_Init+0x206>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e006      	b.n	8002db2 <HAL_GPIO_Init+0x206>
 8002da4:	2303      	movs	r3, #3
 8002da6:	e004      	b.n	8002db2 <HAL_GPIO_Init+0x206>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e002      	b.n	8002db2 <HAL_GPIO_Init+0x206>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_GPIO_Init+0x206>
 8002db0:	2300      	movs	r3, #0
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	f002 0203 	and.w	r2, r2, #3
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	4093      	lsls	r3, r2
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dc2:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_GPIO_Init+0x2f4>)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002df4:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f ae97 	bne.w	8002bbc <HAL_GPIO_Init+0x10>
  }
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	48000400 	.word	0x48000400
 8002ea8:	48000800 	.word	0x48000800
 8002eac:	48000c00 	.word	0x48000c00
 8002eb0:	48001000 	.word	0x48001000
 8002eb4:	48001400 	.word	0x48001400
 8002eb8:	48001800 	.word	0x48001800
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e001      	b.n	8002ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e08f      	b.n	8003056 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d101      	bne.n	8002f46 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e087      	b.n	8003056 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d101      	bne.n	8002f56 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e07f      	b.n	8003056 <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_OPAMP_Init+0x140>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a3f      	ldr	r2, [pc, #252]	; (8003060 <HAL_OPAMP_Init+0x140>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6193      	str	r3, [r2, #24]
 8002f68:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_OPAMP_Init+0x140>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe f9c5 	bl	8001318 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d003      	beq.n	8002f9e <HAL_OPAMP_Init+0x7e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b60      	cmp	r3, #96	; 0x60
 8002f9c:	d125      	bne.n	8002fea <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_OPAMP_Init+0x144>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6851      	ldr	r1, [r2, #4]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68d2      	ldr	r2, [r2, #12]
 8002fb0:	4311      	orrs	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6912      	ldr	r2, [r2, #16]
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6992      	ldr	r2, [r2, #24]
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	69d2      	ldr	r2, [r2, #28]
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6a12      	ldr	r2, [r2, #32]
 8002fc8:	4311      	orrs	r1, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fd4:	04d2      	lsls	r2, r2, #19
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fdc:	0612      	lsls	r2, r2, #24
 8002fde:	4311      	orrs	r1, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e02a      	b.n	8003040 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <HAL_OPAMP_Init+0x144>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6851      	ldr	r1, [r2, #4]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6892      	ldr	r2, [r2, #8]
 8002ffc:	4311      	orrs	r1, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68d2      	ldr	r2, [r2, #12]
 8003002:	4311      	orrs	r1, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6912      	ldr	r2, [r2, #16]
 8003008:	4311      	orrs	r1, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6952      	ldr	r2, [r2, #20]
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6992      	ldr	r2, [r2, #24]
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	69d2      	ldr	r2, [r2, #28]
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6a12      	ldr	r2, [r2, #32]
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800302c:	04d2      	lsls	r2, r2, #19
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003034:	0612      	lsls	r2, r2, #24
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	430b      	orrs	r3, r1
 800303e:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	e0003811 	.word	0xe0003811

08003068 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	e01d      	b.n	80030bc <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b05      	cmp	r3, #5
 800308a:	d102      	bne.n	8003092 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e014      	b.n	80030bc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10c      	bne.n	80030b8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2204      	movs	r2, #4
 80030b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80030b6:	e001      	b.n	80030bc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	75fb      	strb	r3, [r7, #23]
 80030e0:	e114      	b.n	800330c <HAL_OPAMP_SelfCalibrate+0x242>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d102      	bne.n	80030f4 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
 80030f2:	e10b      	b.n	800330c <HAL_OPAMP_SelfCalibrate+0x242>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 8103 	bne.w	8003308 <HAL_OPAMP_SelfCalibrate+0x23e>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0202 	orr.w	r2, r2, #2
 8003110:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003120:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003130:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90U% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003140:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8003152:	2310      	movs	r3, #16
 8003154:	613b      	str	r3, [r7, #16]
      delta = 8U;
 8003156:	2308      	movs	r3, #8
 8003158:	60bb      	str	r3, [r7, #8]

      while (delta != 0U)
 800315a:	e020      	b.n	800319e <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	061a      	lsls	r2, r3, #24
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2U);
 8003172:	2002      	movs	r0, #2
 8003174:	f7fe fad6 	bl	8001724 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4413      	add	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	e003      	b.n	8003198 <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1U;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	60bb      	str	r3, [r7, #8]
      while (delta != 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1db      	bne.n	800315c <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	061a      	lsls	r2, r3, #24
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2U);
 80031ba:	2002      	movs	r0, #2
 80031bc:	f7fe fab2 	bl	8001724 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	3301      	adds	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	061a      	lsls	r2, r3, #24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10U% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031fc:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 80031fe:	2310      	movs	r3, #16
 8003200:	60fb      	str	r3, [r7, #12]
      delta = 8U;
 8003202:	2308      	movs	r3, #8
 8003204:	60bb      	str	r3, [r7, #8]

      while (delta != 0U)
 8003206:	e020      	b.n	800324a <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	04da      	lsls	r2, r3, #19
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2U);
 800321e:	2002      	movs	r0, #2
 8003220:	f7fe fa80 	bl	8001724 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e003      	b.n	8003244 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1U;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
      while (delta != 0U)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1db      	bne.n	8003208 <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	04da      	lsls	r2, r3, #19
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2U);
 8003266:	2002      	movs	r0, #2
 8003268:	f7fe fa5c 	bl	8001724 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3301      	adds	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	04da      	lsls	r2, r3, #19
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0202 	bic.w	r2, r2, #2
 80032c4:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timming) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Select user timming mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	04da      	lsls	r2, r3, #19
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	061a      	lsls	r2, r3, #24
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e001      	b.n	800330c <HAL_OPAMP_SelfCalibrate+0x242>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800331e:	af00      	add	r7, sp, #0
 8003320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003324:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003328:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f001 b83a 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003342:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 816f 	beq.w	8003632 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003354:	4bb5      	ldr	r3, [pc, #724]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	d00c      	beq.n	800337a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003360:	4bb2      	ldr	r3, [pc, #712]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d15c      	bne.n	8003426 <HAL_RCC_OscConfig+0x10e>
 800336c:	4baf      	ldr	r3, [pc, #700]	; (800362c <HAL_RCC_OscConfig+0x314>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d155      	bne.n	8003426 <HAL_RCC_OscConfig+0x10e>
 800337a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800337e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800338e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_RCC_OscConfig+0x94>
 80033a6:	4ba1      	ldr	r3, [pc, #644]	; (800362c <HAL_RCC_OscConfig+0x314>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	e015      	b.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80033c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033d4:	4b95      	ldr	r3, [pc, #596]	; (800362c <HAL_RCC_OscConfig+0x314>)
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033dc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80033e0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80033e4:	fa92 f2a2 	rbit	r2, r2
 80033e8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80033ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033f0:	fab2 f282 	clz	r2, r2
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f042 0220 	orr.w	r2, r2, #32
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	f002 021f 	and.w	r2, r2, #31
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f202 	lsl.w	r2, r1, r2
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8111 	beq.w	8003630 <HAL_RCC_OscConfig+0x318>
 800340e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003412:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8108 	bne.w	8003630 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f000 bfc6 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x12e>
 8003438:	4b7c      	ldr	r3, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x314>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a7b      	ldr	r2, [pc, #492]	; (800362c <HAL_RCC_OscConfig+0x314>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e036      	b.n	80034b4 <HAL_RCC_OscConfig+0x19c>
 8003446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800344a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x158>
 8003456:	4b75      	ldr	r3, [pc, #468]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a74      	ldr	r2, [pc, #464]	; (800362c <HAL_RCC_OscConfig+0x314>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b72      	ldr	r3, [pc, #456]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a71      	ldr	r2, [pc, #452]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e021      	b.n	80034b4 <HAL_RCC_OscConfig+0x19c>
 8003470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003474:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x184>
 8003482:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a69      	ldr	r2, [pc, #420]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a66      	ldr	r2, [pc, #408]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0x19c>
 800349c:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_OscConfig+0x314>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a62      	ldr	r2, [pc, #392]	; (800362c <HAL_RCC_OscConfig+0x314>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b60      	ldr	r3, [pc, #384]	; (800362c <HAL_RCC_OscConfig+0x314>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5f      	ldr	r2, [pc, #380]	; (800362c <HAL_RCC_OscConfig+0x314>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d059      	beq.n	8003578 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe f922 	bl	800170c <HAL_GetTick>
 80034c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ce:	f7fe f91d 	bl	800170c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d902      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	f000 bf67 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
 80034e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80034f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d102      	bne.n	8003516 <HAL_RCC_OscConfig+0x1fe>
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x22a>
 8003516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800352a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003532:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCC_OscConfig+0x314>)
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003546:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800354a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800354e:	fa92 f2a2 	rbit	r2, r2
 8003552:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003556:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800355a:	fab2 f282 	clz	r2, r2
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f042 0220 	orr.w	r2, r2, #32
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f002 021f 	and.w	r2, r2, #31
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ab      	beq.n	80034ce <HAL_RCC_OscConfig+0x1b6>
 8003576:	e05c      	b.n	8003632 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe f8c8 	bl	800170c <HAL_GetTick>
 800357c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003582:	f7fe f8c3 	bl	800170c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d902      	bls.n	8003598 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	f000 bf0d 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
 8003598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80035ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d102      	bne.n	80035ca <HAL_RCC_OscConfig+0x2b2>
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_OscConfig+0x314>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	e015      	b.n	80035f6 <HAL_RCC_OscConfig+0x2de>
 80035ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80035de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80035e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_RCC_OscConfig+0x314>)
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035fa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80035fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003602:	fa92 f2a2 	rbit	r2, r2
 8003606:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800360a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800360e:	fab2 f282 	clz	r2, r2
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f042 0220 	orr.w	r2, r2, #32
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f002 021f 	and.w	r2, r2, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ab      	bne.n	8003582 <HAL_RCC_OscConfig+0x26a>
 800362a:	e002      	b.n	8003632 <HAL_RCC_OscConfig+0x31a>
 800362c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003636:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 817f 	beq.w	8003946 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003648:	4ba7      	ldr	r3, [pc, #668]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003654:	4ba4      	ldr	r3, [pc, #656]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d173      	bne.n	8003748 <HAL_RCC_OscConfig+0x430>
 8003660:	4ba1      	ldr	r3, [pc, #644]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	d16c      	bne.n	8003748 <HAL_RCC_OscConfig+0x430>
 800366e:	2302      	movs	r3, #2
 8003670:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003680:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d102      	bne.n	800369e <HAL_RCC_OscConfig+0x386>
 8003698:	4b93      	ldr	r3, [pc, #588]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e013      	b.n	80036c6 <HAL_RCC_OscConfig+0x3ae>
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80036b0:	2302      	movs	r3, #2
 80036b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80036b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80036c2:	4b89      	ldr	r3, [pc, #548]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2202      	movs	r2, #2
 80036c8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80036cc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80036d0:	fa92 f2a2 	rbit	r2, r2
 80036d4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80036d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f042 0220 	orr.w	r2, r2, #32
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f002 021f 	and.w	r2, r2, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCC_OscConfig+0x3f6>
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d002      	beq.n	800370e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f000 be52 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800371a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	21f8      	movs	r1, #248	; 0xf8
 8003724:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800372c:	fa91 f1a1 	rbit	r1, r1
 8003730:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003734:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003738:	fab1 f181 	clz	r1, r1
 800373c:	b2c9      	uxtb	r1, r1
 800373e:	408b      	lsls	r3, r1
 8003740:	4969      	ldr	r1, [pc, #420]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	e0fe      	b.n	8003946 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8088 	beq.w	800386a <HAL_RCC_OscConfig+0x552>
 800375a:	2301      	movs	r3, #1
 800375c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800376c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800377a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	461a      	mov	r2, r3
 8003782:	2301      	movs	r3, #1
 8003784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fd ffc1 	bl	800170c <HAL_GetTick>
 800378a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003790:	f7fd ffbc 	bl	800170c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d902      	bls.n	80037a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	f000 be06 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
 80037a6:	2302      	movs	r3, #2
 80037a8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80037b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4be>
 80037d0:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	e013      	b.n	80037fe <HAL_RCC_OscConfig+0x4e6>
 80037d6:	2302      	movs	r3, #2
 80037d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80037e8:	2302      	movs	r3, #2
 80037ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2202      	movs	r2, #2
 8003800:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003804:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003808:	fa92 f2a2 	rbit	r2, r2
 800380c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003810:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003814:	fab2 f282 	clz	r2, r2
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f042 0220 	orr.w	r2, r2, #32
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f002 021f 	and.w	r2, r2, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0af      	beq.n	8003790 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	21f8      	movs	r1, #248	; 0xf8
 8003846:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800384e:	fa91 f1a1 	rbit	r1, r1
 8003852:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003856:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800385a:	fab1 f181 	clz	r1, r1
 800385e:	b2c9      	uxtb	r1, r1
 8003860:	408b      	lsls	r3, r1
 8003862:	4921      	ldr	r1, [pc, #132]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e06d      	b.n	8003946 <HAL_RCC_OscConfig+0x62e>
 800386a:	2301      	movs	r3, #1
 800386c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800387c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800388a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	461a      	mov	r2, r3
 8003892:	2300      	movs	r3, #0
 8003894:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd ff39 	bl	800170c <HAL_GetTick>
 800389a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fd ff34 	bl	800170c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d902      	bls.n	80038b6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	f000 bd7e 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
 80038b6:	2302      	movs	r3, #2
 80038b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80038c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0x5d4>
 80038e0:	4b01      	ldr	r3, [pc, #4]	; (80038e8 <HAL_RCC_OscConfig+0x5d0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	e016      	b.n	8003914 <HAL_RCC_OscConfig+0x5fc>
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003910:	4bbf      	ldr	r3, [pc, #764]	; (8003c10 <HAL_RCC_OscConfig+0x8f8>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2202      	movs	r2, #2
 8003916:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800391a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003926:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ac      	bne.n	80038a0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8113 	beq.w	8003b82 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003960:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d07c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x74e>
 800396c:	2301      	movs	r3, #1
 800396e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800397e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	4ba2      	ldr	r3, [pc, #648]	; (8003c14 <HAL_RCC_OscConfig+0x8fc>)
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	461a      	mov	r2, r3
 8003992:	2301      	movs	r3, #1
 8003994:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003996:	f7fd feb9 	bl	800170c <HAL_GetTick>
 800399a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fd feb4 	bl	800170c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d902      	bls.n	80039b6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	f000 bcfe 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c0:	fa93 f2a3 	rbit	r2, r3
 80039c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039d6:	2202      	movs	r2, #2
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fa93 f2a3 	rbit	r2, r3
 80039e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	4b7e      	ldr	r3, [pc, #504]	; (8003c10 <HAL_RCC_OscConfig+0x8f8>)
 8003a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a22:	2102      	movs	r1, #2
 8003a24:	6019      	str	r1, [r3, #0]
 8003a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	fa93 f1a3 	rbit	r1, r3
 8003a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a3c:	6019      	str	r1, [r3, #0]
  return result;
 8003a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a42:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fab3 f383 	clz	r3, r3
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d09d      	beq.n	80039a0 <HAL_RCC_OscConfig+0x688>
 8003a64:	e08d      	b.n	8003b82 <HAL_RCC_OscConfig+0x86a>
 8003a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a88:	601a      	str	r2, [r3, #0]
  return result;
 8003a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a92:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	fab3 f383 	clz	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x8fc>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fe30 	bl	800170c <HAL_GetTick>
 8003aac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab2:	f7fd fe2b 	bl	800170c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	f000 bc75 	b.w	80043b2 <HAL_RCC_OscConfig+0x109a>
 8003ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003acc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fa93 f2a3 	rbit	r2, r3
 8003ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003af4:	2202      	movs	r2, #2
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fa93 f2a3 	rbit	r2, r3
 8003b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCC_OscConfig+0x8f8>)
 8003b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b40:	2102      	movs	r1, #2
 8003b42:	6019      	str	r1, [r3, #0]
 8003b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	fa93 f1a3 	rbit	r1, r3
 8003b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b56:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b5a:	6019      	str	r1, [r3, #0]
  return result;
 8003b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d197      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 81a5 	beq.w	8003ee2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_RCC_OscConfig+0x8f8>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_OscConfig+0x8f8>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_RCC_OscConfig+0x8f8>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	61d3      	str	r3, [r2, #28]
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <HAL_RCC_OscConfig+0x8f8>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <HAL_RCC_OscConfig+0x900>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d121      	bne.n	8003c28 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_RCC_OscConfig+0x900>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0b      	ldr	r2, [pc, #44]	; (8003c18 <HAL_RCC_OscConfig+0x900>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7fd fd8c 	bl	800170c <HAL_GetTick>
 8003bf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e010      	b.n	8003c1c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fd fd87 	bl	800170c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d908      	bls.n	8003c1c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e3d1      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	10908120 	.word	0x10908120
 8003c18:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b8d      	ldr	r3, [pc, #564]	; (8003e54 <HAL_RCC_OscConfig+0xb3c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0e8      	beq.n	8003bfa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x92e>
 8003c38:	4b87      	ldr	r3, [pc, #540]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4a86      	ldr	r2, [pc, #536]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6213      	str	r3, [r2, #32]
 8003c44:	e035      	b.n	8003cb2 <HAL_RCC_OscConfig+0x99a>
 8003c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x958>
 8003c56:	4b80      	ldr	r3, [pc, #512]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a7f      	ldr	r2, [pc, #508]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	4b7d      	ldr	r3, [pc, #500]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4a7c      	ldr	r2, [pc, #496]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	6213      	str	r3, [r2, #32]
 8003c6e:	e020      	b.n	8003cb2 <HAL_RCC_OscConfig+0x99a>
 8003c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d10c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x982>
 8003c80:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a74      	ldr	r2, [pc, #464]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6213      	str	r3, [r2, #32]
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x99a>
 8003c9a:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6213      	str	r3, [r2, #32]
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4a6b      	ldr	r2, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8081 	beq.w	8003dc6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fd fd22 	bl	800170c <HAL_GetTick>
 8003cc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fd fd1d 	bl	800170c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e365      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
 8003ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003cee:	2202      	movs	r2, #2
 8003cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	fa93 f2a3 	rbit	r2, r3
 8003d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d12:	2202      	movs	r2, #2
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	fa93 f2a3 	rbit	r2, r3
 8003d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d2c:	601a      	str	r2, [r3, #0]
  return result;
 8003d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d32:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f043 0302 	orr.w	r3, r3, #2
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d102      	bne.n	8003d52 <HAL_RCC_OscConfig+0xa3a>
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	e013      	b.n	8003d7a <HAL_RCC_OscConfig+0xa62>
 8003d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d56:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	fa93 f2a3 	rbit	r2, r3
 8003d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d70:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d7e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d82:	2102      	movs	r1, #2
 8003d84:	6011      	str	r1, [r2, #0]
 8003d86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	fa92 f1a2 	rbit	r1, r2
 8003d94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d98:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d9c:	6011      	str	r1, [r2, #0]
  return result;
 8003d9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003da2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	fab2 f282 	clz	r2, r2
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	f002 021f 	and.w	r2, r2, #31
 8003db8:	2101      	movs	r1, #1
 8003dba:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d084      	beq.n	8003cce <HAL_RCC_OscConfig+0x9b6>
 8003dc4:	e083      	b.n	8003ece <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fd fca1 	bl	800170c <HAL_GetTick>
 8003dca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fd fc9c 	bl	800170c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e2e4      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
 8003de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003df0:	2202      	movs	r2, #2
 8003df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	fa93 f2a3 	rbit	r2, r3
 8003e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e14:	2202      	movs	r2, #2
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fa93 f2a3 	rbit	r2, r3
 8003e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e2e:	601a      	str	r2, [r3, #0]
  return result;
 8003e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e34:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCC_OscConfig+0xb44>
 8003e4e:	4b02      	ldr	r3, [pc, #8]	; (8003e58 <HAL_RCC_OscConfig+0xb40>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	e017      	b.n	8003e84 <HAL_RCC_OscConfig+0xb6c>
 8003e54:	40007000 	.word	0x40007000
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e60:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e64:	2202      	movs	r2, #2
 8003e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f2a3 	rbit	r2, r3
 8003e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	4bb3      	ldr	r3, [pc, #716]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e88:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	6011      	str	r1, [r2, #0]
 8003e90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	fa92 f1a2 	rbit	r1, r2
 8003e9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ea2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003ea6:	6011      	str	r1, [r2, #0]
  return result;
 8003ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eac:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	fab2 f282 	clz	r2, r2
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	f002 021f 	and.w	r2, r2, #31
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d180      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ece:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b9e      	ldr	r3, [pc, #632]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4a9d      	ldr	r2, [pc, #628]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 825e 	beq.w	80043b0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef4:	4b96      	ldr	r3, [pc, #600]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	f000 821f 	beq.w	8004340 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	f040 8170 	bne.w	80041f4 <HAL_RCC_OscConfig+0xedc>
 8003f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f18:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	fa93 f2a3 	rbit	r2, r3
 8003f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f38:	601a      	str	r2, [r3, #0]
  return result;
 8003f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f42:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f44:	fab3 f383 	clz	r3, r3
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	461a      	mov	r2, r3
 8003f56:	2300      	movs	r3, #0
 8003f58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fbd7 	bl	800170c <HAL_GetTick>
 8003f5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f62:	e009      	b.n	8003f78 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fd fbd2 	bl	800170c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e21c      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
 8003f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f2a3 	rbit	r2, r3
 8003f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f9c:	601a      	str	r2, [r3, #0]
  return result;
 8003f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003fa6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d102      	bne.n	8003fc2 <HAL_RCC_OscConfig+0xcaa>
 8003fbc:	4b64      	ldr	r3, [pc, #400]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	e027      	b.n	8004012 <HAL_RCC_OscConfig+0xcfa>
 8003fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	fa93 f2a3 	rbit	r2, r3
 8003fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004008:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004016:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800401a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800401e:	6011      	str	r1, [r2, #0]
 8004020:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004024:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	fa92 f1a2 	rbit	r1, r2
 800402e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004032:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004036:	6011      	str	r1, [r2, #0]
  return result;
 8004038:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800403c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	fab2 f282 	clz	r2, r2
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	f042 0220 	orr.w	r2, r2, #32
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	f002 021f 	and.w	r2, r2, #31
 8004052:	2101      	movs	r1, #1
 8004054:	fa01 f202 	lsl.w	r2, r1, r2
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d182      	bne.n	8003f64 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405e:	4b3c      	ldr	r3, [pc, #240]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f023 020f 	bic.w	r2, r3, #15
 8004066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	4937      	ldr	r1, [pc, #220]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 8004074:	4313      	orrs	r3, r2
 8004076:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004084:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a19      	ldr	r1, [r3, #32]
 800408c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	430b      	orrs	r3, r1
 800409a:	492d      	ldr	r1, [pc, #180]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
 80040a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80040a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fa93 f2a3 	rbit	r2, r3
 80040bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040c4:	601a      	str	r2, [r3, #0]
  return result;
 80040c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	2301      	movs	r3, #1
 80040e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fd fb11 	bl	800170c <HAL_GetTick>
 80040ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ee:	e009      	b.n	8004104 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd fb0c 	bl	800170c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e156      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
 8004104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004108:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800410c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004116:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	fa93 f2a3 	rbit	r2, r3
 8004120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004124:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004128:	601a      	str	r2, [r3, #0]
  return result;
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004132:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0xe3c>
 8004148:	4b01      	ldr	r3, [pc, #4]	; (8004150 <HAL_RCC_OscConfig+0xe38>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	e02a      	b.n	80041a4 <HAL_RCC_OscConfig+0xe8c>
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004158:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800415c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004166:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	fa93 f2a3 	rbit	r2, r3
 8004170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004174:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fa93 f2a3 	rbit	r2, r3
 8004196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	4b86      	ldr	r3, [pc, #536]	; (80043bc <HAL_RCC_OscConfig+0x10a4>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80041ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	fa92 f1a2 	rbit	r1, r2
 80041c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041c4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80041c8:	6011      	str	r1, [r2, #0]
  return result;
 80041ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041ce:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f002 021f 	and.w	r2, r2, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f43f af7f 	beq.w	80040f0 <HAL_RCC_OscConfig+0xdd8>
 80041f2:	e0dd      	b.n	80043b0 <HAL_RCC_OscConfig+0x1098>
 80041f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004206:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	fa93 f2a3 	rbit	r2, r3
 8004210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004214:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004218:	601a      	str	r2, [r3, #0]
  return result;
 800421a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004222:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800422e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423a:	f7fd fa67 	bl	800170c <HAL_GetTick>
 800423e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004242:	e009      	b.n	8004258 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fa62 	bl	800170c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0ac      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
 8004258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800425c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800426a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	fa93 f2a3 	rbit	r2, r3
 8004274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004278:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800427c:	601a      	str	r2, [r3, #0]
  return result;
 800427e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004282:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004286:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d102      	bne.n	80042a2 <HAL_RCC_OscConfig+0xf8a>
 800429c:	4b47      	ldr	r3, [pc, #284]	; (80043bc <HAL_RCC_OscConfig+0x10a4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	e027      	b.n	80042f2 <HAL_RCC_OscConfig+0xfda>
 80042a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80042aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	fa93 f2a3 	rbit	r2, r3
 80042be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042cc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	fa93 f2a3 	rbit	r2, r3
 80042e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <HAL_RCC_OscConfig+0x10a4>)
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042fe:	6011      	str	r1, [r2, #0]
 8004300:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004304:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	fa92 f1a2 	rbit	r1, r2
 800430e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004312:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004316:	6011      	str	r1, [r2, #0]
  return result;
 8004318:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800431c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	fab2 f282 	clz	r2, r2
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f042 0220 	orr.w	r2, r2, #32
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	f002 021f 	and.w	r2, r2, #31
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f202 	lsl.w	r2, r1, r2
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d182      	bne.n	8004244 <HAL_RCC_OscConfig+0xf2c>
 800433e:	e037      	b.n	80043b0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004344:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e02e      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <HAL_RCC_OscConfig+0x10a4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800435c:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_RCC_OscConfig+0x10a4>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004364:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004368:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800436c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004370:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	429a      	cmp	r2, r3
 800437a:	d117      	bne.n	80043ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800437c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004380:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004388:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004390:	429a      	cmp	r2, r3
 8004392:	d10b      	bne.n	80043ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000

080043c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b09e      	sub	sp, #120	; 0x78
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e162      	b.n	800469e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b90      	ldr	r3, [pc, #576]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d910      	bls.n	8004408 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b8d      	ldr	r3, [pc, #564]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 0207 	bic.w	r2, r3, #7
 80043ee:	498b      	ldr	r1, [pc, #556]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b89      	ldr	r3, [pc, #548]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e14a      	b.n	800469e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004414:	4b82      	ldr	r3, [pc, #520]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	497f      	ldr	r1, [pc, #508]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80dc 	beq.w	80045ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d13c      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xf6>
 800443c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004440:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	b2db      	uxtb	r3, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d102      	bne.n	8004466 <HAL_RCC_ClockConfig+0xa6>
 8004460:	4b6f      	ldr	r3, [pc, #444]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	e00f      	b.n	8004486 <HAL_RCC_ClockConfig+0xc6>
 8004466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800446a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	667b      	str	r3, [r7, #100]	; 0x64
 8004474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004478:	663b      	str	r3, [r7, #96]	; 0x60
 800447a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800447c:	fa93 f3a3 	rbit	r3, r3
 8004480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004482:	4b67      	ldr	r3, [pc, #412]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800448a:	65ba      	str	r2, [r7, #88]	; 0x58
 800448c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800448e:	fa92 f2a2 	rbit	r2, r2
 8004492:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004494:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004496:	fab2 f282 	clz	r2, r2
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f042 0220 	orr.w	r2, r2, #32
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	f002 021f 	and.w	r2, r2, #31
 80044a6:	2101      	movs	r1, #1
 80044a8:	fa01 f202 	lsl.w	r2, r1, r2
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d17b      	bne.n	80045aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e0f3      	b.n	800469e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d13c      	bne.n	8004538 <HAL_RCC_ClockConfig+0x178>
 80044be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d102      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x128>
 80044e2:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	e00f      	b.n	8004508 <HAL_RCC_ClockConfig+0x148>
 80044e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	647b      	str	r3, [r7, #68]	; 0x44
 80044f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044fa:	643b      	str	r3, [r7, #64]	; 0x40
 80044fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fe:	fa93 f3a3 	rbit	r3, r3
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004504:	4b46      	ldr	r3, [pc, #280]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800450c:	63ba      	str	r2, [r7, #56]	; 0x38
 800450e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004510:	fa92 f2a2 	rbit	r2, r2
 8004514:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004518:	fab2 f282 	clz	r2, r2
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	f042 0220 	orr.w	r2, r2, #32
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	f002 021f 	and.w	r2, r2, #31
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f202 	lsl.w	r2, r1, r2
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d13a      	bne.n	80045aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0b2      	b.n	800469e <HAL_RCC_ClockConfig+0x2de>
 8004538:	2302      	movs	r3, #2
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <HAL_RCC_ClockConfig+0x1a0>
 800455a:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	e00d      	b.n	800457c <HAL_RCC_ClockConfig+0x1bc>
 8004560:	2302      	movs	r3, #2
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	2302      	movs	r3, #2
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2202      	movs	r2, #2
 800457e:	61ba      	str	r2, [r7, #24]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	fa92 f2a2 	rbit	r2, r2
 8004586:	617a      	str	r2, [r7, #20]
  return result;
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	fab2 f282 	clz	r2, r2
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	f042 0220 	orr.w	r2, r2, #32
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	f002 021f 	and.w	r2, r2, #31
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f202 	lsl.w	r2, r1, r2
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e079      	b.n	800469e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045aa:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f023 0203 	bic.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	491a      	ldr	r1, [pc, #104]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045bc:	f7fd f8a6 	bl	800170c <HAL_GetTick>
 80045c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	e00a      	b.n	80045da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c4:	f7fd f8a2 	bl	800170c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e061      	b.n	800469e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 020c 	and.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1eb      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d214      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b08      	ldr	r3, [pc, #32]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 0207 	bic.w	r2, r3, #7
 8004602:	4906      	ldr	r1, [pc, #24]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <HAL_RCC_ClockConfig+0x25c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d005      	beq.n	8004624 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e040      	b.n	800469e <HAL_RCC_ClockConfig+0x2de>
 800461c:	40022000 	.word	0x40022000
 8004620:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCC_ClockConfig+0x2e8>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	491a      	ldr	r1, [pc, #104]	; (80046a8 <HAL_RCC_ClockConfig+0x2e8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <HAL_RCC_ClockConfig+0x2e8>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4912      	ldr	r1, [pc, #72]	; (80046a8 <HAL_RCC_ClockConfig+0x2e8>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004662:	f000 f829 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004666:	4601      	mov	r1, r0
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <HAL_RCC_ClockConfig+0x2e8>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004670:	22f0      	movs	r2, #240	; 0xf0
 8004672:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	fa92 f2a2 	rbit	r2, r2
 800467a:	60fa      	str	r2, [r7, #12]
  return result;
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	fab2 f282 	clz	r2, r2
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	40d3      	lsrs	r3, r2
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x2ec>)
 8004688:	5cd3      	ldrb	r3, [r2, r3]
 800468a:	fa21 f303 	lsr.w	r3, r1, r3
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <HAL_RCC_ClockConfig+0x2f0>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCC_ClockConfig+0x2f4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fc fff4 	bl	8001684 <HAL_InitTick>
  
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3778      	adds	r7, #120	; 0x78
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	08008050 	.word	0x08008050
 80046b0:	20000000 	.word	0x20000000
 80046b4:	20000004 	.word	0x20000004

080046b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b08b      	sub	sp, #44	; 0x2c
 80046bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <HAL_RCC_GetSysClockFreq+0xc4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x30>
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x36>
 80046e6:	e03f      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046ea:	623b      	str	r3, [r7, #32]
      break;
 80046ec:	e03f      	b.n	800476e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80046f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80046f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	fa92 f2a2 	rbit	r2, r2
 8004700:	607a      	str	r2, [r7, #4]
  return result;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	fab2 f282 	clz	r2, r2
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	40d3      	lsrs	r3, r2
 800470c:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <HAL_RCC_GetSysClockFreq+0xcc>)
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	220f      	movs	r2, #15
 800471c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	fa92 f2a2 	rbit	r2, r2
 8004724:	60fa      	str	r2, [r7, #12]
  return result;
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	fab2 f282 	clz	r2, r2
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	40d3      	lsrs	r3, r2
 8004730:	4a15      	ldr	r2, [pc, #84]	; (8004788 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004732:	5cd3      	ldrb	r3, [r2, r3]
 8004734:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004740:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	fbb2 f2f3 	udiv	r2, r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	e007      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004752:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	fbb2 f2f3 	udiv	r2, r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	623b      	str	r3, [r7, #32]
      break;
 8004766:	e002      	b.n	800476e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_RCC_GetSysClockFreq+0xc8>)
 800476a:	623b      	str	r3, [r7, #32]
      break;
 800476c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476e:	6a3b      	ldr	r3, [r7, #32]
}
 8004770:	4618      	mov	r0, r3
 8004772:	372c      	adds	r7, #44	; 0x2c
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40021000 	.word	0x40021000
 8004780:	007a1200 	.word	0x007a1200
 8004784:	08008068 	.word	0x08008068
 8004788:	08008078 	.word	0x08008078

0800478c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000000 	.word	0x20000000

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80047aa:	f7ff ffef 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047ae:	4601      	mov	r1, r0
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80047bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	fa92 f2a2 	rbit	r2, r2
 80047c4:	603a      	str	r2, [r7, #0]
  return result;
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	fab2 f282 	clz	r2, r2
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	40d3      	lsrs	r3, r2
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80047d2:	5cd3      	ldrb	r3, [r2, r3]
 80047d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	08008060 	.word	0x08008060

080047e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047ee:	f7ff ffcd 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047f2:	4601      	mov	r1, r0
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004800:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	fa92 f2a2 	rbit	r2, r2
 8004808:	603a      	str	r2, [r7, #0]
  return result;
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	fab2 f282 	clz	r2, r2
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	40d3      	lsrs	r3, r2
 8004814:	4a04      	ldr	r2, [pc, #16]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004816:	5cd3      	ldrb	r3, [r2, r3]
 8004818:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	08008060 	.word	0x08008060

0800482c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b092      	sub	sp, #72	; 0x48
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80d4 	beq.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004850:	4b4e      	ldr	r3, [pc, #312]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10e      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485c:	4b4b      	ldr	r3, [pc, #300]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	4a4a      	ldr	r2, [pc, #296]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	61d3      	str	r3, [r2, #28]
 8004868:	4b48      	ldr	r3, [pc, #288]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d118      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b42      	ldr	r3, [pc, #264]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a41      	ldr	r2, [pc, #260]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fc ff3b 	bl	800170c <HAL_GetTick>
 8004896:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e008      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489a:	f7fc ff37 	bl	800170c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b64      	cmp	r3, #100	; 0x64
 80048a6:	d901      	bls.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1d6      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	4b38      	ldr	r3, [pc, #224]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b8:	4b34      	ldr	r3, [pc, #208]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8084 	beq.w	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d07c      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d8:	4b2c      	ldr	r3, [pc, #176]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	461a      	mov	r2, r3
 8004902:	2301      	movs	r3, #1
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	461a      	mov	r2, r3
 8004926:	2300      	movs	r3, #0
 8004928:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800492a:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d04b      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493a:	f7fc fee7 	bl	800170c <HAL_GetTick>
 800493e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	e00a      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc fee3 	bl	800170c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e180      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004958:	2302      	movs	r3, #2
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	2302      	movs	r3, #2
 8004966:	623b      	str	r3, [r7, #32]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	61fb      	str	r3, [r7, #28]
  return result;
 8004970:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d108      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004986:	4b01      	ldr	r3, [pc, #4]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	e00d      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800498c:	40021000 	.word	0x40021000
 8004990:	40007000 	.word	0x40007000
 8004994:	10908100 	.word	0x10908100
 8004998:	2302      	movs	r3, #2
 800499a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	4b9a      	ldr	r3, [pc, #616]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	2202      	movs	r2, #2
 80049aa:	613a      	str	r2, [r7, #16]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	fa92 f2a2 	rbit	r2, r2
 80049b2:	60fa      	str	r2, [r7, #12]
  return result;
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f002 021f 	and.w	r2, r2, #31
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0b7      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049d2:	4b8f      	ldr	r3, [pc, #572]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	498c      	ldr	r1, [pc, #560]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d105      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ec:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4a87      	ldr	r2, [pc, #540]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a04:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	f023 0203 	bic.w	r2, r3, #3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	497f      	ldr	r1, [pc, #508]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a22:	4b7b      	ldr	r3, [pc, #492]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4978      	ldr	r1, [pc, #480]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a40:	4b73      	ldr	r3, [pc, #460]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	4970      	ldr	r1, [pc, #448]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a5e:	4b6c      	ldr	r3, [pc, #432]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	f023 0210 	bic.w	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	4969      	ldr	r1, [pc, #420]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a7c:	4b64      	ldr	r3, [pc, #400]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	4961      	ldr	r1, [pc, #388]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f023 0220 	bic.w	r2, r3, #32
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	495a      	ldr	r1, [pc, #360]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ab8:	4b55      	ldr	r3, [pc, #340]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	4952      	ldr	r1, [pc, #328]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	494b      	ldr	r1, [pc, #300]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af4:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	4943      	ldr	r1, [pc, #268]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b12:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	493c      	ldr	r1, [pc, #240]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b30:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	4934      	ldr	r1, [pc, #208]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b4e:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	492d      	ldr	r1, [pc, #180]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b6c:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b78:	4925      	ldr	r1, [pc, #148]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	491e      	ldr	r1, [pc, #120]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	4916      	ldr	r1, [pc, #88]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	490f      	ldr	r1, [pc, #60]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	4907      	ldr	r1, [pc, #28]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004c02:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	4913      	ldr	r1, [pc, #76]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c34:	490b      	ldr	r1, [pc, #44]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	4904      	ldr	r1, [pc, #16]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3748      	adds	r7, #72	; 0x48
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e040      	b.n	8004cfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc fb76 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2224      	movs	r2, #36	; 0x24
 8004c94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f8c0 	bl	8004e2c <UART_SetConfig>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e022      	b.n	8004cfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa8a 	bl	80051d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb11 	bl	800531c <UART_CheckIdleState>
 8004cfa:	4603      	mov	r3, r0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f040 8082 	bne.w	8004e22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_Transmit+0x26>
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e07a      	b.n	8004e24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Transmit+0x38>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e073      	b.n	8004e24 <HAL_UART_Transmit+0x120>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2221      	movs	r2, #33	; 0x21
 8004d50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d52:	f7fc fcdb 	bl	800170c <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d108      	bne.n	8004d84 <HAL_UART_Transmit+0x80>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e003      	b.n	8004d8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d94:	e02d      	b.n	8004df2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fb04 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e039      	b.n	8004e24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc2:	b292      	uxth	r2, r2
 8004dc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	3302      	adds	r3, #2
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e008      	b.n	8004de0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1cb      	bne.n	8004d96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2140      	movs	r1, #64	; 0x40
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fad0 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e005      	b.n	8004e24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b92      	ldr	r3, [pc, #584]	; (80050a0 <UART_SetConfig+0x274>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a80      	ldr	r2, [pc, #512]	; (80050a4 <UART_SetConfig+0x278>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d120      	bne.n	8004eea <UART_SetConfig+0xbe>
 8004ea8:	4b7f      	ldr	r3, [pc, #508]	; (80050a8 <UART_SetConfig+0x27c>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d817      	bhi.n	8004ee4 <UART_SetConfig+0xb8>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <UART_SetConfig+0x90>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ed9 	.word	0x08004ed9
 8004ec4:	08004edf 	.word	0x08004edf
 8004ec8:	08004ed3 	.word	0x08004ed3
 8004ecc:	2301      	movs	r3, #1
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e0b5      	b.n	800503e <UART_SetConfig+0x212>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e0b2      	b.n	800503e <UART_SetConfig+0x212>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e0af      	b.n	800503e <UART_SetConfig+0x212>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e0ac      	b.n	800503e <UART_SetConfig+0x212>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e0a9      	b.n	800503e <UART_SetConfig+0x212>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a6f      	ldr	r2, [pc, #444]	; (80050ac <UART_SetConfig+0x280>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d124      	bne.n	8004f3e <UART_SetConfig+0x112>
 8004ef4:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <UART_SetConfig+0x27c>)
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004efc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f00:	d011      	beq.n	8004f26 <UART_SetConfig+0xfa>
 8004f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f06:	d817      	bhi.n	8004f38 <UART_SetConfig+0x10c>
 8004f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f0c:	d011      	beq.n	8004f32 <UART_SetConfig+0x106>
 8004f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f12:	d811      	bhi.n	8004f38 <UART_SetConfig+0x10c>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <UART_SetConfig+0xf4>
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d006      	beq.n	8004f2c <UART_SetConfig+0x100>
 8004f1e:	e00b      	b.n	8004f38 <UART_SetConfig+0x10c>
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e08b      	b.n	800503e <UART_SetConfig+0x212>
 8004f26:	2302      	movs	r3, #2
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e088      	b.n	800503e <UART_SetConfig+0x212>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e085      	b.n	800503e <UART_SetConfig+0x212>
 8004f32:	2308      	movs	r3, #8
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e082      	b.n	800503e <UART_SetConfig+0x212>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e07f      	b.n	800503e <UART_SetConfig+0x212>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a5b      	ldr	r2, [pc, #364]	; (80050b0 <UART_SetConfig+0x284>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d124      	bne.n	8004f92 <UART_SetConfig+0x166>
 8004f48:	4b57      	ldr	r3, [pc, #348]	; (80050a8 <UART_SetConfig+0x27c>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f54:	d011      	beq.n	8004f7a <UART_SetConfig+0x14e>
 8004f56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f5a:	d817      	bhi.n	8004f8c <UART_SetConfig+0x160>
 8004f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f60:	d011      	beq.n	8004f86 <UART_SetConfig+0x15a>
 8004f62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f66:	d811      	bhi.n	8004f8c <UART_SetConfig+0x160>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <UART_SetConfig+0x148>
 8004f6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f70:	d006      	beq.n	8004f80 <UART_SetConfig+0x154>
 8004f72:	e00b      	b.n	8004f8c <UART_SetConfig+0x160>
 8004f74:	2300      	movs	r3, #0
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e061      	b.n	800503e <UART_SetConfig+0x212>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e05e      	b.n	800503e <UART_SetConfig+0x212>
 8004f80:	2304      	movs	r3, #4
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e05b      	b.n	800503e <UART_SetConfig+0x212>
 8004f86:	2308      	movs	r3, #8
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e058      	b.n	800503e <UART_SetConfig+0x212>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e055      	b.n	800503e <UART_SetConfig+0x212>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a47      	ldr	r2, [pc, #284]	; (80050b4 <UART_SetConfig+0x288>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d124      	bne.n	8004fe6 <UART_SetConfig+0x1ba>
 8004f9c:	4b42      	ldr	r3, [pc, #264]	; (80050a8 <UART_SetConfig+0x27c>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004fa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fa8:	d011      	beq.n	8004fce <UART_SetConfig+0x1a2>
 8004faa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fae:	d817      	bhi.n	8004fe0 <UART_SetConfig+0x1b4>
 8004fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fb4:	d011      	beq.n	8004fda <UART_SetConfig+0x1ae>
 8004fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fba:	d811      	bhi.n	8004fe0 <UART_SetConfig+0x1b4>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <UART_SetConfig+0x19c>
 8004fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc4:	d006      	beq.n	8004fd4 <UART_SetConfig+0x1a8>
 8004fc6:	e00b      	b.n	8004fe0 <UART_SetConfig+0x1b4>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e037      	b.n	800503e <UART_SetConfig+0x212>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e034      	b.n	800503e <UART_SetConfig+0x212>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e031      	b.n	800503e <UART_SetConfig+0x212>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e02e      	b.n	800503e <UART_SetConfig+0x212>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e02b      	b.n	800503e <UART_SetConfig+0x212>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a33      	ldr	r2, [pc, #204]	; (80050b8 <UART_SetConfig+0x28c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d124      	bne.n	800503a <UART_SetConfig+0x20e>
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <UART_SetConfig+0x27c>)
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ff8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ffc:	d011      	beq.n	8005022 <UART_SetConfig+0x1f6>
 8004ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005002:	d817      	bhi.n	8005034 <UART_SetConfig+0x208>
 8005004:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005008:	d011      	beq.n	800502e <UART_SetConfig+0x202>
 800500a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800500e:	d811      	bhi.n	8005034 <UART_SetConfig+0x208>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <UART_SetConfig+0x1f0>
 8005014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005018:	d006      	beq.n	8005028 <UART_SetConfig+0x1fc>
 800501a:	e00b      	b.n	8005034 <UART_SetConfig+0x208>
 800501c:	2300      	movs	r3, #0
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e00d      	b.n	800503e <UART_SetConfig+0x212>
 8005022:	2302      	movs	r3, #2
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e00a      	b.n	800503e <UART_SetConfig+0x212>
 8005028:	2304      	movs	r3, #4
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e007      	b.n	800503e <UART_SetConfig+0x212>
 800502e:	2308      	movs	r3, #8
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e004      	b.n	800503e <UART_SetConfig+0x212>
 8005034:	2310      	movs	r3, #16
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e001      	b.n	800503e <UART_SetConfig+0x212>
 800503a:	2310      	movs	r3, #16
 800503c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005046:	d16c      	bne.n	8005122 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005048:	7ffb      	ldrb	r3, [r7, #31]
 800504a:	2b08      	cmp	r3, #8
 800504c:	d838      	bhi.n	80050c0 <UART_SetConfig+0x294>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x228>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	080050c1 	.word	0x080050c1
 8005064:	0800508f 	.word	0x0800508f
 8005068:	080050c1 	.word	0x080050c1
 800506c:	080050c1 	.word	0x080050c1
 8005070:	080050c1 	.word	0x080050c1
 8005074:	08005097 	.word	0x08005097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7ff fb94 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 800507c:	61b8      	str	r0, [r7, #24]
        break;
 800507e:	e024      	b.n	80050ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7ff fbb2 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 8005084:	61b8      	str	r0, [r7, #24]
        break;
 8005086:	e020      	b.n	80050ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <UART_SetConfig+0x290>)
 800508a:	61bb      	str	r3, [r7, #24]
        break;
 800508c:	e01d      	b.n	80050ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508e:	f7ff fb13 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005092:	61b8      	str	r0, [r7, #24]
        break;
 8005094:	e019      	b.n	80050ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509a:	61bb      	str	r3, [r7, #24]
        break;
 800509c:	e015      	b.n	80050ca <UART_SetConfig+0x29e>
 800509e:	bf00      	nop
 80050a0:	efff69f3 	.word	0xefff69f3
 80050a4:	40013800 	.word	0x40013800
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40004400 	.word	0x40004400
 80050b0:	40004800 	.word	0x40004800
 80050b4:	40004c00 	.word	0x40004c00
 80050b8:	40005000 	.word	0x40005000
 80050bc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	77bb      	strb	r3, [r7, #30]
        break;
 80050c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d075      	beq.n	80051bc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	005a      	lsls	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	441a      	add	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	d916      	bls.n	800511c <UART_SetConfig+0x2f0>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d212      	bcs.n	800511c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f023 030f 	bic.w	r3, r3, #15
 80050fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	b29b      	uxth	r3, r3
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	b29a      	uxth	r2, r3
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	4313      	orrs	r3, r2
 8005110:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	89fa      	ldrh	r2, [r7, #14]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	e04f      	b.n	80051bc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	77bb      	strb	r3, [r7, #30]
 8005120:	e04c      	b.n	80051bc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005122:	7ffb      	ldrb	r3, [r7, #31]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d828      	bhi.n	800517a <UART_SetConfig+0x34e>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <UART_SetConfig+0x304>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	0800517b 	.word	0x0800517b
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800517b 	.word	0x0800517b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7ff fb26 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8005158:	61b8      	str	r0, [r7, #24]
        break;
 800515a:	e013      	b.n	8005184 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800515c:	f7ff fb44 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 8005160:	61b8      	str	r0, [r7, #24]
        break;
 8005162:	e00f      	b.n	8005184 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <UART_SetConfig+0x3a8>)
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e00c      	b.n	8005184 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7ff faa5 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800516e:	61b8      	str	r0, [r7, #24]
        break;
 8005170:	e008      	b.n	8005184 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005176:	61bb      	str	r3, [r7, #24]
        break;
 8005178:	e004      	b.n	8005184 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	77bb      	strb	r3, [r7, #30]
        break;
 8005182:	bf00      	nop
    }

    if (pclk != 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	085a      	lsrs	r2, r3, #1
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	441a      	add	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d908      	bls.n	80051b8 <UART_SetConfig+0x38c>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d204      	bcs.n	80051b8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	e001      	b.n	80051bc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	007a1200 	.word	0x007a1200

080051d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d6:	d10a      	bne.n	80052ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800532c:	f7fc f9ee 	bl	800170c <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b08      	cmp	r3, #8
 800533e:	d10e      	bne.n	800535e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f82d 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e023      	b.n	80053a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b04      	cmp	r3, #4
 800536a:	d10e      	bne.n	800538a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800536c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f817 	bl	80053ae <UART_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e00d      	b.n	80053a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b09c      	sub	sp, #112	; 0x70
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053be:	e0a5      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c6:	f000 80a1 	beq.w	800550c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fc f99f 	bl	800170c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80053da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d13e      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053f4:	667b      	str	r3, [r7, #100]	; 0x64
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005400:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800540c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3308      	adds	r3, #8
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	663b      	str	r3, [r7, #96]	; 0x60
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005432:	64ba      	str	r2, [r7, #72]	; 0x48
 8005434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e067      	b.n	800552e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d04f      	beq.n	800550c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547a:	d147      	bne.n	800550c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005484:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800549a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
 80054a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	613b      	str	r3, [r7, #16]
   return(result);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054d8:	623a      	str	r2, [r7, #32]
 80054da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e010      	b.n	800552e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69da      	ldr	r2, [r3, #28]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4013      	ands	r3, r2
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	429a      	cmp	r2, r3
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	429a      	cmp	r2, r3
 8005528:	f43f af4a 	beq.w	80053c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3770      	adds	r7, #112	; 0x70
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <__errno>:
 8005538:	4b01      	ldr	r3, [pc, #4]	; (8005540 <__errno+0x8>)
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	2000000c 	.word	0x2000000c

08005544 <__libc_init_array>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4d0d      	ldr	r5, [pc, #52]	; (800557c <__libc_init_array+0x38>)
 8005548:	4c0d      	ldr	r4, [pc, #52]	; (8005580 <__libc_init_array+0x3c>)
 800554a:	1b64      	subs	r4, r4, r5
 800554c:	10a4      	asrs	r4, r4, #2
 800554e:	2600      	movs	r6, #0
 8005550:	42a6      	cmp	r6, r4
 8005552:	d109      	bne.n	8005568 <__libc_init_array+0x24>
 8005554:	4d0b      	ldr	r5, [pc, #44]	; (8005584 <__libc_init_array+0x40>)
 8005556:	4c0c      	ldr	r4, [pc, #48]	; (8005588 <__libc_init_array+0x44>)
 8005558:	f002 fd4e 	bl	8007ff8 <_init>
 800555c:	1b64      	subs	r4, r4, r5
 800555e:	10a4      	asrs	r4, r4, #2
 8005560:	2600      	movs	r6, #0
 8005562:	42a6      	cmp	r6, r4
 8005564:	d105      	bne.n	8005572 <__libc_init_array+0x2e>
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	f855 3b04 	ldr.w	r3, [r5], #4
 800556c:	4798      	blx	r3
 800556e:	3601      	adds	r6, #1
 8005570:	e7ee      	b.n	8005550 <__libc_init_array+0xc>
 8005572:	f855 3b04 	ldr.w	r3, [r5], #4
 8005576:	4798      	blx	r3
 8005578:	3601      	adds	r6, #1
 800557a:	e7f2      	b.n	8005562 <__libc_init_array+0x1e>
 800557c:	08008464 	.word	0x08008464
 8005580:	08008464 	.word	0x08008464
 8005584:	08008464 	.word	0x08008464
 8005588:	08008468 	.word	0x08008468

0800558c <memset>:
 800558c:	4402      	add	r2, r0
 800558e:	4603      	mov	r3, r0
 8005590:	4293      	cmp	r3, r2
 8005592:	d100      	bne.n	8005596 <memset+0xa>
 8005594:	4770      	bx	lr
 8005596:	f803 1b01 	strb.w	r1, [r3], #1
 800559a:	e7f9      	b.n	8005590 <memset+0x4>

0800559c <__cvt>:
 800559c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	ec55 4b10 	vmov	r4, r5, d0
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	460e      	mov	r6, r1
 80055a8:	4619      	mov	r1, r3
 80055aa:	462b      	mov	r3, r5
 80055ac:	bfbb      	ittet	lt
 80055ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055b2:	461d      	movlt	r5, r3
 80055b4:	2300      	movge	r3, #0
 80055b6:	232d      	movlt	r3, #45	; 0x2d
 80055b8:	700b      	strb	r3, [r1, #0]
 80055ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055c0:	4691      	mov	r9, r2
 80055c2:	f023 0820 	bic.w	r8, r3, #32
 80055c6:	bfbc      	itt	lt
 80055c8:	4622      	movlt	r2, r4
 80055ca:	4614      	movlt	r4, r2
 80055cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055d0:	d005      	beq.n	80055de <__cvt+0x42>
 80055d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055d6:	d100      	bne.n	80055da <__cvt+0x3e>
 80055d8:	3601      	adds	r6, #1
 80055da:	2102      	movs	r1, #2
 80055dc:	e000      	b.n	80055e0 <__cvt+0x44>
 80055de:	2103      	movs	r1, #3
 80055e0:	ab03      	add	r3, sp, #12
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	ab02      	add	r3, sp, #8
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	ec45 4b10 	vmov	d0, r4, r5
 80055ec:	4653      	mov	r3, sl
 80055ee:	4632      	mov	r2, r6
 80055f0:	f000 fce2 	bl	8005fb8 <_dtoa_r>
 80055f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055f8:	4607      	mov	r7, r0
 80055fa:	d102      	bne.n	8005602 <__cvt+0x66>
 80055fc:	f019 0f01 	tst.w	r9, #1
 8005600:	d022      	beq.n	8005648 <__cvt+0xac>
 8005602:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005606:	eb07 0906 	add.w	r9, r7, r6
 800560a:	d110      	bne.n	800562e <__cvt+0x92>
 800560c:	783b      	ldrb	r3, [r7, #0]
 800560e:	2b30      	cmp	r3, #48	; 0x30
 8005610:	d10a      	bne.n	8005628 <__cvt+0x8c>
 8005612:	2200      	movs	r2, #0
 8005614:	2300      	movs	r3, #0
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	f7fb fa5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800561e:	b918      	cbnz	r0, 8005628 <__cvt+0x8c>
 8005620:	f1c6 0601 	rsb	r6, r6, #1
 8005624:	f8ca 6000 	str.w	r6, [sl]
 8005628:	f8da 3000 	ldr.w	r3, [sl]
 800562c:	4499      	add	r9, r3
 800562e:	2200      	movs	r2, #0
 8005630:	2300      	movs	r3, #0
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fb fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800563a:	b108      	cbz	r0, 8005640 <__cvt+0xa4>
 800563c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005640:	2230      	movs	r2, #48	; 0x30
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	454b      	cmp	r3, r9
 8005646:	d307      	bcc.n	8005658 <__cvt+0xbc>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800564c:	1bdb      	subs	r3, r3, r7
 800564e:	4638      	mov	r0, r7
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	b004      	add	sp, #16
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	1c59      	adds	r1, r3, #1
 800565a:	9103      	str	r1, [sp, #12]
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e7f0      	b.n	8005642 <__cvt+0xa6>

08005660 <__exponent>:
 8005660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005662:	4603      	mov	r3, r0
 8005664:	2900      	cmp	r1, #0
 8005666:	bfb8      	it	lt
 8005668:	4249      	neglt	r1, r1
 800566a:	f803 2b02 	strb.w	r2, [r3], #2
 800566e:	bfb4      	ite	lt
 8005670:	222d      	movlt	r2, #45	; 0x2d
 8005672:	222b      	movge	r2, #43	; 0x2b
 8005674:	2909      	cmp	r1, #9
 8005676:	7042      	strb	r2, [r0, #1]
 8005678:	dd2a      	ble.n	80056d0 <__exponent+0x70>
 800567a:	f10d 0407 	add.w	r4, sp, #7
 800567e:	46a4      	mov	ip, r4
 8005680:	270a      	movs	r7, #10
 8005682:	46a6      	mov	lr, r4
 8005684:	460a      	mov	r2, r1
 8005686:	fb91 f6f7 	sdiv	r6, r1, r7
 800568a:	fb07 1516 	mls	r5, r7, r6, r1
 800568e:	3530      	adds	r5, #48	; 0x30
 8005690:	2a63      	cmp	r2, #99	; 0x63
 8005692:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005696:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800569a:	4631      	mov	r1, r6
 800569c:	dcf1      	bgt.n	8005682 <__exponent+0x22>
 800569e:	3130      	adds	r1, #48	; 0x30
 80056a0:	f1ae 0502 	sub.w	r5, lr, #2
 80056a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056a8:	1c44      	adds	r4, r0, #1
 80056aa:	4629      	mov	r1, r5
 80056ac:	4561      	cmp	r1, ip
 80056ae:	d30a      	bcc.n	80056c6 <__exponent+0x66>
 80056b0:	f10d 0209 	add.w	r2, sp, #9
 80056b4:	eba2 020e 	sub.w	r2, r2, lr
 80056b8:	4565      	cmp	r5, ip
 80056ba:	bf88      	it	hi
 80056bc:	2200      	movhi	r2, #0
 80056be:	4413      	add	r3, r2
 80056c0:	1a18      	subs	r0, r3, r0
 80056c2:	b003      	add	sp, #12
 80056c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056ce:	e7ed      	b.n	80056ac <__exponent+0x4c>
 80056d0:	2330      	movs	r3, #48	; 0x30
 80056d2:	3130      	adds	r1, #48	; 0x30
 80056d4:	7083      	strb	r3, [r0, #2]
 80056d6:	70c1      	strb	r1, [r0, #3]
 80056d8:	1d03      	adds	r3, r0, #4
 80056da:	e7f1      	b.n	80056c0 <__exponent+0x60>

080056dc <_printf_float>:
 80056dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	ed2d 8b02 	vpush	{d8}
 80056e4:	b08d      	sub	sp, #52	; 0x34
 80056e6:	460c      	mov	r4, r1
 80056e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056ec:	4616      	mov	r6, r2
 80056ee:	461f      	mov	r7, r3
 80056f0:	4605      	mov	r5, r0
 80056f2:	f001 fb45 	bl	8006d80 <_localeconv_r>
 80056f6:	f8d0 a000 	ldr.w	sl, [r0]
 80056fa:	4650      	mov	r0, sl
 80056fc:	f7fa fd70 	bl	80001e0 <strlen>
 8005700:	2300      	movs	r3, #0
 8005702:	930a      	str	r3, [sp, #40]	; 0x28
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	9305      	str	r3, [sp, #20]
 8005708:	f8d8 3000 	ldr.w	r3, [r8]
 800570c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005710:	3307      	adds	r3, #7
 8005712:	f023 0307 	bic.w	r3, r3, #7
 8005716:	f103 0208 	add.w	r2, r3, #8
 800571a:	f8c8 2000 	str.w	r2, [r8]
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005726:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800572a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800572e:	9307      	str	r3, [sp, #28]
 8005730:	f8cd 8018 	str.w	r8, [sp, #24]
 8005734:	ee08 0a10 	vmov	s16, r0
 8005738:	4b9f      	ldr	r3, [pc, #636]	; (80059b8 <_printf_float+0x2dc>)
 800573a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800573e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005742:	f7fb f9fb 	bl	8000b3c <__aeabi_dcmpun>
 8005746:	bb88      	cbnz	r0, 80057ac <_printf_float+0xd0>
 8005748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574c:	4b9a      	ldr	r3, [pc, #616]	; (80059b8 <_printf_float+0x2dc>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005752:	f7fb f9d5 	bl	8000b00 <__aeabi_dcmple>
 8005756:	bb48      	cbnz	r0, 80057ac <_printf_float+0xd0>
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	4640      	mov	r0, r8
 800575e:	4649      	mov	r1, r9
 8005760:	f7fb f9c4 	bl	8000aec <__aeabi_dcmplt>
 8005764:	b110      	cbz	r0, 800576c <_printf_float+0x90>
 8005766:	232d      	movs	r3, #45	; 0x2d
 8005768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576c:	4b93      	ldr	r3, [pc, #588]	; (80059bc <_printf_float+0x2e0>)
 800576e:	4894      	ldr	r0, [pc, #592]	; (80059c0 <_printf_float+0x2e4>)
 8005770:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005774:	bf94      	ite	ls
 8005776:	4698      	movls	r8, r3
 8005778:	4680      	movhi	r8, r0
 800577a:	2303      	movs	r3, #3
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	9b05      	ldr	r3, [sp, #20]
 8005780:	f023 0204 	bic.w	r2, r3, #4
 8005784:	6022      	str	r2, [r4, #0]
 8005786:	f04f 0900 	mov.w	r9, #0
 800578a:	9700      	str	r7, [sp, #0]
 800578c:	4633      	mov	r3, r6
 800578e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005790:	4621      	mov	r1, r4
 8005792:	4628      	mov	r0, r5
 8005794:	f000 f9d8 	bl	8005b48 <_printf_common>
 8005798:	3001      	adds	r0, #1
 800579a:	f040 8090 	bne.w	80058be <_printf_float+0x1e2>
 800579e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a2:	b00d      	add	sp, #52	; 0x34
 80057a4:	ecbd 8b02 	vpop	{d8}
 80057a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f7fb f9c2 	bl	8000b3c <__aeabi_dcmpun>
 80057b8:	b140      	cbz	r0, 80057cc <_printf_float+0xf0>
 80057ba:	464b      	mov	r3, r9
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfbc      	itt	lt
 80057c0:	232d      	movlt	r3, #45	; 0x2d
 80057c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057c6:	487f      	ldr	r0, [pc, #508]	; (80059c4 <_printf_float+0x2e8>)
 80057c8:	4b7f      	ldr	r3, [pc, #508]	; (80059c8 <_printf_float+0x2ec>)
 80057ca:	e7d1      	b.n	8005770 <_printf_float+0x94>
 80057cc:	6863      	ldr	r3, [r4, #4]
 80057ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057d2:	9206      	str	r2, [sp, #24]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	d13f      	bne.n	8005858 <_printf_float+0x17c>
 80057d8:	2306      	movs	r3, #6
 80057da:	6063      	str	r3, [r4, #4]
 80057dc:	9b05      	ldr	r3, [sp, #20]
 80057de:	6861      	ldr	r1, [r4, #4]
 80057e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057e4:	2300      	movs	r3, #0
 80057e6:	9303      	str	r3, [sp, #12]
 80057e8:	ab0a      	add	r3, sp, #40	; 0x28
 80057ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057ee:	ab09      	add	r3, sp, #36	; 0x24
 80057f0:	ec49 8b10 	vmov	d0, r8, r9
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	6022      	str	r2, [r4, #0]
 80057f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057fc:	4628      	mov	r0, r5
 80057fe:	f7ff fecd 	bl	800559c <__cvt>
 8005802:	9b06      	ldr	r3, [sp, #24]
 8005804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005806:	2b47      	cmp	r3, #71	; 0x47
 8005808:	4680      	mov	r8, r0
 800580a:	d108      	bne.n	800581e <_printf_float+0x142>
 800580c:	1cc8      	adds	r0, r1, #3
 800580e:	db02      	blt.n	8005816 <_printf_float+0x13a>
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	4299      	cmp	r1, r3
 8005814:	dd41      	ble.n	800589a <_printf_float+0x1be>
 8005816:	f1ab 0b02 	sub.w	fp, fp, #2
 800581a:	fa5f fb8b 	uxtb.w	fp, fp
 800581e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005822:	d820      	bhi.n	8005866 <_printf_float+0x18a>
 8005824:	3901      	subs	r1, #1
 8005826:	465a      	mov	r2, fp
 8005828:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800582c:	9109      	str	r1, [sp, #36]	; 0x24
 800582e:	f7ff ff17 	bl	8005660 <__exponent>
 8005832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005834:	1813      	adds	r3, r2, r0
 8005836:	2a01      	cmp	r2, #1
 8005838:	4681      	mov	r9, r0
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	dc02      	bgt.n	8005844 <_printf_float+0x168>
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	07d2      	lsls	r2, r2, #31
 8005842:	d501      	bpl.n	8005848 <_printf_float+0x16c>
 8005844:	3301      	adds	r3, #1
 8005846:	6123      	str	r3, [r4, #16]
 8005848:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800584c:	2b00      	cmp	r3, #0
 800584e:	d09c      	beq.n	800578a <_printf_float+0xae>
 8005850:	232d      	movs	r3, #45	; 0x2d
 8005852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005856:	e798      	b.n	800578a <_printf_float+0xae>
 8005858:	9a06      	ldr	r2, [sp, #24]
 800585a:	2a47      	cmp	r2, #71	; 0x47
 800585c:	d1be      	bne.n	80057dc <_printf_float+0x100>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1bc      	bne.n	80057dc <_printf_float+0x100>
 8005862:	2301      	movs	r3, #1
 8005864:	e7b9      	b.n	80057da <_printf_float+0xfe>
 8005866:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800586a:	d118      	bne.n	800589e <_printf_float+0x1c2>
 800586c:	2900      	cmp	r1, #0
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	dd0b      	ble.n	800588a <_printf_float+0x1ae>
 8005872:	6121      	str	r1, [r4, #16]
 8005874:	b913      	cbnz	r3, 800587c <_printf_float+0x1a0>
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	07d0      	lsls	r0, r2, #31
 800587a:	d502      	bpl.n	8005882 <_printf_float+0x1a6>
 800587c:	3301      	adds	r3, #1
 800587e:	440b      	add	r3, r1
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	65a1      	str	r1, [r4, #88]	; 0x58
 8005884:	f04f 0900 	mov.w	r9, #0
 8005888:	e7de      	b.n	8005848 <_printf_float+0x16c>
 800588a:	b913      	cbnz	r3, 8005892 <_printf_float+0x1b6>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	07d2      	lsls	r2, r2, #31
 8005890:	d501      	bpl.n	8005896 <_printf_float+0x1ba>
 8005892:	3302      	adds	r3, #2
 8005894:	e7f4      	b.n	8005880 <_printf_float+0x1a4>
 8005896:	2301      	movs	r3, #1
 8005898:	e7f2      	b.n	8005880 <_printf_float+0x1a4>
 800589a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800589e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a0:	4299      	cmp	r1, r3
 80058a2:	db05      	blt.n	80058b0 <_printf_float+0x1d4>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	6121      	str	r1, [r4, #16]
 80058a8:	07d8      	lsls	r0, r3, #31
 80058aa:	d5ea      	bpl.n	8005882 <_printf_float+0x1a6>
 80058ac:	1c4b      	adds	r3, r1, #1
 80058ae:	e7e7      	b.n	8005880 <_printf_float+0x1a4>
 80058b0:	2900      	cmp	r1, #0
 80058b2:	bfd4      	ite	le
 80058b4:	f1c1 0202 	rsble	r2, r1, #2
 80058b8:	2201      	movgt	r2, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	e7e0      	b.n	8005880 <_printf_float+0x1a4>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	055a      	lsls	r2, r3, #21
 80058c2:	d407      	bmi.n	80058d4 <_printf_float+0x1f8>
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	4642      	mov	r2, r8
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	d12c      	bne.n	800592c <_printf_float+0x250>
 80058d2:	e764      	b.n	800579e <_printf_float+0xc2>
 80058d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058d8:	f240 80e0 	bls.w	8005a9c <_printf_float+0x3c0>
 80058dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058e0:	2200      	movs	r2, #0
 80058e2:	2300      	movs	r3, #0
 80058e4:	f7fb f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d034      	beq.n	8005956 <_printf_float+0x27a>
 80058ec:	4a37      	ldr	r2, [pc, #220]	; (80059cc <_printf_float+0x2f0>)
 80058ee:	2301      	movs	r3, #1
 80058f0:	4631      	mov	r1, r6
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	f43f af51 	beq.w	800579e <_printf_float+0xc2>
 80058fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005900:	429a      	cmp	r2, r3
 8005902:	db02      	blt.n	800590a <_printf_float+0x22e>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	07d8      	lsls	r0, r3, #31
 8005908:	d510      	bpl.n	800592c <_printf_float+0x250>
 800590a:	ee18 3a10 	vmov	r3, s16
 800590e:	4652      	mov	r2, sl
 8005910:	4631      	mov	r1, r6
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	f43f af41 	beq.w	800579e <_printf_float+0xc2>
 800591c:	f04f 0800 	mov.w	r8, #0
 8005920:	f104 091a 	add.w	r9, r4, #26
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	4543      	cmp	r3, r8
 800592a:	dc09      	bgt.n	8005940 <_printf_float+0x264>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	079b      	lsls	r3, r3, #30
 8005930:	f100 8105 	bmi.w	8005b3e <_printf_float+0x462>
 8005934:	68e0      	ldr	r0, [r4, #12]
 8005936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005938:	4298      	cmp	r0, r3
 800593a:	bfb8      	it	lt
 800593c:	4618      	movlt	r0, r3
 800593e:	e730      	b.n	80057a2 <_printf_float+0xc6>
 8005940:	2301      	movs	r3, #1
 8005942:	464a      	mov	r2, r9
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	f43f af27 	beq.w	800579e <_printf_float+0xc2>
 8005950:	f108 0801 	add.w	r8, r8, #1
 8005954:	e7e6      	b.n	8005924 <_printf_float+0x248>
 8005956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	dc39      	bgt.n	80059d0 <_printf_float+0x2f4>
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <_printf_float+0x2f0>)
 800595e:	2301      	movs	r3, #1
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f af19 	beq.w	800579e <_printf_float+0xc2>
 800596c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005970:	4313      	orrs	r3, r2
 8005972:	d102      	bne.n	800597a <_printf_float+0x29e>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	07d9      	lsls	r1, r3, #31
 8005978:	d5d8      	bpl.n	800592c <_printf_float+0x250>
 800597a:	ee18 3a10 	vmov	r3, s16
 800597e:	4652      	mov	r2, sl
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f af09 	beq.w	800579e <_printf_float+0xc2>
 800598c:	f04f 0900 	mov.w	r9, #0
 8005990:	f104 0a1a 	add.w	sl, r4, #26
 8005994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005996:	425b      	negs	r3, r3
 8005998:	454b      	cmp	r3, r9
 800599a:	dc01      	bgt.n	80059a0 <_printf_float+0x2c4>
 800599c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599e:	e792      	b.n	80058c6 <_printf_float+0x1ea>
 80059a0:	2301      	movs	r3, #1
 80059a2:	4652      	mov	r2, sl
 80059a4:	4631      	mov	r1, r6
 80059a6:	4628      	mov	r0, r5
 80059a8:	47b8      	blx	r7
 80059aa:	3001      	adds	r0, #1
 80059ac:	f43f aef7 	beq.w	800579e <_printf_float+0xc2>
 80059b0:	f109 0901 	add.w	r9, r9, #1
 80059b4:	e7ee      	b.n	8005994 <_printf_float+0x2b8>
 80059b6:	bf00      	nop
 80059b8:	7fefffff 	.word	0x7fefffff
 80059bc:	0800808c 	.word	0x0800808c
 80059c0:	08008090 	.word	0x08008090
 80059c4:	08008098 	.word	0x08008098
 80059c8:	08008094 	.word	0x08008094
 80059cc:	0800809c 	.word	0x0800809c
 80059d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059d4:	429a      	cmp	r2, r3
 80059d6:	bfa8      	it	ge
 80059d8:	461a      	movge	r2, r3
 80059da:	2a00      	cmp	r2, #0
 80059dc:	4691      	mov	r9, r2
 80059de:	dc37      	bgt.n	8005a50 <_printf_float+0x374>
 80059e0:	f04f 0b00 	mov.w	fp, #0
 80059e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059e8:	f104 021a 	add.w	r2, r4, #26
 80059ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059ee:	9305      	str	r3, [sp, #20]
 80059f0:	eba3 0309 	sub.w	r3, r3, r9
 80059f4:	455b      	cmp	r3, fp
 80059f6:	dc33      	bgt.n	8005a60 <_printf_float+0x384>
 80059f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059fc:	429a      	cmp	r2, r3
 80059fe:	db3b      	blt.n	8005a78 <_printf_float+0x39c>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	07da      	lsls	r2, r3, #31
 8005a04:	d438      	bmi.n	8005a78 <_printf_float+0x39c>
 8005a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a08:	9a05      	ldr	r2, [sp, #20]
 8005a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a0c:	1a9a      	subs	r2, r3, r2
 8005a0e:	eba3 0901 	sub.w	r9, r3, r1
 8005a12:	4591      	cmp	r9, r2
 8005a14:	bfa8      	it	ge
 8005a16:	4691      	movge	r9, r2
 8005a18:	f1b9 0f00 	cmp.w	r9, #0
 8005a1c:	dc35      	bgt.n	8005a8a <_printf_float+0x3ae>
 8005a1e:	f04f 0800 	mov.w	r8, #0
 8005a22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a26:	f104 0a1a 	add.w	sl, r4, #26
 8005a2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	eba3 0309 	sub.w	r3, r3, r9
 8005a34:	4543      	cmp	r3, r8
 8005a36:	f77f af79 	ble.w	800592c <_printf_float+0x250>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4652      	mov	r2, sl
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f aeaa 	beq.w	800579e <_printf_float+0xc2>
 8005a4a:	f108 0801 	add.w	r8, r8, #1
 8005a4e:	e7ec      	b.n	8005a2a <_printf_float+0x34e>
 8005a50:	4613      	mov	r3, r2
 8005a52:	4631      	mov	r1, r6
 8005a54:	4642      	mov	r2, r8
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d1c0      	bne.n	80059e0 <_printf_float+0x304>
 8005a5e:	e69e      	b.n	800579e <_printf_float+0xc2>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4631      	mov	r1, r6
 8005a64:	4628      	mov	r0, r5
 8005a66:	9205      	str	r2, [sp, #20]
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f ae97 	beq.w	800579e <_printf_float+0xc2>
 8005a70:	9a05      	ldr	r2, [sp, #20]
 8005a72:	f10b 0b01 	add.w	fp, fp, #1
 8005a76:	e7b9      	b.n	80059ec <_printf_float+0x310>
 8005a78:	ee18 3a10 	vmov	r3, s16
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	d1be      	bne.n	8005a06 <_printf_float+0x32a>
 8005a88:	e689      	b.n	800579e <_printf_float+0xc2>
 8005a8a:	9a05      	ldr	r2, [sp, #20]
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	4442      	add	r2, r8
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	d1c1      	bne.n	8005a1e <_printf_float+0x342>
 8005a9a:	e680      	b.n	800579e <_printf_float+0xc2>
 8005a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a9e:	2a01      	cmp	r2, #1
 8005aa0:	dc01      	bgt.n	8005aa6 <_printf_float+0x3ca>
 8005aa2:	07db      	lsls	r3, r3, #31
 8005aa4:	d538      	bpl.n	8005b18 <_printf_float+0x43c>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f ae74 	beq.w	800579e <_printf_float+0xc2>
 8005ab6:	ee18 3a10 	vmov	r3, s16
 8005aba:	4652      	mov	r2, sl
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f ae6b 	beq.w	800579e <_printf_float+0xc2>
 8005ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005acc:	2200      	movs	r2, #0
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f7fb f802 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ad4:	b9d8      	cbnz	r0, 8005b0e <_printf_float+0x432>
 8005ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad8:	f108 0201 	add.w	r2, r8, #1
 8005adc:	3b01      	subs	r3, #1
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d10e      	bne.n	8005b06 <_printf_float+0x42a>
 8005ae8:	e659      	b.n	800579e <_printf_float+0xc2>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4652      	mov	r2, sl
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f ae52 	beq.w	800579e <_printf_float+0xc2>
 8005afa:	f108 0801 	add.w	r8, r8, #1
 8005afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b00:	3b01      	subs	r3, #1
 8005b02:	4543      	cmp	r3, r8
 8005b04:	dcf1      	bgt.n	8005aea <_printf_float+0x40e>
 8005b06:	464b      	mov	r3, r9
 8005b08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b0c:	e6dc      	b.n	80058c8 <_printf_float+0x1ec>
 8005b0e:	f04f 0800 	mov.w	r8, #0
 8005b12:	f104 0a1a 	add.w	sl, r4, #26
 8005b16:	e7f2      	b.n	8005afe <_printf_float+0x422>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	e7df      	b.n	8005ade <_printf_float+0x402>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	464a      	mov	r2, r9
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f ae38 	beq.w	800579e <_printf_float+0xc2>
 8005b2e:	f108 0801 	add.w	r8, r8, #1
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	4543      	cmp	r3, r8
 8005b3a:	dcf0      	bgt.n	8005b1e <_printf_float+0x442>
 8005b3c:	e6fa      	b.n	8005934 <_printf_float+0x258>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	f104 0919 	add.w	r9, r4, #25
 8005b46:	e7f4      	b.n	8005b32 <_printf_float+0x456>

08005b48 <_printf_common>:
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	4699      	mov	r9, r3
 8005b50:	688a      	ldr	r2, [r1, #8]
 8005b52:	690b      	ldr	r3, [r1, #16]
 8005b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	bfb8      	it	lt
 8005b5c:	4613      	movlt	r3, r2
 8005b5e:	6033      	str	r3, [r6, #0]
 8005b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b64:	4607      	mov	r7, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	b10a      	cbz	r2, 8005b6e <_printf_common+0x26>
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	0699      	lsls	r1, r3, #26
 8005b72:	bf42      	ittt	mi
 8005b74:	6833      	ldrmi	r3, [r6, #0]
 8005b76:	3302      	addmi	r3, #2
 8005b78:	6033      	strmi	r3, [r6, #0]
 8005b7a:	6825      	ldr	r5, [r4, #0]
 8005b7c:	f015 0506 	ands.w	r5, r5, #6
 8005b80:	d106      	bne.n	8005b90 <_printf_common+0x48>
 8005b82:	f104 0a19 	add.w	sl, r4, #25
 8005b86:	68e3      	ldr	r3, [r4, #12]
 8005b88:	6832      	ldr	r2, [r6, #0]
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	42ab      	cmp	r3, r5
 8005b8e:	dc26      	bgt.n	8005bde <_printf_common+0x96>
 8005b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b94:	1e13      	subs	r3, r2, #0
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	bf18      	it	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	0692      	lsls	r2, r2, #26
 8005b9e:	d42b      	bmi.n	8005bf8 <_printf_common+0xb0>
 8005ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	47c0      	blx	r8
 8005baa:	3001      	adds	r0, #1
 8005bac:	d01e      	beq.n	8005bec <_printf_common+0xa4>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	68e5      	ldr	r5, [r4, #12]
 8005bb2:	6832      	ldr	r2, [r6, #0]
 8005bb4:	f003 0306 	and.w	r3, r3, #6
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	bf08      	it	eq
 8005bbc:	1aad      	subeq	r5, r5, r2
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	6922      	ldr	r2, [r4, #16]
 8005bc2:	bf0c      	ite	eq
 8005bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bc8:	2500      	movne	r5, #0
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	bfc4      	itt	gt
 8005bce:	1a9b      	subgt	r3, r3, r2
 8005bd0:	18ed      	addgt	r5, r5, r3
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	341a      	adds	r4, #26
 8005bd6:	42b5      	cmp	r5, r6
 8005bd8:	d11a      	bne.n	8005c10 <_printf_common+0xc8>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e008      	b.n	8005bf0 <_printf_common+0xa8>
 8005bde:	2301      	movs	r3, #1
 8005be0:	4652      	mov	r2, sl
 8005be2:	4649      	mov	r1, r9
 8005be4:	4638      	mov	r0, r7
 8005be6:	47c0      	blx	r8
 8005be8:	3001      	adds	r0, #1
 8005bea:	d103      	bne.n	8005bf4 <_printf_common+0xac>
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	e7c6      	b.n	8005b86 <_printf_common+0x3e>
 8005bf8:	18e1      	adds	r1, r4, r3
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	2030      	movs	r0, #48	; 0x30
 8005bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c02:	4422      	add	r2, r4
 8005c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	e7c7      	b.n	8005ba0 <_printf_common+0x58>
 8005c10:	2301      	movs	r3, #1
 8005c12:	4622      	mov	r2, r4
 8005c14:	4649      	mov	r1, r9
 8005c16:	4638      	mov	r0, r7
 8005c18:	47c0      	blx	r8
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d0e6      	beq.n	8005bec <_printf_common+0xa4>
 8005c1e:	3601      	adds	r6, #1
 8005c20:	e7d9      	b.n	8005bd6 <_printf_common+0x8e>
	...

08005c24 <_printf_i>:
 8005c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	7e0f      	ldrb	r7, [r1, #24]
 8005c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c2c:	2f78      	cmp	r7, #120	; 0x78
 8005c2e:	4691      	mov	r9, r2
 8005c30:	4680      	mov	r8, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	469a      	mov	sl, r3
 8005c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c3a:	d807      	bhi.n	8005c4c <_printf_i+0x28>
 8005c3c:	2f62      	cmp	r7, #98	; 0x62
 8005c3e:	d80a      	bhi.n	8005c56 <_printf_i+0x32>
 8005c40:	2f00      	cmp	r7, #0
 8005c42:	f000 80d8 	beq.w	8005df6 <_printf_i+0x1d2>
 8005c46:	2f58      	cmp	r7, #88	; 0x58
 8005c48:	f000 80a3 	beq.w	8005d92 <_printf_i+0x16e>
 8005c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c54:	e03a      	b.n	8005ccc <_printf_i+0xa8>
 8005c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c5a:	2b15      	cmp	r3, #21
 8005c5c:	d8f6      	bhi.n	8005c4c <_printf_i+0x28>
 8005c5e:	a101      	add	r1, pc, #4	; (adr r1, 8005c64 <_printf_i+0x40>)
 8005c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c64:	08005cbd 	.word	0x08005cbd
 8005c68:	08005cd1 	.word	0x08005cd1
 8005c6c:	08005c4d 	.word	0x08005c4d
 8005c70:	08005c4d 	.word	0x08005c4d
 8005c74:	08005c4d 	.word	0x08005c4d
 8005c78:	08005c4d 	.word	0x08005c4d
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005c4d 	.word	0x08005c4d
 8005c84:	08005c4d 	.word	0x08005c4d
 8005c88:	08005c4d 	.word	0x08005c4d
 8005c8c:	08005c4d 	.word	0x08005c4d
 8005c90:	08005ddd 	.word	0x08005ddd
 8005c94:	08005d01 	.word	0x08005d01
 8005c98:	08005dbf 	.word	0x08005dbf
 8005c9c:	08005c4d 	.word	0x08005c4d
 8005ca0:	08005c4d 	.word	0x08005c4d
 8005ca4:	08005dff 	.word	0x08005dff
 8005ca8:	08005c4d 	.word	0x08005c4d
 8005cac:	08005d01 	.word	0x08005d01
 8005cb0:	08005c4d 	.word	0x08005c4d
 8005cb4:	08005c4d 	.word	0x08005c4d
 8005cb8:	08005dc7 	.word	0x08005dc7
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	1d1a      	adds	r2, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	602a      	str	r2, [r5, #0]
 8005cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0a3      	b.n	8005e18 <_printf_i+0x1f4>
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	6829      	ldr	r1, [r5, #0]
 8005cd4:	0606      	lsls	r6, r0, #24
 8005cd6:	f101 0304 	add.w	r3, r1, #4
 8005cda:	d50a      	bpl.n	8005cf2 <_printf_i+0xce>
 8005cdc:	680e      	ldr	r6, [r1, #0]
 8005cde:	602b      	str	r3, [r5, #0]
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	da03      	bge.n	8005cec <_printf_i+0xc8>
 8005ce4:	232d      	movs	r3, #45	; 0x2d
 8005ce6:	4276      	negs	r6, r6
 8005ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cec:	485e      	ldr	r0, [pc, #376]	; (8005e68 <_printf_i+0x244>)
 8005cee:	230a      	movs	r3, #10
 8005cf0:	e019      	b.n	8005d26 <_printf_i+0x102>
 8005cf2:	680e      	ldr	r6, [r1, #0]
 8005cf4:	602b      	str	r3, [r5, #0]
 8005cf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cfa:	bf18      	it	ne
 8005cfc:	b236      	sxthne	r6, r6
 8005cfe:	e7ef      	b.n	8005ce0 <_printf_i+0xbc>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	1d19      	adds	r1, r3, #4
 8005d06:	6029      	str	r1, [r5, #0]
 8005d08:	0601      	lsls	r1, r0, #24
 8005d0a:	d501      	bpl.n	8005d10 <_printf_i+0xec>
 8005d0c:	681e      	ldr	r6, [r3, #0]
 8005d0e:	e002      	b.n	8005d16 <_printf_i+0xf2>
 8005d10:	0646      	lsls	r6, r0, #25
 8005d12:	d5fb      	bpl.n	8005d0c <_printf_i+0xe8>
 8005d14:	881e      	ldrh	r6, [r3, #0]
 8005d16:	4854      	ldr	r0, [pc, #336]	; (8005e68 <_printf_i+0x244>)
 8005d18:	2f6f      	cmp	r7, #111	; 0x6f
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2308      	moveq	r3, #8
 8005d1e:	230a      	movne	r3, #10
 8005d20:	2100      	movs	r1, #0
 8005d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d26:	6865      	ldr	r5, [r4, #4]
 8005d28:	60a5      	str	r5, [r4, #8]
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	bfa2      	ittt	ge
 8005d2e:	6821      	ldrge	r1, [r4, #0]
 8005d30:	f021 0104 	bicge.w	r1, r1, #4
 8005d34:	6021      	strge	r1, [r4, #0]
 8005d36:	b90e      	cbnz	r6, 8005d3c <_printf_i+0x118>
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	d04d      	beq.n	8005dd8 <_printf_i+0x1b4>
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d42:	fb03 6711 	mls	r7, r3, r1, r6
 8005d46:	5dc7      	ldrb	r7, [r0, r7]
 8005d48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d4c:	4637      	mov	r7, r6
 8005d4e:	42bb      	cmp	r3, r7
 8005d50:	460e      	mov	r6, r1
 8005d52:	d9f4      	bls.n	8005d3e <_printf_i+0x11a>
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d10b      	bne.n	8005d70 <_printf_i+0x14c>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	07de      	lsls	r6, r3, #31
 8005d5c:	d508      	bpl.n	8005d70 <_printf_i+0x14c>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	6861      	ldr	r1, [r4, #4]
 8005d62:	4299      	cmp	r1, r3
 8005d64:	bfde      	ittt	le
 8005d66:	2330      	movle	r3, #48	; 0x30
 8005d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d70:	1b52      	subs	r2, r2, r5
 8005d72:	6122      	str	r2, [r4, #16]
 8005d74:	f8cd a000 	str.w	sl, [sp]
 8005d78:	464b      	mov	r3, r9
 8005d7a:	aa03      	add	r2, sp, #12
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f7ff fee2 	bl	8005b48 <_printf_common>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d14c      	bne.n	8005e22 <_printf_i+0x1fe>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d8c:	b004      	add	sp, #16
 8005d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d92:	4835      	ldr	r0, [pc, #212]	; (8005e68 <_printf_i+0x244>)
 8005d94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d98:	6829      	ldr	r1, [r5, #0]
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005da0:	6029      	str	r1, [r5, #0]
 8005da2:	061d      	lsls	r5, r3, #24
 8005da4:	d514      	bpl.n	8005dd0 <_printf_i+0x1ac>
 8005da6:	07df      	lsls	r7, r3, #31
 8005da8:	bf44      	itt	mi
 8005daa:	f043 0320 	orrmi.w	r3, r3, #32
 8005dae:	6023      	strmi	r3, [r4, #0]
 8005db0:	b91e      	cbnz	r6, 8005dba <_printf_i+0x196>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	f023 0320 	bic.w	r3, r3, #32
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	2310      	movs	r3, #16
 8005dbc:	e7b0      	b.n	8005d20 <_printf_i+0xfc>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f043 0320 	orr.w	r3, r3, #32
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	2378      	movs	r3, #120	; 0x78
 8005dc8:	4828      	ldr	r0, [pc, #160]	; (8005e6c <_printf_i+0x248>)
 8005dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dce:	e7e3      	b.n	8005d98 <_printf_i+0x174>
 8005dd0:	0659      	lsls	r1, r3, #25
 8005dd2:	bf48      	it	mi
 8005dd4:	b2b6      	uxthmi	r6, r6
 8005dd6:	e7e6      	b.n	8005da6 <_printf_i+0x182>
 8005dd8:	4615      	mov	r5, r2
 8005dda:	e7bb      	b.n	8005d54 <_printf_i+0x130>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	6826      	ldr	r6, [r4, #0]
 8005de0:	6961      	ldr	r1, [r4, #20]
 8005de2:	1d18      	adds	r0, r3, #4
 8005de4:	6028      	str	r0, [r5, #0]
 8005de6:	0635      	lsls	r5, r6, #24
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	d501      	bpl.n	8005df0 <_printf_i+0x1cc>
 8005dec:	6019      	str	r1, [r3, #0]
 8005dee:	e002      	b.n	8005df6 <_printf_i+0x1d2>
 8005df0:	0670      	lsls	r0, r6, #25
 8005df2:	d5fb      	bpl.n	8005dec <_printf_i+0x1c8>
 8005df4:	8019      	strh	r1, [r3, #0]
 8005df6:	2300      	movs	r3, #0
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	4615      	mov	r5, r2
 8005dfc:	e7ba      	b.n	8005d74 <_printf_i+0x150>
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	1d1a      	adds	r2, r3, #4
 8005e02:	602a      	str	r2, [r5, #0]
 8005e04:	681d      	ldr	r5, [r3, #0]
 8005e06:	6862      	ldr	r2, [r4, #4]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7fa f9f0 	bl	80001f0 <memchr>
 8005e10:	b108      	cbz	r0, 8005e16 <_printf_i+0x1f2>
 8005e12:	1b40      	subs	r0, r0, r5
 8005e14:	6060      	str	r0, [r4, #4]
 8005e16:	6863      	ldr	r3, [r4, #4]
 8005e18:	6123      	str	r3, [r4, #16]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e20:	e7a8      	b.n	8005d74 <_printf_i+0x150>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	462a      	mov	r2, r5
 8005e26:	4649      	mov	r1, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	47d0      	blx	sl
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d0ab      	beq.n	8005d88 <_printf_i+0x164>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	079b      	lsls	r3, r3, #30
 8005e34:	d413      	bmi.n	8005e5e <_printf_i+0x23a>
 8005e36:	68e0      	ldr	r0, [r4, #12]
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	4298      	cmp	r0, r3
 8005e3c:	bfb8      	it	lt
 8005e3e:	4618      	movlt	r0, r3
 8005e40:	e7a4      	b.n	8005d8c <_printf_i+0x168>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4632      	mov	r2, r6
 8005e46:	4649      	mov	r1, r9
 8005e48:	4640      	mov	r0, r8
 8005e4a:	47d0      	blx	sl
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d09b      	beq.n	8005d88 <_printf_i+0x164>
 8005e50:	3501      	adds	r5, #1
 8005e52:	68e3      	ldr	r3, [r4, #12]
 8005e54:	9903      	ldr	r1, [sp, #12]
 8005e56:	1a5b      	subs	r3, r3, r1
 8005e58:	42ab      	cmp	r3, r5
 8005e5a:	dcf2      	bgt.n	8005e42 <_printf_i+0x21e>
 8005e5c:	e7eb      	b.n	8005e36 <_printf_i+0x212>
 8005e5e:	2500      	movs	r5, #0
 8005e60:	f104 0619 	add.w	r6, r4, #25
 8005e64:	e7f5      	b.n	8005e52 <_printf_i+0x22e>
 8005e66:	bf00      	nop
 8005e68:	0800809e 	.word	0x0800809e
 8005e6c:	080080af 	.word	0x080080af

08005e70 <iprintf>:
 8005e70:	b40f      	push	{r0, r1, r2, r3}
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <iprintf+0x2c>)
 8005e74:	b513      	push	{r0, r1, r4, lr}
 8005e76:	681c      	ldr	r4, [r3, #0]
 8005e78:	b124      	cbz	r4, 8005e84 <iprintf+0x14>
 8005e7a:	69a3      	ldr	r3, [r4, #24]
 8005e7c:	b913      	cbnz	r3, 8005e84 <iprintf+0x14>
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 fee0 	bl	8006c44 <__sinit>
 8005e84:	ab05      	add	r3, sp, #20
 8005e86:	9a04      	ldr	r2, [sp, #16]
 8005e88:	68a1      	ldr	r1, [r4, #8]
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f001 fc39 	bl	8007704 <_vfiprintf_r>
 8005e92:	b002      	add	sp, #8
 8005e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e98:	b004      	add	sp, #16
 8005e9a:	4770      	bx	lr
 8005e9c:	2000000c 	.word	0x2000000c

08005ea0 <quorem>:
 8005ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	6903      	ldr	r3, [r0, #16]
 8005ea6:	690c      	ldr	r4, [r1, #16]
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	4607      	mov	r7, r0
 8005eac:	f2c0 8081 	blt.w	8005fb2 <quorem+0x112>
 8005eb0:	3c01      	subs	r4, #1
 8005eb2:	f101 0814 	add.w	r8, r1, #20
 8005eb6:	f100 0514 	add.w	r5, r0, #20
 8005eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ed0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ed4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ed8:	d331      	bcc.n	8005f3e <quorem+0x9e>
 8005eda:	f04f 0e00 	mov.w	lr, #0
 8005ede:	4640      	mov	r0, r8
 8005ee0:	46ac      	mov	ip, r5
 8005ee2:	46f2      	mov	sl, lr
 8005ee4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ee8:	b293      	uxth	r3, r2
 8005eea:	fb06 e303 	mla	r3, r6, r3, lr
 8005eee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ef8:	f8dc a000 	ldr.w	sl, [ip]
 8005efc:	0c12      	lsrs	r2, r2, #16
 8005efe:	fa13 f38a 	uxtah	r3, r3, sl
 8005f02:	fb06 e202 	mla	r2, r6, r2, lr
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	9b00      	ldr	r3, [sp, #0]
 8005f0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f0e:	b292      	uxth	r2, r2
 8005f10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f18:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f1c:	4581      	cmp	r9, r0
 8005f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f22:	f84c 3b04 	str.w	r3, [ip], #4
 8005f26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f2a:	d2db      	bcs.n	8005ee4 <quorem+0x44>
 8005f2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f30:	b92b      	cbnz	r3, 8005f3e <quorem+0x9e>
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	3b04      	subs	r3, #4
 8005f36:	429d      	cmp	r5, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	d32e      	bcc.n	8005f9a <quorem+0xfa>
 8005f3c:	613c      	str	r4, [r7, #16]
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f001 f9be 	bl	80072c0 <__mcmp>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	db24      	blt.n	8005f92 <quorem+0xf2>
 8005f48:	3601      	adds	r6, #1
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f04f 0c00 	mov.w	ip, #0
 8005f50:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f54:	f8d0 e000 	ldr.w	lr, [r0]
 8005f58:	b293      	uxth	r3, r2
 8005f5a:	ebac 0303 	sub.w	r3, ip, r3
 8005f5e:	0c12      	lsrs	r2, r2, #16
 8005f60:	fa13 f38e 	uxtah	r3, r3, lr
 8005f64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f72:	45c1      	cmp	r9, r8
 8005f74:	f840 3b04 	str.w	r3, [r0], #4
 8005f78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f7c:	d2e8      	bcs.n	8005f50 <quorem+0xb0>
 8005f7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f86:	b922      	cbnz	r2, 8005f92 <quorem+0xf2>
 8005f88:	3b04      	subs	r3, #4
 8005f8a:	429d      	cmp	r5, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	d30a      	bcc.n	8005fa6 <quorem+0x106>
 8005f90:	613c      	str	r4, [r7, #16]
 8005f92:	4630      	mov	r0, r6
 8005f94:	b003      	add	sp, #12
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d1cc      	bne.n	8005f3c <quorem+0x9c>
 8005fa2:	3c01      	subs	r4, #1
 8005fa4:	e7c7      	b.n	8005f36 <quorem+0x96>
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	d1f0      	bne.n	8005f90 <quorem+0xf0>
 8005fae:	3c01      	subs	r4, #1
 8005fb0:	e7eb      	b.n	8005f8a <quorem+0xea>
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	e7ee      	b.n	8005f94 <quorem+0xf4>
	...

08005fb8 <_dtoa_r>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	ed2d 8b04 	vpush	{d8-d9}
 8005fc0:	ec57 6b10 	vmov	r6, r7, d0
 8005fc4:	b093      	sub	sp, #76	; 0x4c
 8005fc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fcc:	9106      	str	r1, [sp, #24]
 8005fce:	ee10 aa10 	vmov	sl, s0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd8:	46bb      	mov	fp, r7
 8005fda:	b975      	cbnz	r5, 8005ffa <_dtoa_r+0x42>
 8005fdc:	2010      	movs	r0, #16
 8005fde:	f000 fed7 	bl	8006d90 <malloc>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6260      	str	r0, [r4, #36]	; 0x24
 8005fe6:	b920      	cbnz	r0, 8005ff2 <_dtoa_r+0x3a>
 8005fe8:	4ba7      	ldr	r3, [pc, #668]	; (8006288 <_dtoa_r+0x2d0>)
 8005fea:	21ea      	movs	r1, #234	; 0xea
 8005fec:	48a7      	ldr	r0, [pc, #668]	; (800628c <_dtoa_r+0x2d4>)
 8005fee:	f001 fddf 	bl	8007bb0 <__assert_func>
 8005ff2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ff6:	6005      	str	r5, [r0, #0]
 8005ff8:	60c5      	str	r5, [r0, #12]
 8005ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ffc:	6819      	ldr	r1, [r3, #0]
 8005ffe:	b151      	cbz	r1, 8006016 <_dtoa_r+0x5e>
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	604a      	str	r2, [r1, #4]
 8006004:	2301      	movs	r3, #1
 8006006:	4093      	lsls	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
 800600a:	4620      	mov	r0, r4
 800600c:	f000 ff16 	bl	8006e3c <_Bfree>
 8006010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	1e3b      	subs	r3, r7, #0
 8006018:	bfaa      	itet	ge
 800601a:	2300      	movge	r3, #0
 800601c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006020:	f8c8 3000 	strge.w	r3, [r8]
 8006024:	4b9a      	ldr	r3, [pc, #616]	; (8006290 <_dtoa_r+0x2d8>)
 8006026:	bfbc      	itt	lt
 8006028:	2201      	movlt	r2, #1
 800602a:	f8c8 2000 	strlt.w	r2, [r8]
 800602e:	ea33 030b 	bics.w	r3, r3, fp
 8006032:	d11b      	bne.n	800606c <_dtoa_r+0xb4>
 8006034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006036:	f242 730f 	movw	r3, #9999	; 0x270f
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006040:	4333      	orrs	r3, r6
 8006042:	f000 8592 	beq.w	8006b6a <_dtoa_r+0xbb2>
 8006046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006048:	b963      	cbnz	r3, 8006064 <_dtoa_r+0xac>
 800604a:	4b92      	ldr	r3, [pc, #584]	; (8006294 <_dtoa_r+0x2dc>)
 800604c:	e022      	b.n	8006094 <_dtoa_r+0xdc>
 800604e:	4b92      	ldr	r3, [pc, #584]	; (8006298 <_dtoa_r+0x2e0>)
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	3308      	adds	r3, #8
 8006054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	9801      	ldr	r0, [sp, #4]
 800605a:	b013      	add	sp, #76	; 0x4c
 800605c:	ecbd 8b04 	vpop	{d8-d9}
 8006060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006064:	4b8b      	ldr	r3, [pc, #556]	; (8006294 <_dtoa_r+0x2dc>)
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	3303      	adds	r3, #3
 800606a:	e7f3      	b.n	8006054 <_dtoa_r+0x9c>
 800606c:	2200      	movs	r2, #0
 800606e:	2300      	movs	r3, #0
 8006070:	4650      	mov	r0, sl
 8006072:	4659      	mov	r1, fp
 8006074:	f7fa fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 8006078:	ec4b ab19 	vmov	d9, sl, fp
 800607c:	4680      	mov	r8, r0
 800607e:	b158      	cbz	r0, 8006098 <_dtoa_r+0xe0>
 8006080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006082:	2301      	movs	r3, #1
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 856b 	beq.w	8006b64 <_dtoa_r+0xbac>
 800608e:	4883      	ldr	r0, [pc, #524]	; (800629c <_dtoa_r+0x2e4>)
 8006090:	6018      	str	r0, [r3, #0]
 8006092:	1e43      	subs	r3, r0, #1
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	e7df      	b.n	8006058 <_dtoa_r+0xa0>
 8006098:	ec4b ab10 	vmov	d0, sl, fp
 800609c:	aa10      	add	r2, sp, #64	; 0x40
 800609e:	a911      	add	r1, sp, #68	; 0x44
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 f9b3 	bl	800740c <__d2b>
 80060a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80060aa:	ee08 0a10 	vmov	s16, r0
 80060ae:	2d00      	cmp	r5, #0
 80060b0:	f000 8084 	beq.w	80061bc <_dtoa_r+0x204>
 80060b4:	ee19 3a90 	vmov	r3, s19
 80060b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80060c0:	4656      	mov	r6, sl
 80060c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80060c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80060ce:	4b74      	ldr	r3, [pc, #464]	; (80062a0 <_dtoa_r+0x2e8>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	4630      	mov	r0, r6
 80060d4:	4639      	mov	r1, r7
 80060d6:	f7fa f8df 	bl	8000298 <__aeabi_dsub>
 80060da:	a365      	add	r3, pc, #404	; (adr r3, 8006270 <_dtoa_r+0x2b8>)
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f7fa fa92 	bl	8000608 <__aeabi_dmul>
 80060e4:	a364      	add	r3, pc, #400	; (adr r3, 8006278 <_dtoa_r+0x2c0>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f7fa f8d7 	bl	800029c <__adddf3>
 80060ee:	4606      	mov	r6, r0
 80060f0:	4628      	mov	r0, r5
 80060f2:	460f      	mov	r7, r1
 80060f4:	f7fa fa1e 	bl	8000534 <__aeabi_i2d>
 80060f8:	a361      	add	r3, pc, #388	; (adr r3, 8006280 <_dtoa_r+0x2c8>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa fa83 	bl	8000608 <__aeabi_dmul>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4630      	mov	r0, r6
 8006108:	4639      	mov	r1, r7
 800610a:	f7fa f8c7 	bl	800029c <__adddf3>
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	f7fa fd29 	bl	8000b68 <__aeabi_d2iz>
 8006116:	2200      	movs	r2, #0
 8006118:	9000      	str	r0, [sp, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa fce4 	bl	8000aec <__aeabi_dcmplt>
 8006124:	b150      	cbz	r0, 800613c <_dtoa_r+0x184>
 8006126:	9800      	ldr	r0, [sp, #0]
 8006128:	f7fa fa04 	bl	8000534 <__aeabi_i2d>
 800612c:	4632      	mov	r2, r6
 800612e:	463b      	mov	r3, r7
 8006130:	f7fa fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006134:	b910      	cbnz	r0, 800613c <_dtoa_r+0x184>
 8006136:	9b00      	ldr	r3, [sp, #0]
 8006138:	3b01      	subs	r3, #1
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	2b16      	cmp	r3, #22
 8006140:	d85a      	bhi.n	80061f8 <_dtoa_r+0x240>
 8006142:	9a00      	ldr	r2, [sp, #0]
 8006144:	4b57      	ldr	r3, [pc, #348]	; (80062a4 <_dtoa_r+0x2ec>)
 8006146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	ec51 0b19 	vmov	r0, r1, d9
 8006152:	f7fa fccb 	bl	8000aec <__aeabi_dcmplt>
 8006156:	2800      	cmp	r0, #0
 8006158:	d050      	beq.n	80061fc <_dtoa_r+0x244>
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	2300      	movs	r3, #0
 8006162:	930b      	str	r3, [sp, #44]	; 0x2c
 8006164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006166:	1b5d      	subs	r5, r3, r5
 8006168:	1e6b      	subs	r3, r5, #1
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	bf45      	ittet	mi
 800616e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006172:	9304      	strmi	r3, [sp, #16]
 8006174:	2300      	movpl	r3, #0
 8006176:	2300      	movmi	r3, #0
 8006178:	bf4c      	ite	mi
 800617a:	9305      	strmi	r3, [sp, #20]
 800617c:	9304      	strpl	r3, [sp, #16]
 800617e:	9b00      	ldr	r3, [sp, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	db3d      	blt.n	8006200 <_dtoa_r+0x248>
 8006184:	9b05      	ldr	r3, [sp, #20]
 8006186:	9a00      	ldr	r2, [sp, #0]
 8006188:	920a      	str	r2, [sp, #40]	; 0x28
 800618a:	4413      	add	r3, r2
 800618c:	9305      	str	r3, [sp, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	9307      	str	r3, [sp, #28]
 8006192:	9b06      	ldr	r3, [sp, #24]
 8006194:	2b09      	cmp	r3, #9
 8006196:	f200 8089 	bhi.w	80062ac <_dtoa_r+0x2f4>
 800619a:	2b05      	cmp	r3, #5
 800619c:	bfc4      	itt	gt
 800619e:	3b04      	subgt	r3, #4
 80061a0:	9306      	strgt	r3, [sp, #24]
 80061a2:	9b06      	ldr	r3, [sp, #24]
 80061a4:	f1a3 0302 	sub.w	r3, r3, #2
 80061a8:	bfcc      	ite	gt
 80061aa:	2500      	movgt	r5, #0
 80061ac:	2501      	movle	r5, #1
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f200 8087 	bhi.w	80062c2 <_dtoa_r+0x30a>
 80061b4:	e8df f003 	tbb	[pc, r3]
 80061b8:	59383a2d 	.word	0x59383a2d
 80061bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061c0:	441d      	add	r5, r3
 80061c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	bfc1      	itttt	gt
 80061ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80061d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80061d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061da:	bfda      	itte	le
 80061dc:	f1c3 0320 	rsble	r3, r3, #32
 80061e0:	fa06 f003 	lslle.w	r0, r6, r3
 80061e4:	4318      	orrgt	r0, r3
 80061e6:	f7fa f995 	bl	8000514 <__aeabi_ui2d>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4606      	mov	r6, r0
 80061ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80061f2:	3d01      	subs	r5, #1
 80061f4:	930e      	str	r3, [sp, #56]	; 0x38
 80061f6:	e76a      	b.n	80060ce <_dtoa_r+0x116>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e7b2      	b.n	8006162 <_dtoa_r+0x1aa>
 80061fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80061fe:	e7b1      	b.n	8006164 <_dtoa_r+0x1ac>
 8006200:	9b04      	ldr	r3, [sp, #16]
 8006202:	9a00      	ldr	r2, [sp, #0]
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	4253      	negs	r3, r2
 800620a:	9307      	str	r3, [sp, #28]
 800620c:	2300      	movs	r3, #0
 800620e:	930a      	str	r3, [sp, #40]	; 0x28
 8006210:	e7bf      	b.n	8006192 <_dtoa_r+0x1da>
 8006212:	2300      	movs	r3, #0
 8006214:	9308      	str	r3, [sp, #32]
 8006216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	dc55      	bgt.n	80062c8 <_dtoa_r+0x310>
 800621c:	2301      	movs	r3, #1
 800621e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006222:	461a      	mov	r2, r3
 8006224:	9209      	str	r2, [sp, #36]	; 0x24
 8006226:	e00c      	b.n	8006242 <_dtoa_r+0x28a>
 8006228:	2301      	movs	r3, #1
 800622a:	e7f3      	b.n	8006214 <_dtoa_r+0x25c>
 800622c:	2300      	movs	r3, #0
 800622e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006230:	9308      	str	r3, [sp, #32]
 8006232:	9b00      	ldr	r3, [sp, #0]
 8006234:	4413      	add	r3, r2
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	3301      	adds	r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	9303      	str	r3, [sp, #12]
 800623e:	bfb8      	it	lt
 8006240:	2301      	movlt	r3, #1
 8006242:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006244:	2200      	movs	r2, #0
 8006246:	6042      	str	r2, [r0, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	f102 0614 	add.w	r6, r2, #20
 800624e:	429e      	cmp	r6, r3
 8006250:	6841      	ldr	r1, [r0, #4]
 8006252:	d93d      	bls.n	80062d0 <_dtoa_r+0x318>
 8006254:	4620      	mov	r0, r4
 8006256:	f000 fdb1 	bl	8006dbc <_Balloc>
 800625a:	9001      	str	r0, [sp, #4]
 800625c:	2800      	cmp	r0, #0
 800625e:	d13b      	bne.n	80062d8 <_dtoa_r+0x320>
 8006260:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <_dtoa_r+0x2f0>)
 8006262:	4602      	mov	r2, r0
 8006264:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006268:	e6c0      	b.n	8005fec <_dtoa_r+0x34>
 800626a:	2301      	movs	r3, #1
 800626c:	e7df      	b.n	800622e <_dtoa_r+0x276>
 800626e:	bf00      	nop
 8006270:	636f4361 	.word	0x636f4361
 8006274:	3fd287a7 	.word	0x3fd287a7
 8006278:	8b60c8b3 	.word	0x8b60c8b3
 800627c:	3fc68a28 	.word	0x3fc68a28
 8006280:	509f79fb 	.word	0x509f79fb
 8006284:	3fd34413 	.word	0x3fd34413
 8006288:	080080cd 	.word	0x080080cd
 800628c:	080080e4 	.word	0x080080e4
 8006290:	7ff00000 	.word	0x7ff00000
 8006294:	080080c9 	.word	0x080080c9
 8006298:	080080c0 	.word	0x080080c0
 800629c:	0800809d 	.word	0x0800809d
 80062a0:	3ff80000 	.word	0x3ff80000
 80062a4:	08008238 	.word	0x08008238
 80062a8:	0800813f 	.word	0x0800813f
 80062ac:	2501      	movs	r5, #1
 80062ae:	2300      	movs	r3, #0
 80062b0:	9306      	str	r3, [sp, #24]
 80062b2:	9508      	str	r5, [sp, #32]
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	2312      	movs	r3, #18
 80062c0:	e7b0      	b.n	8006224 <_dtoa_r+0x26c>
 80062c2:	2301      	movs	r3, #1
 80062c4:	9308      	str	r3, [sp, #32]
 80062c6:	e7f5      	b.n	80062b4 <_dtoa_r+0x2fc>
 80062c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062ce:	e7b8      	b.n	8006242 <_dtoa_r+0x28a>
 80062d0:	3101      	adds	r1, #1
 80062d2:	6041      	str	r1, [r0, #4]
 80062d4:	0052      	lsls	r2, r2, #1
 80062d6:	e7b8      	b.n	800624a <_dtoa_r+0x292>
 80062d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062da:	9a01      	ldr	r2, [sp, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	2b0e      	cmp	r3, #14
 80062e2:	f200 809d 	bhi.w	8006420 <_dtoa_r+0x468>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f000 809a 	beq.w	8006420 <_dtoa_r+0x468>
 80062ec:	9b00      	ldr	r3, [sp, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dd32      	ble.n	8006358 <_dtoa_r+0x3a0>
 80062f2:	4ab7      	ldr	r2, [pc, #732]	; (80065d0 <_dtoa_r+0x618>)
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006300:	9b00      	ldr	r3, [sp, #0]
 8006302:	05d8      	lsls	r0, r3, #23
 8006304:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006308:	d516      	bpl.n	8006338 <_dtoa_r+0x380>
 800630a:	4bb2      	ldr	r3, [pc, #712]	; (80065d4 <_dtoa_r+0x61c>)
 800630c:	ec51 0b19 	vmov	r0, r1, d9
 8006310:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006314:	f7fa faa2 	bl	800085c <__aeabi_ddiv>
 8006318:	f007 070f 	and.w	r7, r7, #15
 800631c:	4682      	mov	sl, r0
 800631e:	468b      	mov	fp, r1
 8006320:	2503      	movs	r5, #3
 8006322:	4eac      	ldr	r6, [pc, #688]	; (80065d4 <_dtoa_r+0x61c>)
 8006324:	b957      	cbnz	r7, 800633c <_dtoa_r+0x384>
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	4650      	mov	r0, sl
 800632c:	4659      	mov	r1, fp
 800632e:	f7fa fa95 	bl	800085c <__aeabi_ddiv>
 8006332:	4682      	mov	sl, r0
 8006334:	468b      	mov	fp, r1
 8006336:	e028      	b.n	800638a <_dtoa_r+0x3d2>
 8006338:	2502      	movs	r5, #2
 800633a:	e7f2      	b.n	8006322 <_dtoa_r+0x36a>
 800633c:	07f9      	lsls	r1, r7, #31
 800633e:	d508      	bpl.n	8006352 <_dtoa_r+0x39a>
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006348:	f7fa f95e 	bl	8000608 <__aeabi_dmul>
 800634c:	3501      	adds	r5, #1
 800634e:	4680      	mov	r8, r0
 8006350:	4689      	mov	r9, r1
 8006352:	107f      	asrs	r7, r7, #1
 8006354:	3608      	adds	r6, #8
 8006356:	e7e5      	b.n	8006324 <_dtoa_r+0x36c>
 8006358:	f000 809b 	beq.w	8006492 <_dtoa_r+0x4da>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	4f9d      	ldr	r7, [pc, #628]	; (80065d4 <_dtoa_r+0x61c>)
 8006360:	425e      	negs	r6, r3
 8006362:	4b9b      	ldr	r3, [pc, #620]	; (80065d0 <_dtoa_r+0x618>)
 8006364:	f006 020f 	and.w	r2, r6, #15
 8006368:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	ec51 0b19 	vmov	r0, r1, d9
 8006374:	f7fa f948 	bl	8000608 <__aeabi_dmul>
 8006378:	1136      	asrs	r6, r6, #4
 800637a:	4682      	mov	sl, r0
 800637c:	468b      	mov	fp, r1
 800637e:	2300      	movs	r3, #0
 8006380:	2502      	movs	r5, #2
 8006382:	2e00      	cmp	r6, #0
 8006384:	d17a      	bne.n	800647c <_dtoa_r+0x4c4>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1d3      	bne.n	8006332 <_dtoa_r+0x37a>
 800638a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8082 	beq.w	8006496 <_dtoa_r+0x4de>
 8006392:	4b91      	ldr	r3, [pc, #580]	; (80065d8 <_dtoa_r+0x620>)
 8006394:	2200      	movs	r2, #0
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	f7fa fba7 	bl	8000aec <__aeabi_dcmplt>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d079      	beq.n	8006496 <_dtoa_r+0x4de>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d076      	beq.n	8006496 <_dtoa_r+0x4de>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd36      	ble.n	800641c <_dtoa_r+0x464>
 80063ae:	9b00      	ldr	r3, [sp, #0]
 80063b0:	4650      	mov	r0, sl
 80063b2:	4659      	mov	r1, fp
 80063b4:	1e5f      	subs	r7, r3, #1
 80063b6:	2200      	movs	r2, #0
 80063b8:	4b88      	ldr	r3, [pc, #544]	; (80065dc <_dtoa_r+0x624>)
 80063ba:	f7fa f925 	bl	8000608 <__aeabi_dmul>
 80063be:	9e02      	ldr	r6, [sp, #8]
 80063c0:	4682      	mov	sl, r0
 80063c2:	468b      	mov	fp, r1
 80063c4:	3501      	adds	r5, #1
 80063c6:	4628      	mov	r0, r5
 80063c8:	f7fa f8b4 	bl	8000534 <__aeabi_i2d>
 80063cc:	4652      	mov	r2, sl
 80063ce:	465b      	mov	r3, fp
 80063d0:	f7fa f91a 	bl	8000608 <__aeabi_dmul>
 80063d4:	4b82      	ldr	r3, [pc, #520]	; (80065e0 <_dtoa_r+0x628>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	f7f9 ff60 	bl	800029c <__adddf3>
 80063dc:	46d0      	mov	r8, sl
 80063de:	46d9      	mov	r9, fp
 80063e0:	4682      	mov	sl, r0
 80063e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	d158      	bne.n	800649c <_dtoa_r+0x4e4>
 80063ea:	4b7e      	ldr	r3, [pc, #504]	; (80065e4 <_dtoa_r+0x62c>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	4640      	mov	r0, r8
 80063f0:	4649      	mov	r1, r9
 80063f2:	f7f9 ff51 	bl	8000298 <__aeabi_dsub>
 80063f6:	4652      	mov	r2, sl
 80063f8:	465b      	mov	r3, fp
 80063fa:	4680      	mov	r8, r0
 80063fc:	4689      	mov	r9, r1
 80063fe:	f7fa fb93 	bl	8000b28 <__aeabi_dcmpgt>
 8006402:	2800      	cmp	r0, #0
 8006404:	f040 8295 	bne.w	8006932 <_dtoa_r+0x97a>
 8006408:	4652      	mov	r2, sl
 800640a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7fa fb6b 	bl	8000aec <__aeabi_dcmplt>
 8006416:	2800      	cmp	r0, #0
 8006418:	f040 8289 	bne.w	800692e <_dtoa_r+0x976>
 800641c:	ec5b ab19 	vmov	sl, fp, d9
 8006420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006422:	2b00      	cmp	r3, #0
 8006424:	f2c0 8148 	blt.w	80066b8 <_dtoa_r+0x700>
 8006428:	9a00      	ldr	r2, [sp, #0]
 800642a:	2a0e      	cmp	r2, #14
 800642c:	f300 8144 	bgt.w	80066b8 <_dtoa_r+0x700>
 8006430:	4b67      	ldr	r3, [pc, #412]	; (80065d0 <_dtoa_r+0x618>)
 8006432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006436:	e9d3 8900 	ldrd	r8, r9, [r3]
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	f280 80d5 	bge.w	80065ec <_dtoa_r+0x634>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f300 80d1 	bgt.w	80065ec <_dtoa_r+0x634>
 800644a:	f040 826f 	bne.w	800692c <_dtoa_r+0x974>
 800644e:	4b65      	ldr	r3, [pc, #404]	; (80065e4 <_dtoa_r+0x62c>)
 8006450:	2200      	movs	r2, #0
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	f7fa f8d7 	bl	8000608 <__aeabi_dmul>
 800645a:	4652      	mov	r2, sl
 800645c:	465b      	mov	r3, fp
 800645e:	f7fa fb59 	bl	8000b14 <__aeabi_dcmpge>
 8006462:	9e03      	ldr	r6, [sp, #12]
 8006464:	4637      	mov	r7, r6
 8006466:	2800      	cmp	r0, #0
 8006468:	f040 8245 	bne.w	80068f6 <_dtoa_r+0x93e>
 800646c:	9d01      	ldr	r5, [sp, #4]
 800646e:	2331      	movs	r3, #49	; 0x31
 8006470:	f805 3b01 	strb.w	r3, [r5], #1
 8006474:	9b00      	ldr	r3, [sp, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	e240      	b.n	80068fe <_dtoa_r+0x946>
 800647c:	07f2      	lsls	r2, r6, #31
 800647e:	d505      	bpl.n	800648c <_dtoa_r+0x4d4>
 8006480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006484:	f7fa f8c0 	bl	8000608 <__aeabi_dmul>
 8006488:	3501      	adds	r5, #1
 800648a:	2301      	movs	r3, #1
 800648c:	1076      	asrs	r6, r6, #1
 800648e:	3708      	adds	r7, #8
 8006490:	e777      	b.n	8006382 <_dtoa_r+0x3ca>
 8006492:	2502      	movs	r5, #2
 8006494:	e779      	b.n	800638a <_dtoa_r+0x3d2>
 8006496:	9f00      	ldr	r7, [sp, #0]
 8006498:	9e03      	ldr	r6, [sp, #12]
 800649a:	e794      	b.n	80063c6 <_dtoa_r+0x40e>
 800649c:	9901      	ldr	r1, [sp, #4]
 800649e:	4b4c      	ldr	r3, [pc, #304]	; (80065d0 <_dtoa_r+0x618>)
 80064a0:	4431      	add	r1, r6
 80064a2:	910d      	str	r1, [sp, #52]	; 0x34
 80064a4:	9908      	ldr	r1, [sp, #32]
 80064a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d043      	beq.n	800653a <_dtoa_r+0x582>
 80064b2:	494d      	ldr	r1, [pc, #308]	; (80065e8 <_dtoa_r+0x630>)
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7fa f9d1 	bl	800085c <__aeabi_ddiv>
 80064ba:	4652      	mov	r2, sl
 80064bc:	465b      	mov	r3, fp
 80064be:	f7f9 feeb 	bl	8000298 <__aeabi_dsub>
 80064c2:	9d01      	ldr	r5, [sp, #4]
 80064c4:	4682      	mov	sl, r0
 80064c6:	468b      	mov	fp, r1
 80064c8:	4649      	mov	r1, r9
 80064ca:	4640      	mov	r0, r8
 80064cc:	f7fa fb4c 	bl	8000b68 <__aeabi_d2iz>
 80064d0:	4606      	mov	r6, r0
 80064d2:	f7fa f82f 	bl	8000534 <__aeabi_i2d>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7f9 fedb 	bl	8000298 <__aeabi_dsub>
 80064e2:	3630      	adds	r6, #48	; 0x30
 80064e4:	f805 6b01 	strb.w	r6, [r5], #1
 80064e8:	4652      	mov	r2, sl
 80064ea:	465b      	mov	r3, fp
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	f7fa fafc 	bl	8000aec <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d163      	bne.n	80065c0 <_dtoa_r+0x608>
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	4936      	ldr	r1, [pc, #216]	; (80065d8 <_dtoa_r+0x620>)
 80064fe:	2000      	movs	r0, #0
 8006500:	f7f9 feca 	bl	8000298 <__aeabi_dsub>
 8006504:	4652      	mov	r2, sl
 8006506:	465b      	mov	r3, fp
 8006508:	f7fa faf0 	bl	8000aec <__aeabi_dcmplt>
 800650c:	2800      	cmp	r0, #0
 800650e:	f040 80b5 	bne.w	800667c <_dtoa_r+0x6c4>
 8006512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006514:	429d      	cmp	r5, r3
 8006516:	d081      	beq.n	800641c <_dtoa_r+0x464>
 8006518:	4b30      	ldr	r3, [pc, #192]	; (80065dc <_dtoa_r+0x624>)
 800651a:	2200      	movs	r2, #0
 800651c:	4650      	mov	r0, sl
 800651e:	4659      	mov	r1, fp
 8006520:	f7fa f872 	bl	8000608 <__aeabi_dmul>
 8006524:	4b2d      	ldr	r3, [pc, #180]	; (80065dc <_dtoa_r+0x624>)
 8006526:	4682      	mov	sl, r0
 8006528:	468b      	mov	fp, r1
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	2200      	movs	r2, #0
 8006530:	f7fa f86a 	bl	8000608 <__aeabi_dmul>
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	e7c6      	b.n	80064c8 <_dtoa_r+0x510>
 800653a:	4650      	mov	r0, sl
 800653c:	4659      	mov	r1, fp
 800653e:	f7fa f863 	bl	8000608 <__aeabi_dmul>
 8006542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006544:	9d01      	ldr	r5, [sp, #4]
 8006546:	930f      	str	r3, [sp, #60]	; 0x3c
 8006548:	4682      	mov	sl, r0
 800654a:	468b      	mov	fp, r1
 800654c:	4649      	mov	r1, r9
 800654e:	4640      	mov	r0, r8
 8006550:	f7fa fb0a 	bl	8000b68 <__aeabi_d2iz>
 8006554:	4606      	mov	r6, r0
 8006556:	f7f9 ffed 	bl	8000534 <__aeabi_i2d>
 800655a:	3630      	adds	r6, #48	; 0x30
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4640      	mov	r0, r8
 8006562:	4649      	mov	r1, r9
 8006564:	f7f9 fe98 	bl	8000298 <__aeabi_dsub>
 8006568:	f805 6b01 	strb.w	r6, [r5], #1
 800656c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800656e:	429d      	cmp	r5, r3
 8006570:	4680      	mov	r8, r0
 8006572:	4689      	mov	r9, r1
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	d124      	bne.n	80065c4 <_dtoa_r+0x60c>
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <_dtoa_r+0x630>)
 800657c:	4650      	mov	r0, sl
 800657e:	4659      	mov	r1, fp
 8006580:	f7f9 fe8c 	bl	800029c <__adddf3>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa facc 	bl	8000b28 <__aeabi_dcmpgt>
 8006590:	2800      	cmp	r0, #0
 8006592:	d173      	bne.n	800667c <_dtoa_r+0x6c4>
 8006594:	4652      	mov	r2, sl
 8006596:	465b      	mov	r3, fp
 8006598:	4913      	ldr	r1, [pc, #76]	; (80065e8 <_dtoa_r+0x630>)
 800659a:	2000      	movs	r0, #0
 800659c:	f7f9 fe7c 	bl	8000298 <__aeabi_dsub>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4640      	mov	r0, r8
 80065a6:	4649      	mov	r1, r9
 80065a8:	f7fa faa0 	bl	8000aec <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f43f af35 	beq.w	800641c <_dtoa_r+0x464>
 80065b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065b4:	1e6b      	subs	r3, r5, #1
 80065b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065bc:	2b30      	cmp	r3, #48	; 0x30
 80065be:	d0f8      	beq.n	80065b2 <_dtoa_r+0x5fa>
 80065c0:	9700      	str	r7, [sp, #0]
 80065c2:	e049      	b.n	8006658 <_dtoa_r+0x6a0>
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <_dtoa_r+0x624>)
 80065c6:	f7fa f81f 	bl	8000608 <__aeabi_dmul>
 80065ca:	4680      	mov	r8, r0
 80065cc:	4689      	mov	r9, r1
 80065ce:	e7bd      	b.n	800654c <_dtoa_r+0x594>
 80065d0:	08008238 	.word	0x08008238
 80065d4:	08008210 	.word	0x08008210
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	40240000 	.word	0x40240000
 80065e0:	401c0000 	.word	0x401c0000
 80065e4:	40140000 	.word	0x40140000
 80065e8:	3fe00000 	.word	0x3fe00000
 80065ec:	9d01      	ldr	r5, [sp, #4]
 80065ee:	4656      	mov	r6, sl
 80065f0:	465f      	mov	r7, fp
 80065f2:	4642      	mov	r2, r8
 80065f4:	464b      	mov	r3, r9
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7fa f92f 	bl	800085c <__aeabi_ddiv>
 80065fe:	f7fa fab3 	bl	8000b68 <__aeabi_d2iz>
 8006602:	4682      	mov	sl, r0
 8006604:	f7f9 ff96 	bl	8000534 <__aeabi_i2d>
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	f7f9 fffc 	bl	8000608 <__aeabi_dmul>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800661c:	f7f9 fe3c 	bl	8000298 <__aeabi_dsub>
 8006620:	f805 6b01 	strb.w	r6, [r5], #1
 8006624:	9e01      	ldr	r6, [sp, #4]
 8006626:	9f03      	ldr	r7, [sp, #12]
 8006628:	1bae      	subs	r6, r5, r6
 800662a:	42b7      	cmp	r7, r6
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	d135      	bne.n	800669e <_dtoa_r+0x6e6>
 8006632:	f7f9 fe33 	bl	800029c <__adddf3>
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	f7fa fa73 	bl	8000b28 <__aeabi_dcmpgt>
 8006642:	b9d0      	cbnz	r0, 800667a <_dtoa_r+0x6c2>
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f7fa fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8006650:	b110      	cbz	r0, 8006658 <_dtoa_r+0x6a0>
 8006652:	f01a 0f01 	tst.w	sl, #1
 8006656:	d110      	bne.n	800667a <_dtoa_r+0x6c2>
 8006658:	4620      	mov	r0, r4
 800665a:	ee18 1a10 	vmov	r1, s16
 800665e:	f000 fbed 	bl	8006e3c <_Bfree>
 8006662:	2300      	movs	r3, #0
 8006664:	9800      	ldr	r0, [sp, #0]
 8006666:	702b      	strb	r3, [r5, #0]
 8006668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800666a:	3001      	adds	r0, #1
 800666c:	6018      	str	r0, [r3, #0]
 800666e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006670:	2b00      	cmp	r3, #0
 8006672:	f43f acf1 	beq.w	8006058 <_dtoa_r+0xa0>
 8006676:	601d      	str	r5, [r3, #0]
 8006678:	e4ee      	b.n	8006058 <_dtoa_r+0xa0>
 800667a:	9f00      	ldr	r7, [sp, #0]
 800667c:	462b      	mov	r3, r5
 800667e:	461d      	mov	r5, r3
 8006680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006684:	2a39      	cmp	r2, #57	; 0x39
 8006686:	d106      	bne.n	8006696 <_dtoa_r+0x6de>
 8006688:	9a01      	ldr	r2, [sp, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d1f7      	bne.n	800667e <_dtoa_r+0x6c6>
 800668e:	9901      	ldr	r1, [sp, #4]
 8006690:	2230      	movs	r2, #48	; 0x30
 8006692:	3701      	adds	r7, #1
 8006694:	700a      	strb	r2, [r1, #0]
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	3201      	adds	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e790      	b.n	80065c0 <_dtoa_r+0x608>
 800669e:	4ba6      	ldr	r3, [pc, #664]	; (8006938 <_dtoa_r+0x980>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	f7f9 ffb1 	bl	8000608 <__aeabi_dmul>
 80066a6:	2200      	movs	r2, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	4606      	mov	r6, r0
 80066ac:	460f      	mov	r7, r1
 80066ae:	f7fa fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d09d      	beq.n	80065f2 <_dtoa_r+0x63a>
 80066b6:	e7cf      	b.n	8006658 <_dtoa_r+0x6a0>
 80066b8:	9a08      	ldr	r2, [sp, #32]
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	f000 80d7 	beq.w	800686e <_dtoa_r+0x8b6>
 80066c0:	9a06      	ldr	r2, [sp, #24]
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	f300 80ba 	bgt.w	800683c <_dtoa_r+0x884>
 80066c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	f000 80b2 	beq.w	8006834 <_dtoa_r+0x87c>
 80066d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066d4:	9e07      	ldr	r6, [sp, #28]
 80066d6:	9d04      	ldr	r5, [sp, #16]
 80066d8:	9a04      	ldr	r2, [sp, #16]
 80066da:	441a      	add	r2, r3
 80066dc:	9204      	str	r2, [sp, #16]
 80066de:	9a05      	ldr	r2, [sp, #20]
 80066e0:	2101      	movs	r1, #1
 80066e2:	441a      	add	r2, r3
 80066e4:	4620      	mov	r0, r4
 80066e6:	9205      	str	r2, [sp, #20]
 80066e8:	f000 fc60 	bl	8006fac <__i2b>
 80066ec:	4607      	mov	r7, r0
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	dd0c      	ble.n	800670c <_dtoa_r+0x754>
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd09      	ble.n	800670c <_dtoa_r+0x754>
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	9a04      	ldr	r2, [sp, #16]
 80066fc:	bfa8      	it	ge
 80066fe:	462b      	movge	r3, r5
 8006700:	1ad2      	subs	r2, r2, r3
 8006702:	9204      	str	r2, [sp, #16]
 8006704:	9a05      	ldr	r2, [sp, #20]
 8006706:	1aed      	subs	r5, r5, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	9b07      	ldr	r3, [sp, #28]
 800670e:	b31b      	cbz	r3, 8006758 <_dtoa_r+0x7a0>
 8006710:	9b08      	ldr	r3, [sp, #32]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80af 	beq.w	8006876 <_dtoa_r+0x8be>
 8006718:	2e00      	cmp	r6, #0
 800671a:	dd13      	ble.n	8006744 <_dtoa_r+0x78c>
 800671c:	4639      	mov	r1, r7
 800671e:	4632      	mov	r2, r6
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fd03 	bl	800712c <__pow5mult>
 8006726:	ee18 2a10 	vmov	r2, s16
 800672a:	4601      	mov	r1, r0
 800672c:	4607      	mov	r7, r0
 800672e:	4620      	mov	r0, r4
 8006730:	f000 fc52 	bl	8006fd8 <__multiply>
 8006734:	ee18 1a10 	vmov	r1, s16
 8006738:	4680      	mov	r8, r0
 800673a:	4620      	mov	r0, r4
 800673c:	f000 fb7e 	bl	8006e3c <_Bfree>
 8006740:	ee08 8a10 	vmov	s16, r8
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	1b9a      	subs	r2, r3, r6
 8006748:	d006      	beq.n	8006758 <_dtoa_r+0x7a0>
 800674a:	ee18 1a10 	vmov	r1, s16
 800674e:	4620      	mov	r0, r4
 8006750:	f000 fcec 	bl	800712c <__pow5mult>
 8006754:	ee08 0a10 	vmov	s16, r0
 8006758:	2101      	movs	r1, #1
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fc26 	bl	8006fac <__i2b>
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	4606      	mov	r6, r0
 8006766:	f340 8088 	ble.w	800687a <_dtoa_r+0x8c2>
 800676a:	461a      	mov	r2, r3
 800676c:	4601      	mov	r1, r0
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fcdc 	bl	800712c <__pow5mult>
 8006774:	9b06      	ldr	r3, [sp, #24]
 8006776:	2b01      	cmp	r3, #1
 8006778:	4606      	mov	r6, r0
 800677a:	f340 8081 	ble.w	8006880 <_dtoa_r+0x8c8>
 800677e:	f04f 0800 	mov.w	r8, #0
 8006782:	6933      	ldr	r3, [r6, #16]
 8006784:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006788:	6918      	ldr	r0, [r3, #16]
 800678a:	f000 fbbf 	bl	8006f0c <__hi0bits>
 800678e:	f1c0 0020 	rsb	r0, r0, #32
 8006792:	9b05      	ldr	r3, [sp, #20]
 8006794:	4418      	add	r0, r3
 8006796:	f010 001f 	ands.w	r0, r0, #31
 800679a:	f000 8092 	beq.w	80068c2 <_dtoa_r+0x90a>
 800679e:	f1c0 0320 	rsb	r3, r0, #32
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	f340 808a 	ble.w	80068bc <_dtoa_r+0x904>
 80067a8:	f1c0 001c 	rsb	r0, r0, #28
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	4403      	add	r3, r0
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	4403      	add	r3, r0
 80067b6:	4405      	add	r5, r0
 80067b8:	9305      	str	r3, [sp, #20]
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dd07      	ble.n	80067d0 <_dtoa_r+0x818>
 80067c0:	ee18 1a10 	vmov	r1, s16
 80067c4:	461a      	mov	r2, r3
 80067c6:	4620      	mov	r0, r4
 80067c8:	f000 fd0a 	bl	80071e0 <__lshift>
 80067cc:	ee08 0a10 	vmov	s16, r0
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dd05      	ble.n	80067e2 <_dtoa_r+0x82a>
 80067d6:	4631      	mov	r1, r6
 80067d8:	461a      	mov	r2, r3
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fd00 	bl	80071e0 <__lshift>
 80067e0:	4606      	mov	r6, r0
 80067e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d06e      	beq.n	80068c6 <_dtoa_r+0x90e>
 80067e8:	ee18 0a10 	vmov	r0, s16
 80067ec:	4631      	mov	r1, r6
 80067ee:	f000 fd67 	bl	80072c0 <__mcmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	da67      	bge.n	80068c6 <_dtoa_r+0x90e>
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	ee18 1a10 	vmov	r1, s16
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	220a      	movs	r2, #10
 8006802:	2300      	movs	r3, #0
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fb3b 	bl	8006e80 <__multadd>
 800680a:	9b08      	ldr	r3, [sp, #32]
 800680c:	ee08 0a10 	vmov	s16, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 81b1 	beq.w	8006b78 <_dtoa_r+0xbc0>
 8006816:	2300      	movs	r3, #0
 8006818:	4639      	mov	r1, r7
 800681a:	220a      	movs	r2, #10
 800681c:	4620      	mov	r0, r4
 800681e:	f000 fb2f 	bl	8006e80 <__multadd>
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	4607      	mov	r7, r0
 8006828:	f300 808e 	bgt.w	8006948 <_dtoa_r+0x990>
 800682c:	9b06      	ldr	r3, [sp, #24]
 800682e:	2b02      	cmp	r3, #2
 8006830:	dc51      	bgt.n	80068d6 <_dtoa_r+0x91e>
 8006832:	e089      	b.n	8006948 <_dtoa_r+0x990>
 8006834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800683a:	e74b      	b.n	80066d4 <_dtoa_r+0x71c>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	1e5e      	subs	r6, r3, #1
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	42b3      	cmp	r3, r6
 8006844:	bfbf      	itttt	lt
 8006846:	9b07      	ldrlt	r3, [sp, #28]
 8006848:	9607      	strlt	r6, [sp, #28]
 800684a:	1af2      	sublt	r2, r6, r3
 800684c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800684e:	bfb6      	itet	lt
 8006850:	189b      	addlt	r3, r3, r2
 8006852:	1b9e      	subge	r6, r3, r6
 8006854:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	bfb8      	it	lt
 800685a:	2600      	movlt	r6, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	bfb7      	itett	lt
 8006860:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006864:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006868:	1a9d      	sublt	r5, r3, r2
 800686a:	2300      	movlt	r3, #0
 800686c:	e734      	b.n	80066d8 <_dtoa_r+0x720>
 800686e:	9e07      	ldr	r6, [sp, #28]
 8006870:	9d04      	ldr	r5, [sp, #16]
 8006872:	9f08      	ldr	r7, [sp, #32]
 8006874:	e73b      	b.n	80066ee <_dtoa_r+0x736>
 8006876:	9a07      	ldr	r2, [sp, #28]
 8006878:	e767      	b.n	800674a <_dtoa_r+0x792>
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	2b01      	cmp	r3, #1
 800687e:	dc18      	bgt.n	80068b2 <_dtoa_r+0x8fa>
 8006880:	f1ba 0f00 	cmp.w	sl, #0
 8006884:	d115      	bne.n	80068b2 <_dtoa_r+0x8fa>
 8006886:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800688a:	b993      	cbnz	r3, 80068b2 <_dtoa_r+0x8fa>
 800688c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006890:	0d1b      	lsrs	r3, r3, #20
 8006892:	051b      	lsls	r3, r3, #20
 8006894:	b183      	cbz	r3, 80068b8 <_dtoa_r+0x900>
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	3301      	adds	r3, #1
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	9b05      	ldr	r3, [sp, #20]
 800689e:	3301      	adds	r3, #1
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	f04f 0801 	mov.w	r8, #1
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f47f af6a 	bne.w	8006782 <_dtoa_r+0x7ca>
 80068ae:	2001      	movs	r0, #1
 80068b0:	e76f      	b.n	8006792 <_dtoa_r+0x7da>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	e7f6      	b.n	80068a6 <_dtoa_r+0x8ee>
 80068b8:	4698      	mov	r8, r3
 80068ba:	e7f4      	b.n	80068a6 <_dtoa_r+0x8ee>
 80068bc:	f43f af7d 	beq.w	80067ba <_dtoa_r+0x802>
 80068c0:	4618      	mov	r0, r3
 80068c2:	301c      	adds	r0, #28
 80068c4:	e772      	b.n	80067ac <_dtoa_r+0x7f4>
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dc37      	bgt.n	800693c <_dtoa_r+0x984>
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	dd34      	ble.n	800693c <_dtoa_r+0x984>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	9b02      	ldr	r3, [sp, #8]
 80068d8:	b96b      	cbnz	r3, 80068f6 <_dtoa_r+0x93e>
 80068da:	4631      	mov	r1, r6
 80068dc:	2205      	movs	r2, #5
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 face 	bl	8006e80 <__multadd>
 80068e4:	4601      	mov	r1, r0
 80068e6:	4606      	mov	r6, r0
 80068e8:	ee18 0a10 	vmov	r0, s16
 80068ec:	f000 fce8 	bl	80072c0 <__mcmp>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f73f adbb 	bgt.w	800646c <_dtoa_r+0x4b4>
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	9d01      	ldr	r5, [sp, #4]
 80068fa:	43db      	mvns	r3, r3
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	4631      	mov	r1, r6
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fa99 	bl	8006e3c <_Bfree>
 800690a:	2f00      	cmp	r7, #0
 800690c:	f43f aea4 	beq.w	8006658 <_dtoa_r+0x6a0>
 8006910:	f1b8 0f00 	cmp.w	r8, #0
 8006914:	d005      	beq.n	8006922 <_dtoa_r+0x96a>
 8006916:	45b8      	cmp	r8, r7
 8006918:	d003      	beq.n	8006922 <_dtoa_r+0x96a>
 800691a:	4641      	mov	r1, r8
 800691c:	4620      	mov	r0, r4
 800691e:	f000 fa8d 	bl	8006e3c <_Bfree>
 8006922:	4639      	mov	r1, r7
 8006924:	4620      	mov	r0, r4
 8006926:	f000 fa89 	bl	8006e3c <_Bfree>
 800692a:	e695      	b.n	8006658 <_dtoa_r+0x6a0>
 800692c:	2600      	movs	r6, #0
 800692e:	4637      	mov	r7, r6
 8006930:	e7e1      	b.n	80068f6 <_dtoa_r+0x93e>
 8006932:	9700      	str	r7, [sp, #0]
 8006934:	4637      	mov	r7, r6
 8006936:	e599      	b.n	800646c <_dtoa_r+0x4b4>
 8006938:	40240000 	.word	0x40240000
 800693c:	9b08      	ldr	r3, [sp, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 80ca 	beq.w	8006ad8 <_dtoa_r+0xb20>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	9302      	str	r3, [sp, #8]
 8006948:	2d00      	cmp	r5, #0
 800694a:	dd05      	ble.n	8006958 <_dtoa_r+0x9a0>
 800694c:	4639      	mov	r1, r7
 800694e:	462a      	mov	r2, r5
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fc45 	bl	80071e0 <__lshift>
 8006956:	4607      	mov	r7, r0
 8006958:	f1b8 0f00 	cmp.w	r8, #0
 800695c:	d05b      	beq.n	8006a16 <_dtoa_r+0xa5e>
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fa2b 	bl	8006dbc <_Balloc>
 8006966:	4605      	mov	r5, r0
 8006968:	b928      	cbnz	r0, 8006976 <_dtoa_r+0x9be>
 800696a:	4b87      	ldr	r3, [pc, #540]	; (8006b88 <_dtoa_r+0xbd0>)
 800696c:	4602      	mov	r2, r0
 800696e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006972:	f7ff bb3b 	b.w	8005fec <_dtoa_r+0x34>
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	3202      	adds	r2, #2
 800697a:	0092      	lsls	r2, r2, #2
 800697c:	f107 010c 	add.w	r1, r7, #12
 8006980:	300c      	adds	r0, #12
 8006982:	f000 fa0d 	bl	8006da0 <memcpy>
 8006986:	2201      	movs	r2, #1
 8006988:	4629      	mov	r1, r5
 800698a:	4620      	mov	r0, r4
 800698c:	f000 fc28 	bl	80071e0 <__lshift>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	f103 0901 	add.w	r9, r3, #1
 8006996:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800699a:	4413      	add	r3, r2
 800699c:	9305      	str	r3, [sp, #20]
 800699e:	f00a 0301 	and.w	r3, sl, #1
 80069a2:	46b8      	mov	r8, r7
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	4607      	mov	r7, r0
 80069a8:	4631      	mov	r1, r6
 80069aa:	ee18 0a10 	vmov	r0, s16
 80069ae:	f7ff fa77 	bl	8005ea0 <quorem>
 80069b2:	4641      	mov	r1, r8
 80069b4:	9002      	str	r0, [sp, #8]
 80069b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069ba:	ee18 0a10 	vmov	r0, s16
 80069be:	f000 fc7f 	bl	80072c0 <__mcmp>
 80069c2:	463a      	mov	r2, r7
 80069c4:	9003      	str	r0, [sp, #12]
 80069c6:	4631      	mov	r1, r6
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fc95 	bl	80072f8 <__mdiff>
 80069ce:	68c2      	ldr	r2, [r0, #12]
 80069d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80069d4:	4605      	mov	r5, r0
 80069d6:	bb02      	cbnz	r2, 8006a1a <_dtoa_r+0xa62>
 80069d8:	4601      	mov	r1, r0
 80069da:	ee18 0a10 	vmov	r0, s16
 80069de:	f000 fc6f 	bl	80072c0 <__mcmp>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4629      	mov	r1, r5
 80069e6:	4620      	mov	r0, r4
 80069e8:	9207      	str	r2, [sp, #28]
 80069ea:	f000 fa27 	bl	8006e3c <_Bfree>
 80069ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80069f2:	ea43 0102 	orr.w	r1, r3, r2
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	430b      	orrs	r3, r1
 80069fa:	464d      	mov	r5, r9
 80069fc:	d10f      	bne.n	8006a1e <_dtoa_r+0xa66>
 80069fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a02:	d02a      	beq.n	8006a5a <_dtoa_r+0xaa2>
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd02      	ble.n	8006a10 <_dtoa_r+0xa58>
 8006a0a:	9b02      	ldr	r3, [sp, #8]
 8006a0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006a10:	f88b a000 	strb.w	sl, [fp]
 8006a14:	e775      	b.n	8006902 <_dtoa_r+0x94a>
 8006a16:	4638      	mov	r0, r7
 8006a18:	e7ba      	b.n	8006990 <_dtoa_r+0x9d8>
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	e7e2      	b.n	80069e4 <_dtoa_r+0xa2c>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	db04      	blt.n	8006a2e <_dtoa_r+0xa76>
 8006a24:	9906      	ldr	r1, [sp, #24]
 8006a26:	430b      	orrs	r3, r1
 8006a28:	9904      	ldr	r1, [sp, #16]
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	d122      	bne.n	8006a74 <_dtoa_r+0xabc>
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	ddee      	ble.n	8006a10 <_dtoa_r+0xa58>
 8006a32:	ee18 1a10 	vmov	r1, s16
 8006a36:	2201      	movs	r2, #1
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fbd1 	bl	80071e0 <__lshift>
 8006a3e:	4631      	mov	r1, r6
 8006a40:	ee08 0a10 	vmov	s16, r0
 8006a44:	f000 fc3c 	bl	80072c0 <__mcmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	dc03      	bgt.n	8006a54 <_dtoa_r+0xa9c>
 8006a4c:	d1e0      	bne.n	8006a10 <_dtoa_r+0xa58>
 8006a4e:	f01a 0f01 	tst.w	sl, #1
 8006a52:	d0dd      	beq.n	8006a10 <_dtoa_r+0xa58>
 8006a54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a58:	d1d7      	bne.n	8006a0a <_dtoa_r+0xa52>
 8006a5a:	2339      	movs	r3, #57	; 0x39
 8006a5c:	f88b 3000 	strb.w	r3, [fp]
 8006a60:	462b      	mov	r3, r5
 8006a62:	461d      	mov	r5, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a6a:	2a39      	cmp	r2, #57	; 0x39
 8006a6c:	d071      	beq.n	8006b52 <_dtoa_r+0xb9a>
 8006a6e:	3201      	adds	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e746      	b.n	8006902 <_dtoa_r+0x94a>
 8006a74:	2a00      	cmp	r2, #0
 8006a76:	dd07      	ble.n	8006a88 <_dtoa_r+0xad0>
 8006a78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a7c:	d0ed      	beq.n	8006a5a <_dtoa_r+0xaa2>
 8006a7e:	f10a 0301 	add.w	r3, sl, #1
 8006a82:	f88b 3000 	strb.w	r3, [fp]
 8006a86:	e73c      	b.n	8006902 <_dtoa_r+0x94a>
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006a8e:	4599      	cmp	r9, r3
 8006a90:	d047      	beq.n	8006b22 <_dtoa_r+0xb6a>
 8006a92:	ee18 1a10 	vmov	r1, s16
 8006a96:	2300      	movs	r3, #0
 8006a98:	220a      	movs	r2, #10
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 f9f0 	bl	8006e80 <__multadd>
 8006aa0:	45b8      	cmp	r8, r7
 8006aa2:	ee08 0a10 	vmov	s16, r0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	f04f 020a 	mov.w	r2, #10
 8006aae:	4641      	mov	r1, r8
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	d106      	bne.n	8006ac2 <_dtoa_r+0xb0a>
 8006ab4:	f000 f9e4 	bl	8006e80 <__multadd>
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4607      	mov	r7, r0
 8006abc:	f109 0901 	add.w	r9, r9, #1
 8006ac0:	e772      	b.n	80069a8 <_dtoa_r+0x9f0>
 8006ac2:	f000 f9dd 	bl	8006e80 <__multadd>
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	4680      	mov	r8, r0
 8006aca:	2300      	movs	r3, #0
 8006acc:	220a      	movs	r2, #10
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 f9d6 	bl	8006e80 <__multadd>
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	e7f1      	b.n	8006abc <_dtoa_r+0xb04>
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	9d01      	ldr	r5, [sp, #4]
 8006ade:	ee18 0a10 	vmov	r0, s16
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	f7ff f9dc 	bl	8005ea0 <quorem>
 8006ae8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	f805 ab01 	strb.w	sl, [r5], #1
 8006af2:	1aea      	subs	r2, r5, r3
 8006af4:	9b02      	ldr	r3, [sp, #8]
 8006af6:	4293      	cmp	r3, r2
 8006af8:	dd09      	ble.n	8006b0e <_dtoa_r+0xb56>
 8006afa:	ee18 1a10 	vmov	r1, s16
 8006afe:	2300      	movs	r3, #0
 8006b00:	220a      	movs	r2, #10
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f9bc 	bl	8006e80 <__multadd>
 8006b08:	ee08 0a10 	vmov	s16, r0
 8006b0c:	e7e7      	b.n	8006ade <_dtoa_r+0xb26>
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfc8      	it	gt
 8006b14:	461d      	movgt	r5, r3
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	bfd8      	it	le
 8006b1a:	2501      	movle	r5, #1
 8006b1c:	441d      	add	r5, r3
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	ee18 1a10 	vmov	r1, s16
 8006b26:	2201      	movs	r2, #1
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fb59 	bl	80071e0 <__lshift>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	ee08 0a10 	vmov	s16, r0
 8006b34:	f000 fbc4 	bl	80072c0 <__mcmp>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	dc91      	bgt.n	8006a60 <_dtoa_r+0xaa8>
 8006b3c:	d102      	bne.n	8006b44 <_dtoa_r+0xb8c>
 8006b3e:	f01a 0f01 	tst.w	sl, #1
 8006b42:	d18d      	bne.n	8006a60 <_dtoa_r+0xaa8>
 8006b44:	462b      	mov	r3, r5
 8006b46:	461d      	mov	r5, r3
 8006b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b4c:	2a30      	cmp	r2, #48	; 0x30
 8006b4e:	d0fa      	beq.n	8006b46 <_dtoa_r+0xb8e>
 8006b50:	e6d7      	b.n	8006902 <_dtoa_r+0x94a>
 8006b52:	9a01      	ldr	r2, [sp, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d184      	bne.n	8006a62 <_dtoa_r+0xaaa>
 8006b58:	9b00      	ldr	r3, [sp, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2331      	movs	r3, #49	; 0x31
 8006b60:	7013      	strb	r3, [r2, #0]
 8006b62:	e6ce      	b.n	8006902 <_dtoa_r+0x94a>
 8006b64:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <_dtoa_r+0xbd4>)
 8006b66:	f7ff ba95 	b.w	8006094 <_dtoa_r+0xdc>
 8006b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f aa6e 	bne.w	800604e <_dtoa_r+0x96>
 8006b72:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <_dtoa_r+0xbd8>)
 8006b74:	f7ff ba8e 	b.w	8006094 <_dtoa_r+0xdc>
 8006b78:	9b02      	ldr	r3, [sp, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dcae      	bgt.n	8006adc <_dtoa_r+0xb24>
 8006b7e:	9b06      	ldr	r3, [sp, #24]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	f73f aea8 	bgt.w	80068d6 <_dtoa_r+0x91e>
 8006b86:	e7a9      	b.n	8006adc <_dtoa_r+0xb24>
 8006b88:	0800813f 	.word	0x0800813f
 8006b8c:	0800809c 	.word	0x0800809c
 8006b90:	080080c0 	.word	0x080080c0

08006b94 <std>:
 8006b94:	2300      	movs	r3, #0
 8006b96:	b510      	push	{r4, lr}
 8006b98:	4604      	mov	r4, r0
 8006b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ba2:	6083      	str	r3, [r0, #8]
 8006ba4:	8181      	strh	r1, [r0, #12]
 8006ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ba8:	81c2      	strh	r2, [r0, #14]
 8006baa:	6183      	str	r3, [r0, #24]
 8006bac:	4619      	mov	r1, r3
 8006bae:	2208      	movs	r2, #8
 8006bb0:	305c      	adds	r0, #92	; 0x5c
 8006bb2:	f7fe fceb 	bl	800558c <memset>
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <std+0x38>)
 8006bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <std+0x3c>)
 8006bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <std+0x40>)
 8006bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <std+0x44>)
 8006bc4:	6224      	str	r4, [r4, #32]
 8006bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	bf00      	nop
 8006bcc:	08007985 	.word	0x08007985
 8006bd0:	080079a7 	.word	0x080079a7
 8006bd4:	080079df 	.word	0x080079df
 8006bd8:	08007a03 	.word	0x08007a03

08006bdc <_cleanup_r>:
 8006bdc:	4901      	ldr	r1, [pc, #4]	; (8006be4 <_cleanup_r+0x8>)
 8006bde:	f000 b8af 	b.w	8006d40 <_fwalk_reent>
 8006be2:	bf00      	nop
 8006be4:	08007d19 	.word	0x08007d19

08006be8 <__sfmoreglue>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	2268      	movs	r2, #104	; 0x68
 8006bec:	1e4d      	subs	r5, r1, #1
 8006bee:	4355      	muls	r5, r2
 8006bf0:	460e      	mov	r6, r1
 8006bf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bf6:	f000 fce7 	bl	80075c8 <_malloc_r>
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	b140      	cbz	r0, 8006c10 <__sfmoreglue+0x28>
 8006bfe:	2100      	movs	r1, #0
 8006c00:	e9c0 1600 	strd	r1, r6, [r0]
 8006c04:	300c      	adds	r0, #12
 8006c06:	60a0      	str	r0, [r4, #8]
 8006c08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c0c:	f7fe fcbe 	bl	800558c <memset>
 8006c10:	4620      	mov	r0, r4
 8006c12:	bd70      	pop	{r4, r5, r6, pc}

08006c14 <__sfp_lock_acquire>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__sfp_lock_acquire+0x8>)
 8006c16:	f000 b8b8 	b.w	8006d8a <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20000365 	.word	0x20000365

08006c20 <__sfp_lock_release>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sfp_lock_release+0x8>)
 8006c22:	f000 b8b3 	b.w	8006d8c <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	20000365 	.word	0x20000365

08006c2c <__sinit_lock_acquire>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sinit_lock_acquire+0x8>)
 8006c2e:	f000 b8ac 	b.w	8006d8a <__retarget_lock_acquire_recursive>
 8006c32:	bf00      	nop
 8006c34:	20000366 	.word	0x20000366

08006c38 <__sinit_lock_release>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__sinit_lock_release+0x8>)
 8006c3a:	f000 b8a7 	b.w	8006d8c <__retarget_lock_release_recursive>
 8006c3e:	bf00      	nop
 8006c40:	20000366 	.word	0x20000366

08006c44 <__sinit>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	f7ff fff0 	bl	8006c2c <__sinit_lock_acquire>
 8006c4c:	69a3      	ldr	r3, [r4, #24]
 8006c4e:	b11b      	cbz	r3, 8006c58 <__sinit+0x14>
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	f7ff bff0 	b.w	8006c38 <__sinit_lock_release>
 8006c58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <__sinit+0x68>)
 8006c60:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <__sinit+0x6c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c66:	42a3      	cmp	r3, r4
 8006c68:	bf04      	itt	eq
 8006c6a:	2301      	moveq	r3, #1
 8006c6c:	61a3      	streq	r3, [r4, #24]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f820 	bl	8006cb4 <__sfp>
 8006c74:	6060      	str	r0, [r4, #4]
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f81c 	bl	8006cb4 <__sfp>
 8006c7c:	60a0      	str	r0, [r4, #8]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 f818 	bl	8006cb4 <__sfp>
 8006c84:	2200      	movs	r2, #0
 8006c86:	60e0      	str	r0, [r4, #12]
 8006c88:	2104      	movs	r1, #4
 8006c8a:	6860      	ldr	r0, [r4, #4]
 8006c8c:	f7ff ff82 	bl	8006b94 <std>
 8006c90:	68a0      	ldr	r0, [r4, #8]
 8006c92:	2201      	movs	r2, #1
 8006c94:	2109      	movs	r1, #9
 8006c96:	f7ff ff7d 	bl	8006b94 <std>
 8006c9a:	68e0      	ldr	r0, [r4, #12]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	2112      	movs	r1, #18
 8006ca0:	f7ff ff78 	bl	8006b94 <std>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	61a3      	str	r3, [r4, #24]
 8006ca8:	e7d2      	b.n	8006c50 <__sinit+0xc>
 8006caa:	bf00      	nop
 8006cac:	08008088 	.word	0x08008088
 8006cb0:	08006bdd 	.word	0x08006bdd

08006cb4 <__sfp>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	f7ff ffac 	bl	8006c14 <__sfp_lock_acquire>
 8006cbc:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <__sfp+0x84>)
 8006cbe:	681e      	ldr	r6, [r3, #0]
 8006cc0:	69b3      	ldr	r3, [r6, #24]
 8006cc2:	b913      	cbnz	r3, 8006cca <__sfp+0x16>
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f7ff ffbd 	bl	8006c44 <__sinit>
 8006cca:	3648      	adds	r6, #72	; 0x48
 8006ccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	d503      	bpl.n	8006cdc <__sfp+0x28>
 8006cd4:	6833      	ldr	r3, [r6, #0]
 8006cd6:	b30b      	cbz	r3, 8006d1c <__sfp+0x68>
 8006cd8:	6836      	ldr	r6, [r6, #0]
 8006cda:	e7f7      	b.n	8006ccc <__sfp+0x18>
 8006cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ce0:	b9d5      	cbnz	r5, 8006d18 <__sfp+0x64>
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <__sfp+0x88>)
 8006ce4:	60e3      	str	r3, [r4, #12]
 8006ce6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cea:	6665      	str	r5, [r4, #100]	; 0x64
 8006cec:	f000 f84c 	bl	8006d88 <__retarget_lock_init_recursive>
 8006cf0:	f7ff ff96 	bl	8006c20 <__sfp_lock_release>
 8006cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cfc:	6025      	str	r5, [r4, #0]
 8006cfe:	61a5      	str	r5, [r4, #24]
 8006d00:	2208      	movs	r2, #8
 8006d02:	4629      	mov	r1, r5
 8006d04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d08:	f7fe fc40 	bl	800558c <memset>
 8006d0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d14:	4620      	mov	r0, r4
 8006d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d18:	3468      	adds	r4, #104	; 0x68
 8006d1a:	e7d9      	b.n	8006cd0 <__sfp+0x1c>
 8006d1c:	2104      	movs	r1, #4
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f7ff ff62 	bl	8006be8 <__sfmoreglue>
 8006d24:	4604      	mov	r4, r0
 8006d26:	6030      	str	r0, [r6, #0]
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d1d5      	bne.n	8006cd8 <__sfp+0x24>
 8006d2c:	f7ff ff78 	bl	8006c20 <__sfp_lock_release>
 8006d30:	230c      	movs	r3, #12
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	e7ee      	b.n	8006d14 <__sfp+0x60>
 8006d36:	bf00      	nop
 8006d38:	08008088 	.word	0x08008088
 8006d3c:	ffff0001 	.word	0xffff0001

08006d40 <_fwalk_reent>:
 8006d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	4606      	mov	r6, r0
 8006d46:	4688      	mov	r8, r1
 8006d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d4c:	2700      	movs	r7, #0
 8006d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d52:	f1b9 0901 	subs.w	r9, r9, #1
 8006d56:	d505      	bpl.n	8006d64 <_fwalk_reent+0x24>
 8006d58:	6824      	ldr	r4, [r4, #0]
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	d1f7      	bne.n	8006d4e <_fwalk_reent+0xe>
 8006d5e:	4638      	mov	r0, r7
 8006d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d64:	89ab      	ldrh	r3, [r5, #12]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d907      	bls.n	8006d7a <_fwalk_reent+0x3a>
 8006d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	d003      	beq.n	8006d7a <_fwalk_reent+0x3a>
 8006d72:	4629      	mov	r1, r5
 8006d74:	4630      	mov	r0, r6
 8006d76:	47c0      	blx	r8
 8006d78:	4307      	orrs	r7, r0
 8006d7a:	3568      	adds	r5, #104	; 0x68
 8006d7c:	e7e9      	b.n	8006d52 <_fwalk_reent+0x12>
	...

08006d80 <_localeconv_r>:
 8006d80:	4800      	ldr	r0, [pc, #0]	; (8006d84 <_localeconv_r+0x4>)
 8006d82:	4770      	bx	lr
 8006d84:	20000160 	.word	0x20000160

08006d88 <__retarget_lock_init_recursive>:
 8006d88:	4770      	bx	lr

08006d8a <__retarget_lock_acquire_recursive>:
 8006d8a:	4770      	bx	lr

08006d8c <__retarget_lock_release_recursive>:
 8006d8c:	4770      	bx	lr
	...

08006d90 <malloc>:
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <malloc+0xc>)
 8006d92:	4601      	mov	r1, r0
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	f000 bc17 	b.w	80075c8 <_malloc_r>
 8006d9a:	bf00      	nop
 8006d9c:	2000000c 	.word	0x2000000c

08006da0 <memcpy>:
 8006da0:	440a      	add	r2, r1
 8006da2:	4291      	cmp	r1, r2
 8006da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006da8:	d100      	bne.n	8006dac <memcpy+0xc>
 8006daa:	4770      	bx	lr
 8006dac:	b510      	push	{r4, lr}
 8006dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d1f9      	bne.n	8006dae <memcpy+0xe>
 8006dba:	bd10      	pop	{r4, pc}

08006dbc <_Balloc>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	b976      	cbnz	r6, 8006de4 <_Balloc+0x28>
 8006dc6:	2010      	movs	r0, #16
 8006dc8:	f7ff ffe2 	bl	8006d90 <malloc>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd0:	b920      	cbnz	r0, 8006ddc <_Balloc+0x20>
 8006dd2:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <_Balloc+0x78>)
 8006dd4:	4818      	ldr	r0, [pc, #96]	; (8006e38 <_Balloc+0x7c>)
 8006dd6:	2166      	movs	r1, #102	; 0x66
 8006dd8:	f000 feea 	bl	8007bb0 <__assert_func>
 8006ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de0:	6006      	str	r6, [r0, #0]
 8006de2:	60c6      	str	r6, [r0, #12]
 8006de4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006de6:	68f3      	ldr	r3, [r6, #12]
 8006de8:	b183      	cbz	r3, 8006e0c <_Balloc+0x50>
 8006dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006df2:	b9b8      	cbnz	r0, 8006e24 <_Balloc+0x68>
 8006df4:	2101      	movs	r1, #1
 8006df6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dfa:	1d72      	adds	r2, r6, #5
 8006dfc:	0092      	lsls	r2, r2, #2
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 fb60 	bl	80074c4 <_calloc_r>
 8006e04:	b160      	cbz	r0, 8006e20 <_Balloc+0x64>
 8006e06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e0a:	e00e      	b.n	8006e2a <_Balloc+0x6e>
 8006e0c:	2221      	movs	r2, #33	; 0x21
 8006e0e:	2104      	movs	r1, #4
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fb57 	bl	80074c4 <_calloc_r>
 8006e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e18:	60f0      	str	r0, [r6, #12]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e4      	bne.n	8006dea <_Balloc+0x2e>
 8006e20:	2000      	movs	r0, #0
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	6802      	ldr	r2, [r0, #0]
 8006e26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e30:	e7f7      	b.n	8006e22 <_Balloc+0x66>
 8006e32:	bf00      	nop
 8006e34:	080080cd 	.word	0x080080cd
 8006e38:	080081b0 	.word	0x080081b0

08006e3c <_Bfree>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b976      	cbnz	r6, 8006e64 <_Bfree+0x28>
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ffa2 	bl	8006d90 <malloc>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6268      	str	r0, [r5, #36]	; 0x24
 8006e50:	b920      	cbnz	r0, 8006e5c <_Bfree+0x20>
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <_Bfree+0x3c>)
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <_Bfree+0x40>)
 8006e56:	218a      	movs	r1, #138	; 0x8a
 8006e58:	f000 feaa 	bl	8007bb0 <__assert_func>
 8006e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e60:	6006      	str	r6, [r0, #0]
 8006e62:	60c6      	str	r6, [r0, #12]
 8006e64:	b13c      	cbz	r4, 8006e76 <_Bfree+0x3a>
 8006e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e68:	6862      	ldr	r2, [r4, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e70:	6021      	str	r1, [r4, #0]
 8006e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	080080cd 	.word	0x080080cd
 8006e7c:	080081b0 	.word	0x080081b0

08006e80 <__multadd>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	690d      	ldr	r5, [r1, #16]
 8006e86:	4607      	mov	r7, r0
 8006e88:	460c      	mov	r4, r1
 8006e8a:	461e      	mov	r6, r3
 8006e8c:	f101 0c14 	add.w	ip, r1, #20
 8006e90:	2000      	movs	r0, #0
 8006e92:	f8dc 3000 	ldr.w	r3, [ip]
 8006e96:	b299      	uxth	r1, r3
 8006e98:	fb02 6101 	mla	r1, r2, r1, r6
 8006e9c:	0c1e      	lsrs	r6, r3, #16
 8006e9e:	0c0b      	lsrs	r3, r1, #16
 8006ea0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ea4:	b289      	uxth	r1, r1
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006eac:	4285      	cmp	r5, r0
 8006eae:	f84c 1b04 	str.w	r1, [ip], #4
 8006eb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eb6:	dcec      	bgt.n	8006e92 <__multadd+0x12>
 8006eb8:	b30e      	cbz	r6, 8006efe <__multadd+0x7e>
 8006eba:	68a3      	ldr	r3, [r4, #8]
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	dc19      	bgt.n	8006ef4 <__multadd+0x74>
 8006ec0:	6861      	ldr	r1, [r4, #4]
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	3101      	adds	r1, #1
 8006ec6:	f7ff ff79 	bl	8006dbc <_Balloc>
 8006eca:	4680      	mov	r8, r0
 8006ecc:	b928      	cbnz	r0, 8006eda <__multadd+0x5a>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <__multadd+0x84>)
 8006ed2:	480d      	ldr	r0, [pc, #52]	; (8006f08 <__multadd+0x88>)
 8006ed4:	21b5      	movs	r1, #181	; 0xb5
 8006ed6:	f000 fe6b 	bl	8007bb0 <__assert_func>
 8006eda:	6922      	ldr	r2, [r4, #16]
 8006edc:	3202      	adds	r2, #2
 8006ede:	f104 010c 	add.w	r1, r4, #12
 8006ee2:	0092      	lsls	r2, r2, #2
 8006ee4:	300c      	adds	r0, #12
 8006ee6:	f7ff ff5b 	bl	8006da0 <memcpy>
 8006eea:	4621      	mov	r1, r4
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7ff ffa5 	bl	8006e3c <_Bfree>
 8006ef2:	4644      	mov	r4, r8
 8006ef4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ef8:	3501      	adds	r5, #1
 8006efa:	615e      	str	r6, [r3, #20]
 8006efc:	6125      	str	r5, [r4, #16]
 8006efe:	4620      	mov	r0, r4
 8006f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f04:	0800813f 	.word	0x0800813f
 8006f08:	080081b0 	.word	0x080081b0

08006f0c <__hi0bits>:
 8006f0c:	0c03      	lsrs	r3, r0, #16
 8006f0e:	041b      	lsls	r3, r3, #16
 8006f10:	b9d3      	cbnz	r3, 8006f48 <__hi0bits+0x3c>
 8006f12:	0400      	lsls	r0, r0, #16
 8006f14:	2310      	movs	r3, #16
 8006f16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f1a:	bf04      	itt	eq
 8006f1c:	0200      	lsleq	r0, r0, #8
 8006f1e:	3308      	addeq	r3, #8
 8006f20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f24:	bf04      	itt	eq
 8006f26:	0100      	lsleq	r0, r0, #4
 8006f28:	3304      	addeq	r3, #4
 8006f2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f2e:	bf04      	itt	eq
 8006f30:	0080      	lsleq	r0, r0, #2
 8006f32:	3302      	addeq	r3, #2
 8006f34:	2800      	cmp	r0, #0
 8006f36:	db05      	blt.n	8006f44 <__hi0bits+0x38>
 8006f38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f3c:	f103 0301 	add.w	r3, r3, #1
 8006f40:	bf08      	it	eq
 8006f42:	2320      	moveq	r3, #32
 8006f44:	4618      	mov	r0, r3
 8006f46:	4770      	bx	lr
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e7e4      	b.n	8006f16 <__hi0bits+0xa>

08006f4c <__lo0bits>:
 8006f4c:	6803      	ldr	r3, [r0, #0]
 8006f4e:	f013 0207 	ands.w	r2, r3, #7
 8006f52:	4601      	mov	r1, r0
 8006f54:	d00b      	beq.n	8006f6e <__lo0bits+0x22>
 8006f56:	07da      	lsls	r2, r3, #31
 8006f58:	d423      	bmi.n	8006fa2 <__lo0bits+0x56>
 8006f5a:	0798      	lsls	r0, r3, #30
 8006f5c:	bf49      	itett	mi
 8006f5e:	085b      	lsrmi	r3, r3, #1
 8006f60:	089b      	lsrpl	r3, r3, #2
 8006f62:	2001      	movmi	r0, #1
 8006f64:	600b      	strmi	r3, [r1, #0]
 8006f66:	bf5c      	itt	pl
 8006f68:	600b      	strpl	r3, [r1, #0]
 8006f6a:	2002      	movpl	r0, #2
 8006f6c:	4770      	bx	lr
 8006f6e:	b298      	uxth	r0, r3
 8006f70:	b9a8      	cbnz	r0, 8006f9e <__lo0bits+0x52>
 8006f72:	0c1b      	lsrs	r3, r3, #16
 8006f74:	2010      	movs	r0, #16
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	b90a      	cbnz	r2, 8006f7e <__lo0bits+0x32>
 8006f7a:	3008      	adds	r0, #8
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	071a      	lsls	r2, r3, #28
 8006f80:	bf04      	itt	eq
 8006f82:	091b      	lsreq	r3, r3, #4
 8006f84:	3004      	addeq	r0, #4
 8006f86:	079a      	lsls	r2, r3, #30
 8006f88:	bf04      	itt	eq
 8006f8a:	089b      	lsreq	r3, r3, #2
 8006f8c:	3002      	addeq	r0, #2
 8006f8e:	07da      	lsls	r2, r3, #31
 8006f90:	d403      	bmi.n	8006f9a <__lo0bits+0x4e>
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	f100 0001 	add.w	r0, r0, #1
 8006f98:	d005      	beq.n	8006fa6 <__lo0bits+0x5a>
 8006f9a:	600b      	str	r3, [r1, #0]
 8006f9c:	4770      	bx	lr
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	e7e9      	b.n	8006f76 <__lo0bits+0x2a>
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	4770      	bx	lr
 8006fa6:	2020      	movs	r0, #32
 8006fa8:	4770      	bx	lr
	...

08006fac <__i2b>:
 8006fac:	b510      	push	{r4, lr}
 8006fae:	460c      	mov	r4, r1
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	f7ff ff03 	bl	8006dbc <_Balloc>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	b928      	cbnz	r0, 8006fc6 <__i2b+0x1a>
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <__i2b+0x24>)
 8006fbc:	4805      	ldr	r0, [pc, #20]	; (8006fd4 <__i2b+0x28>)
 8006fbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fc2:	f000 fdf5 	bl	8007bb0 <__assert_func>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	6144      	str	r4, [r0, #20]
 8006fca:	6103      	str	r3, [r0, #16]
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	bf00      	nop
 8006fd0:	0800813f 	.word	0x0800813f
 8006fd4:	080081b0 	.word	0x080081b0

08006fd8 <__multiply>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	4691      	mov	r9, r2
 8006fde:	690a      	ldr	r2, [r1, #16]
 8006fe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	bfb8      	it	lt
 8006fe8:	460b      	movlt	r3, r1
 8006fea:	460c      	mov	r4, r1
 8006fec:	bfbc      	itt	lt
 8006fee:	464c      	movlt	r4, r9
 8006ff0:	4699      	movlt	r9, r3
 8006ff2:	6927      	ldr	r7, [r4, #16]
 8006ff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ff8:	68a3      	ldr	r3, [r4, #8]
 8006ffa:	6861      	ldr	r1, [r4, #4]
 8006ffc:	eb07 060a 	add.w	r6, r7, sl
 8007000:	42b3      	cmp	r3, r6
 8007002:	b085      	sub	sp, #20
 8007004:	bfb8      	it	lt
 8007006:	3101      	addlt	r1, #1
 8007008:	f7ff fed8 	bl	8006dbc <_Balloc>
 800700c:	b930      	cbnz	r0, 800701c <__multiply+0x44>
 800700e:	4602      	mov	r2, r0
 8007010:	4b44      	ldr	r3, [pc, #272]	; (8007124 <__multiply+0x14c>)
 8007012:	4845      	ldr	r0, [pc, #276]	; (8007128 <__multiply+0x150>)
 8007014:	f240 115d 	movw	r1, #349	; 0x15d
 8007018:	f000 fdca 	bl	8007bb0 <__assert_func>
 800701c:	f100 0514 	add.w	r5, r0, #20
 8007020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007024:	462b      	mov	r3, r5
 8007026:	2200      	movs	r2, #0
 8007028:	4543      	cmp	r3, r8
 800702a:	d321      	bcc.n	8007070 <__multiply+0x98>
 800702c:	f104 0314 	add.w	r3, r4, #20
 8007030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007034:	f109 0314 	add.w	r3, r9, #20
 8007038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800703c:	9202      	str	r2, [sp, #8]
 800703e:	1b3a      	subs	r2, r7, r4
 8007040:	3a15      	subs	r2, #21
 8007042:	f022 0203 	bic.w	r2, r2, #3
 8007046:	3204      	adds	r2, #4
 8007048:	f104 0115 	add.w	r1, r4, #21
 800704c:	428f      	cmp	r7, r1
 800704e:	bf38      	it	cc
 8007050:	2204      	movcc	r2, #4
 8007052:	9201      	str	r2, [sp, #4]
 8007054:	9a02      	ldr	r2, [sp, #8]
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	429a      	cmp	r2, r3
 800705a:	d80c      	bhi.n	8007076 <__multiply+0x9e>
 800705c:	2e00      	cmp	r6, #0
 800705e:	dd03      	ble.n	8007068 <__multiply+0x90>
 8007060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007064:	2b00      	cmp	r3, #0
 8007066:	d05a      	beq.n	800711e <__multiply+0x146>
 8007068:	6106      	str	r6, [r0, #16]
 800706a:	b005      	add	sp, #20
 800706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007070:	f843 2b04 	str.w	r2, [r3], #4
 8007074:	e7d8      	b.n	8007028 <__multiply+0x50>
 8007076:	f8b3 a000 	ldrh.w	sl, [r3]
 800707a:	f1ba 0f00 	cmp.w	sl, #0
 800707e:	d024      	beq.n	80070ca <__multiply+0xf2>
 8007080:	f104 0e14 	add.w	lr, r4, #20
 8007084:	46a9      	mov	r9, r5
 8007086:	f04f 0c00 	mov.w	ip, #0
 800708a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800708e:	f8d9 1000 	ldr.w	r1, [r9]
 8007092:	fa1f fb82 	uxth.w	fp, r2
 8007096:	b289      	uxth	r1, r1
 8007098:	fb0a 110b 	mla	r1, sl, fp, r1
 800709c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070a0:	f8d9 2000 	ldr.w	r2, [r9]
 80070a4:	4461      	add	r1, ip
 80070a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80070ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070b2:	b289      	uxth	r1, r1
 80070b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070b8:	4577      	cmp	r7, lr
 80070ba:	f849 1b04 	str.w	r1, [r9], #4
 80070be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070c2:	d8e2      	bhi.n	800708a <__multiply+0xb2>
 80070c4:	9a01      	ldr	r2, [sp, #4]
 80070c6:	f845 c002 	str.w	ip, [r5, r2]
 80070ca:	9a03      	ldr	r2, [sp, #12]
 80070cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070d0:	3304      	adds	r3, #4
 80070d2:	f1b9 0f00 	cmp.w	r9, #0
 80070d6:	d020      	beq.n	800711a <__multiply+0x142>
 80070d8:	6829      	ldr	r1, [r5, #0]
 80070da:	f104 0c14 	add.w	ip, r4, #20
 80070de:	46ae      	mov	lr, r5
 80070e0:	f04f 0a00 	mov.w	sl, #0
 80070e4:	f8bc b000 	ldrh.w	fp, [ip]
 80070e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070ec:	fb09 220b 	mla	r2, r9, fp, r2
 80070f0:	4492      	add	sl, r2
 80070f2:	b289      	uxth	r1, r1
 80070f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80070f8:	f84e 1b04 	str.w	r1, [lr], #4
 80070fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007100:	f8be 1000 	ldrh.w	r1, [lr]
 8007104:	0c12      	lsrs	r2, r2, #16
 8007106:	fb09 1102 	mla	r1, r9, r2, r1
 800710a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800710e:	4567      	cmp	r7, ip
 8007110:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007114:	d8e6      	bhi.n	80070e4 <__multiply+0x10c>
 8007116:	9a01      	ldr	r2, [sp, #4]
 8007118:	50a9      	str	r1, [r5, r2]
 800711a:	3504      	adds	r5, #4
 800711c:	e79a      	b.n	8007054 <__multiply+0x7c>
 800711e:	3e01      	subs	r6, #1
 8007120:	e79c      	b.n	800705c <__multiply+0x84>
 8007122:	bf00      	nop
 8007124:	0800813f 	.word	0x0800813f
 8007128:	080081b0 	.word	0x080081b0

0800712c <__pow5mult>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4615      	mov	r5, r2
 8007132:	f012 0203 	ands.w	r2, r2, #3
 8007136:	4606      	mov	r6, r0
 8007138:	460f      	mov	r7, r1
 800713a:	d007      	beq.n	800714c <__pow5mult+0x20>
 800713c:	4c25      	ldr	r4, [pc, #148]	; (80071d4 <__pow5mult+0xa8>)
 800713e:	3a01      	subs	r2, #1
 8007140:	2300      	movs	r3, #0
 8007142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007146:	f7ff fe9b 	bl	8006e80 <__multadd>
 800714a:	4607      	mov	r7, r0
 800714c:	10ad      	asrs	r5, r5, #2
 800714e:	d03d      	beq.n	80071cc <__pow5mult+0xa0>
 8007150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007152:	b97c      	cbnz	r4, 8007174 <__pow5mult+0x48>
 8007154:	2010      	movs	r0, #16
 8007156:	f7ff fe1b 	bl	8006d90 <malloc>
 800715a:	4602      	mov	r2, r0
 800715c:	6270      	str	r0, [r6, #36]	; 0x24
 800715e:	b928      	cbnz	r0, 800716c <__pow5mult+0x40>
 8007160:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <__pow5mult+0xac>)
 8007162:	481e      	ldr	r0, [pc, #120]	; (80071dc <__pow5mult+0xb0>)
 8007164:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007168:	f000 fd22 	bl	8007bb0 <__assert_func>
 800716c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	60c4      	str	r4, [r0, #12]
 8007174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800717c:	b94c      	cbnz	r4, 8007192 <__pow5mult+0x66>
 800717e:	f240 2171 	movw	r1, #625	; 0x271
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff12 	bl	8006fac <__i2b>
 8007188:	2300      	movs	r3, #0
 800718a:	f8c8 0008 	str.w	r0, [r8, #8]
 800718e:	4604      	mov	r4, r0
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 0900 	mov.w	r9, #0
 8007196:	07eb      	lsls	r3, r5, #31
 8007198:	d50a      	bpl.n	80071b0 <__pow5mult+0x84>
 800719a:	4639      	mov	r1, r7
 800719c:	4622      	mov	r2, r4
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ff1a 	bl	8006fd8 <__multiply>
 80071a4:	4639      	mov	r1, r7
 80071a6:	4680      	mov	r8, r0
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff fe47 	bl	8006e3c <_Bfree>
 80071ae:	4647      	mov	r7, r8
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	d00b      	beq.n	80071cc <__pow5mult+0xa0>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	b938      	cbnz	r0, 80071c8 <__pow5mult+0x9c>
 80071b8:	4622      	mov	r2, r4
 80071ba:	4621      	mov	r1, r4
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ff0b 	bl	8006fd8 <__multiply>
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f8c0 9000 	str.w	r9, [r0]
 80071c8:	4604      	mov	r4, r0
 80071ca:	e7e4      	b.n	8007196 <__pow5mult+0x6a>
 80071cc:	4638      	mov	r0, r7
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	bf00      	nop
 80071d4:	08008300 	.word	0x08008300
 80071d8:	080080cd 	.word	0x080080cd
 80071dc:	080081b0 	.word	0x080081b0

080071e0 <__lshift>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	460c      	mov	r4, r1
 80071e6:	6849      	ldr	r1, [r1, #4]
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	4607      	mov	r7, r0
 80071f2:	4691      	mov	r9, r2
 80071f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071f8:	f108 0601 	add.w	r6, r8, #1
 80071fc:	42b3      	cmp	r3, r6
 80071fe:	db0b      	blt.n	8007218 <__lshift+0x38>
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff fddb 	bl	8006dbc <_Balloc>
 8007206:	4605      	mov	r5, r0
 8007208:	b948      	cbnz	r0, 800721e <__lshift+0x3e>
 800720a:	4602      	mov	r2, r0
 800720c:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <__lshift+0xd8>)
 800720e:	482b      	ldr	r0, [pc, #172]	; (80072bc <__lshift+0xdc>)
 8007210:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007214:	f000 fccc 	bl	8007bb0 <__assert_func>
 8007218:	3101      	adds	r1, #1
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	e7ee      	b.n	80071fc <__lshift+0x1c>
 800721e:	2300      	movs	r3, #0
 8007220:	f100 0114 	add.w	r1, r0, #20
 8007224:	f100 0210 	add.w	r2, r0, #16
 8007228:	4618      	mov	r0, r3
 800722a:	4553      	cmp	r3, sl
 800722c:	db37      	blt.n	800729e <__lshift+0xbe>
 800722e:	6920      	ldr	r0, [r4, #16]
 8007230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	f019 091f 	ands.w	r9, r9, #31
 800723c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007240:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007244:	d02f      	beq.n	80072a6 <__lshift+0xc6>
 8007246:	f1c9 0e20 	rsb	lr, r9, #32
 800724a:	468a      	mov	sl, r1
 800724c:	f04f 0c00 	mov.w	ip, #0
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	fa02 f209 	lsl.w	r2, r2, r9
 8007256:	ea42 020c 	orr.w	r2, r2, ip
 800725a:	f84a 2b04 	str.w	r2, [sl], #4
 800725e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007262:	4298      	cmp	r0, r3
 8007264:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007268:	d8f2      	bhi.n	8007250 <__lshift+0x70>
 800726a:	1b03      	subs	r3, r0, r4
 800726c:	3b15      	subs	r3, #21
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	3304      	adds	r3, #4
 8007274:	f104 0215 	add.w	r2, r4, #21
 8007278:	4290      	cmp	r0, r2
 800727a:	bf38      	it	cc
 800727c:	2304      	movcc	r3, #4
 800727e:	f841 c003 	str.w	ip, [r1, r3]
 8007282:	f1bc 0f00 	cmp.w	ip, #0
 8007286:	d001      	beq.n	800728c <__lshift+0xac>
 8007288:	f108 0602 	add.w	r6, r8, #2
 800728c:	3e01      	subs	r6, #1
 800728e:	4638      	mov	r0, r7
 8007290:	612e      	str	r6, [r5, #16]
 8007292:	4621      	mov	r1, r4
 8007294:	f7ff fdd2 	bl	8006e3c <_Bfree>
 8007298:	4628      	mov	r0, r5
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	f842 0f04 	str.w	r0, [r2, #4]!
 80072a2:	3301      	adds	r3, #1
 80072a4:	e7c1      	b.n	800722a <__lshift+0x4a>
 80072a6:	3904      	subs	r1, #4
 80072a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80072b0:	4298      	cmp	r0, r3
 80072b2:	d8f9      	bhi.n	80072a8 <__lshift+0xc8>
 80072b4:	e7ea      	b.n	800728c <__lshift+0xac>
 80072b6:	bf00      	nop
 80072b8:	0800813f 	.word	0x0800813f
 80072bc:	080081b0 	.word	0x080081b0

080072c0 <__mcmp>:
 80072c0:	b530      	push	{r4, r5, lr}
 80072c2:	6902      	ldr	r2, [r0, #16]
 80072c4:	690c      	ldr	r4, [r1, #16]
 80072c6:	1b12      	subs	r2, r2, r4
 80072c8:	d10e      	bne.n	80072e8 <__mcmp+0x28>
 80072ca:	f100 0314 	add.w	r3, r0, #20
 80072ce:	3114      	adds	r1, #20
 80072d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072e0:	42a5      	cmp	r5, r4
 80072e2:	d003      	beq.n	80072ec <__mcmp+0x2c>
 80072e4:	d305      	bcc.n	80072f2 <__mcmp+0x32>
 80072e6:	2201      	movs	r2, #1
 80072e8:	4610      	mov	r0, r2
 80072ea:	bd30      	pop	{r4, r5, pc}
 80072ec:	4283      	cmp	r3, r0
 80072ee:	d3f3      	bcc.n	80072d8 <__mcmp+0x18>
 80072f0:	e7fa      	b.n	80072e8 <__mcmp+0x28>
 80072f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072f6:	e7f7      	b.n	80072e8 <__mcmp+0x28>

080072f8 <__mdiff>:
 80072f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	460c      	mov	r4, r1
 80072fe:	4606      	mov	r6, r0
 8007300:	4611      	mov	r1, r2
 8007302:	4620      	mov	r0, r4
 8007304:	4690      	mov	r8, r2
 8007306:	f7ff ffdb 	bl	80072c0 <__mcmp>
 800730a:	1e05      	subs	r5, r0, #0
 800730c:	d110      	bne.n	8007330 <__mdiff+0x38>
 800730e:	4629      	mov	r1, r5
 8007310:	4630      	mov	r0, r6
 8007312:	f7ff fd53 	bl	8006dbc <_Balloc>
 8007316:	b930      	cbnz	r0, 8007326 <__mdiff+0x2e>
 8007318:	4b3a      	ldr	r3, [pc, #232]	; (8007404 <__mdiff+0x10c>)
 800731a:	4602      	mov	r2, r0
 800731c:	f240 2132 	movw	r1, #562	; 0x232
 8007320:	4839      	ldr	r0, [pc, #228]	; (8007408 <__mdiff+0x110>)
 8007322:	f000 fc45 	bl	8007bb0 <__assert_func>
 8007326:	2301      	movs	r3, #1
 8007328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800732c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007330:	bfa4      	itt	ge
 8007332:	4643      	movge	r3, r8
 8007334:	46a0      	movge	r8, r4
 8007336:	4630      	mov	r0, r6
 8007338:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800733c:	bfa6      	itte	ge
 800733e:	461c      	movge	r4, r3
 8007340:	2500      	movge	r5, #0
 8007342:	2501      	movlt	r5, #1
 8007344:	f7ff fd3a 	bl	8006dbc <_Balloc>
 8007348:	b920      	cbnz	r0, 8007354 <__mdiff+0x5c>
 800734a:	4b2e      	ldr	r3, [pc, #184]	; (8007404 <__mdiff+0x10c>)
 800734c:	4602      	mov	r2, r0
 800734e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007352:	e7e5      	b.n	8007320 <__mdiff+0x28>
 8007354:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007358:	6926      	ldr	r6, [r4, #16]
 800735a:	60c5      	str	r5, [r0, #12]
 800735c:	f104 0914 	add.w	r9, r4, #20
 8007360:	f108 0514 	add.w	r5, r8, #20
 8007364:	f100 0e14 	add.w	lr, r0, #20
 8007368:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800736c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007370:	f108 0210 	add.w	r2, r8, #16
 8007374:	46f2      	mov	sl, lr
 8007376:	2100      	movs	r1, #0
 8007378:	f859 3b04 	ldr.w	r3, [r9], #4
 800737c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007380:	fa1f f883 	uxth.w	r8, r3
 8007384:	fa11 f18b 	uxtah	r1, r1, fp
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	eba1 0808 	sub.w	r8, r1, r8
 800738e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007392:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007396:	fa1f f888 	uxth.w	r8, r8
 800739a:	1419      	asrs	r1, r3, #16
 800739c:	454e      	cmp	r6, r9
 800739e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073a2:	f84a 3b04 	str.w	r3, [sl], #4
 80073a6:	d8e7      	bhi.n	8007378 <__mdiff+0x80>
 80073a8:	1b33      	subs	r3, r6, r4
 80073aa:	3b15      	subs	r3, #21
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	3304      	adds	r3, #4
 80073b2:	3415      	adds	r4, #21
 80073b4:	42a6      	cmp	r6, r4
 80073b6:	bf38      	it	cc
 80073b8:	2304      	movcc	r3, #4
 80073ba:	441d      	add	r5, r3
 80073bc:	4473      	add	r3, lr
 80073be:	469e      	mov	lr, r3
 80073c0:	462e      	mov	r6, r5
 80073c2:	4566      	cmp	r6, ip
 80073c4:	d30e      	bcc.n	80073e4 <__mdiff+0xec>
 80073c6:	f10c 0203 	add.w	r2, ip, #3
 80073ca:	1b52      	subs	r2, r2, r5
 80073cc:	f022 0203 	bic.w	r2, r2, #3
 80073d0:	3d03      	subs	r5, #3
 80073d2:	45ac      	cmp	ip, r5
 80073d4:	bf38      	it	cc
 80073d6:	2200      	movcc	r2, #0
 80073d8:	441a      	add	r2, r3
 80073da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073de:	b17b      	cbz	r3, 8007400 <__mdiff+0x108>
 80073e0:	6107      	str	r7, [r0, #16]
 80073e2:	e7a3      	b.n	800732c <__mdiff+0x34>
 80073e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80073e8:	fa11 f288 	uxtah	r2, r1, r8
 80073ec:	1414      	asrs	r4, r2, #16
 80073ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073f2:	b292      	uxth	r2, r2
 80073f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073f8:	f84e 2b04 	str.w	r2, [lr], #4
 80073fc:	1421      	asrs	r1, r4, #16
 80073fe:	e7e0      	b.n	80073c2 <__mdiff+0xca>
 8007400:	3f01      	subs	r7, #1
 8007402:	e7ea      	b.n	80073da <__mdiff+0xe2>
 8007404:	0800813f 	.word	0x0800813f
 8007408:	080081b0 	.word	0x080081b0

0800740c <__d2b>:
 800740c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007410:	4689      	mov	r9, r1
 8007412:	2101      	movs	r1, #1
 8007414:	ec57 6b10 	vmov	r6, r7, d0
 8007418:	4690      	mov	r8, r2
 800741a:	f7ff fccf 	bl	8006dbc <_Balloc>
 800741e:	4604      	mov	r4, r0
 8007420:	b930      	cbnz	r0, 8007430 <__d2b+0x24>
 8007422:	4602      	mov	r2, r0
 8007424:	4b25      	ldr	r3, [pc, #148]	; (80074bc <__d2b+0xb0>)
 8007426:	4826      	ldr	r0, [pc, #152]	; (80074c0 <__d2b+0xb4>)
 8007428:	f240 310a 	movw	r1, #778	; 0x30a
 800742c:	f000 fbc0 	bl	8007bb0 <__assert_func>
 8007430:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007434:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007438:	bb35      	cbnz	r5, 8007488 <__d2b+0x7c>
 800743a:	2e00      	cmp	r6, #0
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	d028      	beq.n	8007492 <__d2b+0x86>
 8007440:	4668      	mov	r0, sp
 8007442:	9600      	str	r6, [sp, #0]
 8007444:	f7ff fd82 	bl	8006f4c <__lo0bits>
 8007448:	9900      	ldr	r1, [sp, #0]
 800744a:	b300      	cbz	r0, 800748e <__d2b+0x82>
 800744c:	9a01      	ldr	r2, [sp, #4]
 800744e:	f1c0 0320 	rsb	r3, r0, #32
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	430b      	orrs	r3, r1
 8007458:	40c2      	lsrs	r2, r0
 800745a:	6163      	str	r3, [r4, #20]
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	61a3      	str	r3, [r4, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	bf14      	ite	ne
 8007466:	2202      	movne	r2, #2
 8007468:	2201      	moveq	r2, #1
 800746a:	6122      	str	r2, [r4, #16]
 800746c:	b1d5      	cbz	r5, 80074a4 <__d2b+0x98>
 800746e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007472:	4405      	add	r5, r0
 8007474:	f8c9 5000 	str.w	r5, [r9]
 8007478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800747c:	f8c8 0000 	str.w	r0, [r8]
 8007480:	4620      	mov	r0, r4
 8007482:	b003      	add	sp, #12
 8007484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800748c:	e7d5      	b.n	800743a <__d2b+0x2e>
 800748e:	6161      	str	r1, [r4, #20]
 8007490:	e7e5      	b.n	800745e <__d2b+0x52>
 8007492:	a801      	add	r0, sp, #4
 8007494:	f7ff fd5a 	bl	8006f4c <__lo0bits>
 8007498:	9b01      	ldr	r3, [sp, #4]
 800749a:	6163      	str	r3, [r4, #20]
 800749c:	2201      	movs	r2, #1
 800749e:	6122      	str	r2, [r4, #16]
 80074a0:	3020      	adds	r0, #32
 80074a2:	e7e3      	b.n	800746c <__d2b+0x60>
 80074a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074ac:	f8c9 0000 	str.w	r0, [r9]
 80074b0:	6918      	ldr	r0, [r3, #16]
 80074b2:	f7ff fd2b 	bl	8006f0c <__hi0bits>
 80074b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074ba:	e7df      	b.n	800747c <__d2b+0x70>
 80074bc:	0800813f 	.word	0x0800813f
 80074c0:	080081b0 	.word	0x080081b0

080074c4 <_calloc_r>:
 80074c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074c6:	fba1 2402 	umull	r2, r4, r1, r2
 80074ca:	b94c      	cbnz	r4, 80074e0 <_calloc_r+0x1c>
 80074cc:	4611      	mov	r1, r2
 80074ce:	9201      	str	r2, [sp, #4]
 80074d0:	f000 f87a 	bl	80075c8 <_malloc_r>
 80074d4:	9a01      	ldr	r2, [sp, #4]
 80074d6:	4605      	mov	r5, r0
 80074d8:	b930      	cbnz	r0, 80074e8 <_calloc_r+0x24>
 80074da:	4628      	mov	r0, r5
 80074dc:	b003      	add	sp, #12
 80074de:	bd30      	pop	{r4, r5, pc}
 80074e0:	220c      	movs	r2, #12
 80074e2:	6002      	str	r2, [r0, #0]
 80074e4:	2500      	movs	r5, #0
 80074e6:	e7f8      	b.n	80074da <_calloc_r+0x16>
 80074e8:	4621      	mov	r1, r4
 80074ea:	f7fe f84f 	bl	800558c <memset>
 80074ee:	e7f4      	b.n	80074da <_calloc_r+0x16>

080074f0 <_free_r>:
 80074f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d044      	beq.n	8007580 <_free_r+0x90>
 80074f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074fa:	9001      	str	r0, [sp, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f1a1 0404 	sub.w	r4, r1, #4
 8007502:	bfb8      	it	lt
 8007504:	18e4      	addlt	r4, r4, r3
 8007506:	f000 fcdf 	bl	8007ec8 <__malloc_lock>
 800750a:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <_free_r+0x94>)
 800750c:	9801      	ldr	r0, [sp, #4]
 800750e:	6813      	ldr	r3, [r2, #0]
 8007510:	b933      	cbnz	r3, 8007520 <_free_r+0x30>
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	6014      	str	r4, [r2, #0]
 8007516:	b003      	add	sp, #12
 8007518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800751c:	f000 bcda 	b.w	8007ed4 <__malloc_unlock>
 8007520:	42a3      	cmp	r3, r4
 8007522:	d908      	bls.n	8007536 <_free_r+0x46>
 8007524:	6825      	ldr	r5, [r4, #0]
 8007526:	1961      	adds	r1, r4, r5
 8007528:	428b      	cmp	r3, r1
 800752a:	bf01      	itttt	eq
 800752c:	6819      	ldreq	r1, [r3, #0]
 800752e:	685b      	ldreq	r3, [r3, #4]
 8007530:	1949      	addeq	r1, r1, r5
 8007532:	6021      	streq	r1, [r4, #0]
 8007534:	e7ed      	b.n	8007512 <_free_r+0x22>
 8007536:	461a      	mov	r2, r3
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	b10b      	cbz	r3, 8007540 <_free_r+0x50>
 800753c:	42a3      	cmp	r3, r4
 800753e:	d9fa      	bls.n	8007536 <_free_r+0x46>
 8007540:	6811      	ldr	r1, [r2, #0]
 8007542:	1855      	adds	r5, r2, r1
 8007544:	42a5      	cmp	r5, r4
 8007546:	d10b      	bne.n	8007560 <_free_r+0x70>
 8007548:	6824      	ldr	r4, [r4, #0]
 800754a:	4421      	add	r1, r4
 800754c:	1854      	adds	r4, r2, r1
 800754e:	42a3      	cmp	r3, r4
 8007550:	6011      	str	r1, [r2, #0]
 8007552:	d1e0      	bne.n	8007516 <_free_r+0x26>
 8007554:	681c      	ldr	r4, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	6053      	str	r3, [r2, #4]
 800755a:	4421      	add	r1, r4
 800755c:	6011      	str	r1, [r2, #0]
 800755e:	e7da      	b.n	8007516 <_free_r+0x26>
 8007560:	d902      	bls.n	8007568 <_free_r+0x78>
 8007562:	230c      	movs	r3, #12
 8007564:	6003      	str	r3, [r0, #0]
 8007566:	e7d6      	b.n	8007516 <_free_r+0x26>
 8007568:	6825      	ldr	r5, [r4, #0]
 800756a:	1961      	adds	r1, r4, r5
 800756c:	428b      	cmp	r3, r1
 800756e:	bf04      	itt	eq
 8007570:	6819      	ldreq	r1, [r3, #0]
 8007572:	685b      	ldreq	r3, [r3, #4]
 8007574:	6063      	str	r3, [r4, #4]
 8007576:	bf04      	itt	eq
 8007578:	1949      	addeq	r1, r1, r5
 800757a:	6021      	streq	r1, [r4, #0]
 800757c:	6054      	str	r4, [r2, #4]
 800757e:	e7ca      	b.n	8007516 <_free_r+0x26>
 8007580:	b003      	add	sp, #12
 8007582:	bd30      	pop	{r4, r5, pc}
 8007584:	20000368 	.word	0x20000368

08007588 <sbrk_aligned>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	4e0e      	ldr	r6, [pc, #56]	; (80075c4 <sbrk_aligned+0x3c>)
 800758c:	460c      	mov	r4, r1
 800758e:	6831      	ldr	r1, [r6, #0]
 8007590:	4605      	mov	r5, r0
 8007592:	b911      	cbnz	r1, 800759a <sbrk_aligned+0x12>
 8007594:	f000 f9e6 	bl	8007964 <_sbrk_r>
 8007598:	6030      	str	r0, [r6, #0]
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	f000 f9e1 	bl	8007964 <_sbrk_r>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	d00a      	beq.n	80075bc <sbrk_aligned+0x34>
 80075a6:	1cc4      	adds	r4, r0, #3
 80075a8:	f024 0403 	bic.w	r4, r4, #3
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d007      	beq.n	80075c0 <sbrk_aligned+0x38>
 80075b0:	1a21      	subs	r1, r4, r0
 80075b2:	4628      	mov	r0, r5
 80075b4:	f000 f9d6 	bl	8007964 <_sbrk_r>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d101      	bne.n	80075c0 <sbrk_aligned+0x38>
 80075bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075c0:	4620      	mov	r0, r4
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	2000036c 	.word	0x2000036c

080075c8 <_malloc_r>:
 80075c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075cc:	1ccd      	adds	r5, r1, #3
 80075ce:	f025 0503 	bic.w	r5, r5, #3
 80075d2:	3508      	adds	r5, #8
 80075d4:	2d0c      	cmp	r5, #12
 80075d6:	bf38      	it	cc
 80075d8:	250c      	movcc	r5, #12
 80075da:	2d00      	cmp	r5, #0
 80075dc:	4607      	mov	r7, r0
 80075de:	db01      	blt.n	80075e4 <_malloc_r+0x1c>
 80075e0:	42a9      	cmp	r1, r5
 80075e2:	d905      	bls.n	80075f0 <_malloc_r+0x28>
 80075e4:	230c      	movs	r3, #12
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	2600      	movs	r6, #0
 80075ea:	4630      	mov	r0, r6
 80075ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f0:	4e2e      	ldr	r6, [pc, #184]	; (80076ac <_malloc_r+0xe4>)
 80075f2:	f000 fc69 	bl	8007ec8 <__malloc_lock>
 80075f6:	6833      	ldr	r3, [r6, #0]
 80075f8:	461c      	mov	r4, r3
 80075fa:	bb34      	cbnz	r4, 800764a <_malloc_r+0x82>
 80075fc:	4629      	mov	r1, r5
 80075fe:	4638      	mov	r0, r7
 8007600:	f7ff ffc2 	bl	8007588 <sbrk_aligned>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	4604      	mov	r4, r0
 8007608:	d14d      	bne.n	80076a6 <_malloc_r+0xde>
 800760a:	6834      	ldr	r4, [r6, #0]
 800760c:	4626      	mov	r6, r4
 800760e:	2e00      	cmp	r6, #0
 8007610:	d140      	bne.n	8007694 <_malloc_r+0xcc>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	4631      	mov	r1, r6
 8007616:	4638      	mov	r0, r7
 8007618:	eb04 0803 	add.w	r8, r4, r3
 800761c:	f000 f9a2 	bl	8007964 <_sbrk_r>
 8007620:	4580      	cmp	r8, r0
 8007622:	d13a      	bne.n	800769a <_malloc_r+0xd2>
 8007624:	6821      	ldr	r1, [r4, #0]
 8007626:	3503      	adds	r5, #3
 8007628:	1a6d      	subs	r5, r5, r1
 800762a:	f025 0503 	bic.w	r5, r5, #3
 800762e:	3508      	adds	r5, #8
 8007630:	2d0c      	cmp	r5, #12
 8007632:	bf38      	it	cc
 8007634:	250c      	movcc	r5, #12
 8007636:	4629      	mov	r1, r5
 8007638:	4638      	mov	r0, r7
 800763a:	f7ff ffa5 	bl	8007588 <sbrk_aligned>
 800763e:	3001      	adds	r0, #1
 8007640:	d02b      	beq.n	800769a <_malloc_r+0xd2>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	442b      	add	r3, r5
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	e00e      	b.n	8007668 <_malloc_r+0xa0>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	1b52      	subs	r2, r2, r5
 800764e:	d41e      	bmi.n	800768e <_malloc_r+0xc6>
 8007650:	2a0b      	cmp	r2, #11
 8007652:	d916      	bls.n	8007682 <_malloc_r+0xba>
 8007654:	1961      	adds	r1, r4, r5
 8007656:	42a3      	cmp	r3, r4
 8007658:	6025      	str	r5, [r4, #0]
 800765a:	bf18      	it	ne
 800765c:	6059      	strne	r1, [r3, #4]
 800765e:	6863      	ldr	r3, [r4, #4]
 8007660:	bf08      	it	eq
 8007662:	6031      	streq	r1, [r6, #0]
 8007664:	5162      	str	r2, [r4, r5]
 8007666:	604b      	str	r3, [r1, #4]
 8007668:	4638      	mov	r0, r7
 800766a:	f104 060b 	add.w	r6, r4, #11
 800766e:	f000 fc31 	bl	8007ed4 <__malloc_unlock>
 8007672:	f026 0607 	bic.w	r6, r6, #7
 8007676:	1d23      	adds	r3, r4, #4
 8007678:	1af2      	subs	r2, r6, r3
 800767a:	d0b6      	beq.n	80075ea <_malloc_r+0x22>
 800767c:	1b9b      	subs	r3, r3, r6
 800767e:	50a3      	str	r3, [r4, r2]
 8007680:	e7b3      	b.n	80075ea <_malloc_r+0x22>
 8007682:	6862      	ldr	r2, [r4, #4]
 8007684:	42a3      	cmp	r3, r4
 8007686:	bf0c      	ite	eq
 8007688:	6032      	streq	r2, [r6, #0]
 800768a:	605a      	strne	r2, [r3, #4]
 800768c:	e7ec      	b.n	8007668 <_malloc_r+0xa0>
 800768e:	4623      	mov	r3, r4
 8007690:	6864      	ldr	r4, [r4, #4]
 8007692:	e7b2      	b.n	80075fa <_malloc_r+0x32>
 8007694:	4634      	mov	r4, r6
 8007696:	6876      	ldr	r6, [r6, #4]
 8007698:	e7b9      	b.n	800760e <_malloc_r+0x46>
 800769a:	230c      	movs	r3, #12
 800769c:	603b      	str	r3, [r7, #0]
 800769e:	4638      	mov	r0, r7
 80076a0:	f000 fc18 	bl	8007ed4 <__malloc_unlock>
 80076a4:	e7a1      	b.n	80075ea <_malloc_r+0x22>
 80076a6:	6025      	str	r5, [r4, #0]
 80076a8:	e7de      	b.n	8007668 <_malloc_r+0xa0>
 80076aa:	bf00      	nop
 80076ac:	20000368 	.word	0x20000368

080076b0 <__sfputc_r>:
 80076b0:	6893      	ldr	r3, [r2, #8]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	b410      	push	{r4}
 80076b8:	6093      	str	r3, [r2, #8]
 80076ba:	da08      	bge.n	80076ce <__sfputc_r+0x1e>
 80076bc:	6994      	ldr	r4, [r2, #24]
 80076be:	42a3      	cmp	r3, r4
 80076c0:	db01      	blt.n	80076c6 <__sfputc_r+0x16>
 80076c2:	290a      	cmp	r1, #10
 80076c4:	d103      	bne.n	80076ce <__sfputc_r+0x1e>
 80076c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ca:	f000 b99f 	b.w	8007a0c <__swbuf_r>
 80076ce:	6813      	ldr	r3, [r2, #0]
 80076d0:	1c58      	adds	r0, r3, #1
 80076d2:	6010      	str	r0, [r2, #0]
 80076d4:	7019      	strb	r1, [r3, #0]
 80076d6:	4608      	mov	r0, r1
 80076d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076dc:	4770      	bx	lr

080076de <__sfputs_r>:
 80076de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e0:	4606      	mov	r6, r0
 80076e2:	460f      	mov	r7, r1
 80076e4:	4614      	mov	r4, r2
 80076e6:	18d5      	adds	r5, r2, r3
 80076e8:	42ac      	cmp	r4, r5
 80076ea:	d101      	bne.n	80076f0 <__sfputs_r+0x12>
 80076ec:	2000      	movs	r0, #0
 80076ee:	e007      	b.n	8007700 <__sfputs_r+0x22>
 80076f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f4:	463a      	mov	r2, r7
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7ff ffda 	bl	80076b0 <__sfputc_r>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d1f3      	bne.n	80076e8 <__sfputs_r+0xa>
 8007700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007704 <_vfiprintf_r>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	460d      	mov	r5, r1
 800770a:	b09d      	sub	sp, #116	; 0x74
 800770c:	4614      	mov	r4, r2
 800770e:	4698      	mov	r8, r3
 8007710:	4606      	mov	r6, r0
 8007712:	b118      	cbz	r0, 800771c <_vfiprintf_r+0x18>
 8007714:	6983      	ldr	r3, [r0, #24]
 8007716:	b90b      	cbnz	r3, 800771c <_vfiprintf_r+0x18>
 8007718:	f7ff fa94 	bl	8006c44 <__sinit>
 800771c:	4b89      	ldr	r3, [pc, #548]	; (8007944 <_vfiprintf_r+0x240>)
 800771e:	429d      	cmp	r5, r3
 8007720:	d11b      	bne.n	800775a <_vfiprintf_r+0x56>
 8007722:	6875      	ldr	r5, [r6, #4]
 8007724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d405      	bmi.n	8007736 <_vfiprintf_r+0x32>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d402      	bmi.n	8007736 <_vfiprintf_r+0x32>
 8007730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007732:	f7ff fb2a 	bl	8006d8a <__retarget_lock_acquire_recursive>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	d501      	bpl.n	8007740 <_vfiprintf_r+0x3c>
 800773c:	692b      	ldr	r3, [r5, #16]
 800773e:	b9eb      	cbnz	r3, 800777c <_vfiprintf_r+0x78>
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f9c6 	bl	8007ad4 <__swsetup_r>
 8007748:	b1c0      	cbz	r0, 800777c <_vfiprintf_r+0x78>
 800774a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774c:	07dc      	lsls	r4, r3, #31
 800774e:	d50e      	bpl.n	800776e <_vfiprintf_r+0x6a>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007754:	b01d      	add	sp, #116	; 0x74
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	4b7b      	ldr	r3, [pc, #492]	; (8007948 <_vfiprintf_r+0x244>)
 800775c:	429d      	cmp	r5, r3
 800775e:	d101      	bne.n	8007764 <_vfiprintf_r+0x60>
 8007760:	68b5      	ldr	r5, [r6, #8]
 8007762:	e7df      	b.n	8007724 <_vfiprintf_r+0x20>
 8007764:	4b79      	ldr	r3, [pc, #484]	; (800794c <_vfiprintf_r+0x248>)
 8007766:	429d      	cmp	r5, r3
 8007768:	bf08      	it	eq
 800776a:	68f5      	ldreq	r5, [r6, #12]
 800776c:	e7da      	b.n	8007724 <_vfiprintf_r+0x20>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	0598      	lsls	r0, r3, #22
 8007772:	d4ed      	bmi.n	8007750 <_vfiprintf_r+0x4c>
 8007774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007776:	f7ff fb09 	bl	8006d8c <__retarget_lock_release_recursive>
 800777a:	e7e9      	b.n	8007750 <_vfiprintf_r+0x4c>
 800777c:	2300      	movs	r3, #0
 800777e:	9309      	str	r3, [sp, #36]	; 0x24
 8007780:	2320      	movs	r3, #32
 8007782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007786:	f8cd 800c 	str.w	r8, [sp, #12]
 800778a:	2330      	movs	r3, #48	; 0x30
 800778c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007950 <_vfiprintf_r+0x24c>
 8007790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007794:	f04f 0901 	mov.w	r9, #1
 8007798:	4623      	mov	r3, r4
 800779a:	469a      	mov	sl, r3
 800779c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a0:	b10a      	cbz	r2, 80077a6 <_vfiprintf_r+0xa2>
 80077a2:	2a25      	cmp	r2, #37	; 0x25
 80077a4:	d1f9      	bne.n	800779a <_vfiprintf_r+0x96>
 80077a6:	ebba 0b04 	subs.w	fp, sl, r4
 80077aa:	d00b      	beq.n	80077c4 <_vfiprintf_r+0xc0>
 80077ac:	465b      	mov	r3, fp
 80077ae:	4622      	mov	r2, r4
 80077b0:	4629      	mov	r1, r5
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ff93 	bl	80076de <__sfputs_r>
 80077b8:	3001      	adds	r0, #1
 80077ba:	f000 80aa 	beq.w	8007912 <_vfiprintf_r+0x20e>
 80077be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c0:	445a      	add	r2, fp
 80077c2:	9209      	str	r2, [sp, #36]	; 0x24
 80077c4:	f89a 3000 	ldrb.w	r3, [sl]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80a2 	beq.w	8007912 <_vfiprintf_r+0x20e>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077d8:	f10a 0a01 	add.w	sl, sl, #1
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	9307      	str	r3, [sp, #28]
 80077e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e4:	931a      	str	r3, [sp, #104]	; 0x68
 80077e6:	4654      	mov	r4, sl
 80077e8:	2205      	movs	r2, #5
 80077ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ee:	4858      	ldr	r0, [pc, #352]	; (8007950 <_vfiprintf_r+0x24c>)
 80077f0:	f7f8 fcfe 	bl	80001f0 <memchr>
 80077f4:	9a04      	ldr	r2, [sp, #16]
 80077f6:	b9d8      	cbnz	r0, 8007830 <_vfiprintf_r+0x12c>
 80077f8:	06d1      	lsls	r1, r2, #27
 80077fa:	bf44      	itt	mi
 80077fc:	2320      	movmi	r3, #32
 80077fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007802:	0713      	lsls	r3, r2, #28
 8007804:	bf44      	itt	mi
 8007806:	232b      	movmi	r3, #43	; 0x2b
 8007808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780c:	f89a 3000 	ldrb.w	r3, [sl]
 8007810:	2b2a      	cmp	r3, #42	; 0x2a
 8007812:	d015      	beq.n	8007840 <_vfiprintf_r+0x13c>
 8007814:	9a07      	ldr	r2, [sp, #28]
 8007816:	4654      	mov	r4, sl
 8007818:	2000      	movs	r0, #0
 800781a:	f04f 0c0a 	mov.w	ip, #10
 800781e:	4621      	mov	r1, r4
 8007820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007824:	3b30      	subs	r3, #48	; 0x30
 8007826:	2b09      	cmp	r3, #9
 8007828:	d94e      	bls.n	80078c8 <_vfiprintf_r+0x1c4>
 800782a:	b1b0      	cbz	r0, 800785a <_vfiprintf_r+0x156>
 800782c:	9207      	str	r2, [sp, #28]
 800782e:	e014      	b.n	800785a <_vfiprintf_r+0x156>
 8007830:	eba0 0308 	sub.w	r3, r0, r8
 8007834:	fa09 f303 	lsl.w	r3, r9, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	46a2      	mov	sl, r4
 800783e:	e7d2      	b.n	80077e6 <_vfiprintf_r+0xe2>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	1d19      	adds	r1, r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	9103      	str	r1, [sp, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	bfbb      	ittet	lt
 800784c:	425b      	neglt	r3, r3
 800784e:	f042 0202 	orrlt.w	r2, r2, #2
 8007852:	9307      	strge	r3, [sp, #28]
 8007854:	9307      	strlt	r3, [sp, #28]
 8007856:	bfb8      	it	lt
 8007858:	9204      	strlt	r2, [sp, #16]
 800785a:	7823      	ldrb	r3, [r4, #0]
 800785c:	2b2e      	cmp	r3, #46	; 0x2e
 800785e:	d10c      	bne.n	800787a <_vfiprintf_r+0x176>
 8007860:	7863      	ldrb	r3, [r4, #1]
 8007862:	2b2a      	cmp	r3, #42	; 0x2a
 8007864:	d135      	bne.n	80078d2 <_vfiprintf_r+0x1ce>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	1d1a      	adds	r2, r3, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	9203      	str	r2, [sp, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	bfb8      	it	lt
 8007872:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007876:	3402      	adds	r4, #2
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007960 <_vfiprintf_r+0x25c>
 800787e:	7821      	ldrb	r1, [r4, #0]
 8007880:	2203      	movs	r2, #3
 8007882:	4650      	mov	r0, sl
 8007884:	f7f8 fcb4 	bl	80001f0 <memchr>
 8007888:	b140      	cbz	r0, 800789c <_vfiprintf_r+0x198>
 800788a:	2340      	movs	r3, #64	; 0x40
 800788c:	eba0 000a 	sub.w	r0, r0, sl
 8007890:	fa03 f000 	lsl.w	r0, r3, r0
 8007894:	9b04      	ldr	r3, [sp, #16]
 8007896:	4303      	orrs	r3, r0
 8007898:	3401      	adds	r4, #1
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a0:	482c      	ldr	r0, [pc, #176]	; (8007954 <_vfiprintf_r+0x250>)
 80078a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078a6:	2206      	movs	r2, #6
 80078a8:	f7f8 fca2 	bl	80001f0 <memchr>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d03f      	beq.n	8007930 <_vfiprintf_r+0x22c>
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <_vfiprintf_r+0x254>)
 80078b2:	bb1b      	cbnz	r3, 80078fc <_vfiprintf_r+0x1f8>
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	3307      	adds	r3, #7
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	3308      	adds	r3, #8
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c2:	443b      	add	r3, r7
 80078c4:	9309      	str	r3, [sp, #36]	; 0x24
 80078c6:	e767      	b.n	8007798 <_vfiprintf_r+0x94>
 80078c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078cc:	460c      	mov	r4, r1
 80078ce:	2001      	movs	r0, #1
 80078d0:	e7a5      	b.n	800781e <_vfiprintf_r+0x11a>
 80078d2:	2300      	movs	r3, #0
 80078d4:	3401      	adds	r4, #1
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	4619      	mov	r1, r3
 80078da:	f04f 0c0a 	mov.w	ip, #10
 80078de:	4620      	mov	r0, r4
 80078e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e4:	3a30      	subs	r2, #48	; 0x30
 80078e6:	2a09      	cmp	r2, #9
 80078e8:	d903      	bls.n	80078f2 <_vfiprintf_r+0x1ee>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0c5      	beq.n	800787a <_vfiprintf_r+0x176>
 80078ee:	9105      	str	r1, [sp, #20]
 80078f0:	e7c3      	b.n	800787a <_vfiprintf_r+0x176>
 80078f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f6:	4604      	mov	r4, r0
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7f0      	b.n	80078de <_vfiprintf_r+0x1da>
 80078fc:	ab03      	add	r3, sp, #12
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	462a      	mov	r2, r5
 8007902:	4b16      	ldr	r3, [pc, #88]	; (800795c <_vfiprintf_r+0x258>)
 8007904:	a904      	add	r1, sp, #16
 8007906:	4630      	mov	r0, r6
 8007908:	f7fd fee8 	bl	80056dc <_printf_float>
 800790c:	4607      	mov	r7, r0
 800790e:	1c78      	adds	r0, r7, #1
 8007910:	d1d6      	bne.n	80078c0 <_vfiprintf_r+0x1bc>
 8007912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007914:	07d9      	lsls	r1, r3, #31
 8007916:	d405      	bmi.n	8007924 <_vfiprintf_r+0x220>
 8007918:	89ab      	ldrh	r3, [r5, #12]
 800791a:	059a      	lsls	r2, r3, #22
 800791c:	d402      	bmi.n	8007924 <_vfiprintf_r+0x220>
 800791e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007920:	f7ff fa34 	bl	8006d8c <__retarget_lock_release_recursive>
 8007924:	89ab      	ldrh	r3, [r5, #12]
 8007926:	065b      	lsls	r3, r3, #25
 8007928:	f53f af12 	bmi.w	8007750 <_vfiprintf_r+0x4c>
 800792c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800792e:	e711      	b.n	8007754 <_vfiprintf_r+0x50>
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <_vfiprintf_r+0x258>)
 8007938:	a904      	add	r1, sp, #16
 800793a:	4630      	mov	r0, r6
 800793c:	f7fe f972 	bl	8005c24 <_printf_i>
 8007940:	e7e4      	b.n	800790c <_vfiprintf_r+0x208>
 8007942:	bf00      	nop
 8007944:	08008170 	.word	0x08008170
 8007948:	08008190 	.word	0x08008190
 800794c:	08008150 	.word	0x08008150
 8007950:	0800830c 	.word	0x0800830c
 8007954:	08008316 	.word	0x08008316
 8007958:	080056dd 	.word	0x080056dd
 800795c:	080076df 	.word	0x080076df
 8007960:	08008312 	.word	0x08008312

08007964 <_sbrk_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d06      	ldr	r5, [pc, #24]	; (8007980 <_sbrk_r+0x1c>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	f7f9 fe00 	bl	8001574 <_sbrk>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_sbrk_r+0x1a>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_sbrk_r+0x1a>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000370 	.word	0x20000370

08007984 <__sread>:
 8007984:	b510      	push	{r4, lr}
 8007986:	460c      	mov	r4, r1
 8007988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798c:	f000 faa8 	bl	8007ee0 <_read_r>
 8007990:	2800      	cmp	r0, #0
 8007992:	bfab      	itete	ge
 8007994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007996:	89a3      	ldrhlt	r3, [r4, #12]
 8007998:	181b      	addge	r3, r3, r0
 800799a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800799e:	bfac      	ite	ge
 80079a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079a2:	81a3      	strhlt	r3, [r4, #12]
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <__swrite>:
 80079a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079aa:	461f      	mov	r7, r3
 80079ac:	898b      	ldrh	r3, [r1, #12]
 80079ae:	05db      	lsls	r3, r3, #23
 80079b0:	4605      	mov	r5, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	4616      	mov	r6, r2
 80079b6:	d505      	bpl.n	80079c4 <__swrite+0x1e>
 80079b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079bc:	2302      	movs	r3, #2
 80079be:	2200      	movs	r2, #0
 80079c0:	f000 f9f8 	bl	8007db4 <_lseek_r>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	4632      	mov	r2, r6
 80079d2:	463b      	mov	r3, r7
 80079d4:	4628      	mov	r0, r5
 80079d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079da:	f000 b869 	b.w	8007ab0 <_write_r>

080079de <__sseek>:
 80079de:	b510      	push	{r4, lr}
 80079e0:	460c      	mov	r4, r1
 80079e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e6:	f000 f9e5 	bl	8007db4 <_lseek_r>
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	bf15      	itete	ne
 80079f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80079f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079fa:	81a3      	strheq	r3, [r4, #12]
 80079fc:	bf18      	it	ne
 80079fe:	81a3      	strhne	r3, [r4, #12]
 8007a00:	bd10      	pop	{r4, pc}

08007a02 <__sclose>:
 8007a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a06:	f000 b8f1 	b.w	8007bec <_close_r>
	...

08007a0c <__swbuf_r>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	4614      	mov	r4, r2
 8007a12:	4605      	mov	r5, r0
 8007a14:	b118      	cbz	r0, 8007a1e <__swbuf_r+0x12>
 8007a16:	6983      	ldr	r3, [r0, #24]
 8007a18:	b90b      	cbnz	r3, 8007a1e <__swbuf_r+0x12>
 8007a1a:	f7ff f913 	bl	8006c44 <__sinit>
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <__swbuf_r+0x98>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	d12b      	bne.n	8007a7c <__swbuf_r+0x70>
 8007a24:	686c      	ldr	r4, [r5, #4]
 8007a26:	69a3      	ldr	r3, [r4, #24]
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	071a      	lsls	r2, r3, #28
 8007a2e:	d52f      	bpl.n	8007a90 <__swbuf_r+0x84>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b36b      	cbz	r3, 8007a90 <__swbuf_r+0x84>
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	6820      	ldr	r0, [r4, #0]
 8007a38:	1ac0      	subs	r0, r0, r3
 8007a3a:	6963      	ldr	r3, [r4, #20]
 8007a3c:	b2f6      	uxtb	r6, r6
 8007a3e:	4283      	cmp	r3, r0
 8007a40:	4637      	mov	r7, r6
 8007a42:	dc04      	bgt.n	8007a4e <__swbuf_r+0x42>
 8007a44:	4621      	mov	r1, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f966 	bl	8007d18 <_fflush_r>
 8007a4c:	bb30      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60a3      	str	r3, [r4, #8]
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	701e      	strb	r6, [r3, #0]
 8007a5c:	6963      	ldr	r3, [r4, #20]
 8007a5e:	3001      	adds	r0, #1
 8007a60:	4283      	cmp	r3, r0
 8007a62:	d004      	beq.n	8007a6e <__swbuf_r+0x62>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	d506      	bpl.n	8007a78 <__swbuf_r+0x6c>
 8007a6a:	2e0a      	cmp	r6, #10
 8007a6c:	d104      	bne.n	8007a78 <__swbuf_r+0x6c>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 f951 	bl	8007d18 <_fflush_r>
 8007a76:	b988      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a78:	4638      	mov	r0, r7
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <__swbuf_r+0x9c>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d101      	bne.n	8007a86 <__swbuf_r+0x7a>
 8007a82:	68ac      	ldr	r4, [r5, #8]
 8007a84:	e7cf      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <__swbuf_r+0xa0>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	bf08      	it	eq
 8007a8c:	68ec      	ldreq	r4, [r5, #12]
 8007a8e:	e7ca      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 f81e 	bl	8007ad4 <__swsetup_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d0cb      	beq.n	8007a34 <__swbuf_r+0x28>
 8007a9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007aa0:	e7ea      	b.n	8007a78 <__swbuf_r+0x6c>
 8007aa2:	bf00      	nop
 8007aa4:	08008170 	.word	0x08008170
 8007aa8:	08008190 	.word	0x08008190
 8007aac:	08008150 	.word	0x08008150

08007ab0 <_write_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	; (8007ad0 <_write_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7f9 fd07 	bl	80014d2 <_write>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_write_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_write_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000370 	.word	0x20000370

08007ad4 <__swsetup_r>:
 8007ad4:	4b32      	ldr	r3, [pc, #200]	; (8007ba0 <__swsetup_r+0xcc>)
 8007ad6:	b570      	push	{r4, r5, r6, lr}
 8007ad8:	681d      	ldr	r5, [r3, #0]
 8007ada:	4606      	mov	r6, r0
 8007adc:	460c      	mov	r4, r1
 8007ade:	b125      	cbz	r5, 8007aea <__swsetup_r+0x16>
 8007ae0:	69ab      	ldr	r3, [r5, #24]
 8007ae2:	b913      	cbnz	r3, 8007aea <__swsetup_r+0x16>
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7ff f8ad 	bl	8006c44 <__sinit>
 8007aea:	4b2e      	ldr	r3, [pc, #184]	; (8007ba4 <__swsetup_r+0xd0>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	d10f      	bne.n	8007b10 <__swsetup_r+0x3c>
 8007af0:	686c      	ldr	r4, [r5, #4]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af8:	0719      	lsls	r1, r3, #28
 8007afa:	d42c      	bmi.n	8007b56 <__swsetup_r+0x82>
 8007afc:	06dd      	lsls	r5, r3, #27
 8007afe:	d411      	bmi.n	8007b24 <__swsetup_r+0x50>
 8007b00:	2309      	movs	r3, #9
 8007b02:	6033      	str	r3, [r6, #0]
 8007b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b0e:	e03e      	b.n	8007b8e <__swsetup_r+0xba>
 8007b10:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <__swsetup_r+0xd4>)
 8007b12:	429c      	cmp	r4, r3
 8007b14:	d101      	bne.n	8007b1a <__swsetup_r+0x46>
 8007b16:	68ac      	ldr	r4, [r5, #8]
 8007b18:	e7eb      	b.n	8007af2 <__swsetup_r+0x1e>
 8007b1a:	4b24      	ldr	r3, [pc, #144]	; (8007bac <__swsetup_r+0xd8>)
 8007b1c:	429c      	cmp	r4, r3
 8007b1e:	bf08      	it	eq
 8007b20:	68ec      	ldreq	r4, [r5, #12]
 8007b22:	e7e6      	b.n	8007af2 <__swsetup_r+0x1e>
 8007b24:	0758      	lsls	r0, r3, #29
 8007b26:	d512      	bpl.n	8007b4e <__swsetup_r+0x7a>
 8007b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2a:	b141      	cbz	r1, 8007b3e <__swsetup_r+0x6a>
 8007b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b30:	4299      	cmp	r1, r3
 8007b32:	d002      	beq.n	8007b3a <__swsetup_r+0x66>
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff fcdb 	bl	80074f0 <_free_r>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	2300      	movs	r3, #0
 8007b48:	6063      	str	r3, [r4, #4]
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f043 0308 	orr.w	r3, r3, #8
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	b94b      	cbnz	r3, 8007b6e <__swsetup_r+0x9a>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b64:	d003      	beq.n	8007b6e <__swsetup_r+0x9a>
 8007b66:	4621      	mov	r1, r4
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f000 f95b 	bl	8007e24 <__smakebuf_r>
 8007b6e:	89a0      	ldrh	r0, [r4, #12]
 8007b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b74:	f010 0301 	ands.w	r3, r0, #1
 8007b78:	d00a      	beq.n	8007b90 <__swsetup_r+0xbc>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60a3      	str	r3, [r4, #8]
 8007b7e:	6963      	ldr	r3, [r4, #20]
 8007b80:	425b      	negs	r3, r3
 8007b82:	61a3      	str	r3, [r4, #24]
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	b943      	cbnz	r3, 8007b9a <__swsetup_r+0xc6>
 8007b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b8c:	d1ba      	bne.n	8007b04 <__swsetup_r+0x30>
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	0781      	lsls	r1, r0, #30
 8007b92:	bf58      	it	pl
 8007b94:	6963      	ldrpl	r3, [r4, #20]
 8007b96:	60a3      	str	r3, [r4, #8]
 8007b98:	e7f4      	b.n	8007b84 <__swsetup_r+0xb0>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e7f7      	b.n	8007b8e <__swsetup_r+0xba>
 8007b9e:	bf00      	nop
 8007ba0:	2000000c 	.word	0x2000000c
 8007ba4:	08008170 	.word	0x08008170
 8007ba8:	08008190 	.word	0x08008190
 8007bac:	08008150 	.word	0x08008150

08007bb0 <__assert_func>:
 8007bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bb2:	4614      	mov	r4, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <__assert_func+0x2c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4605      	mov	r5, r0
 8007bbc:	68d8      	ldr	r0, [r3, #12]
 8007bbe:	b14c      	cbz	r4, 8007bd4 <__assert_func+0x24>
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <__assert_func+0x30>)
 8007bc2:	9100      	str	r1, [sp, #0]
 8007bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bc8:	4906      	ldr	r1, [pc, #24]	; (8007be4 <__assert_func+0x34>)
 8007bca:	462b      	mov	r3, r5
 8007bcc:	f000 f8e0 	bl	8007d90 <fiprintf>
 8007bd0:	f000 f9a5 	bl	8007f1e <abort>
 8007bd4:	4b04      	ldr	r3, [pc, #16]	; (8007be8 <__assert_func+0x38>)
 8007bd6:	461c      	mov	r4, r3
 8007bd8:	e7f3      	b.n	8007bc2 <__assert_func+0x12>
 8007bda:	bf00      	nop
 8007bdc:	2000000c 	.word	0x2000000c
 8007be0:	0800831d 	.word	0x0800831d
 8007be4:	0800832a 	.word	0x0800832a
 8007be8:	08008358 	.word	0x08008358

08007bec <_close_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d06      	ldr	r5, [pc, #24]	; (8007c08 <_close_r+0x1c>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	f7f9 fc87 	bl	800150a <_close>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_close_r+0x1a>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_close_r+0x1a>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	20000370 	.word	0x20000370

08007c0c <__sflush_r>:
 8007c0c:	898a      	ldrh	r2, [r1, #12]
 8007c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	0710      	lsls	r0, r2, #28
 8007c16:	460c      	mov	r4, r1
 8007c18:	d458      	bmi.n	8007ccc <__sflush_r+0xc0>
 8007c1a:	684b      	ldr	r3, [r1, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dc05      	bgt.n	8007c2c <__sflush_r+0x20>
 8007c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dc02      	bgt.n	8007c2c <__sflush_r+0x20>
 8007c26:	2000      	movs	r0, #0
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	d0f9      	beq.n	8007c26 <__sflush_r+0x1a>
 8007c32:	2300      	movs	r3, #0
 8007c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c38:	682f      	ldr	r7, [r5, #0]
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	d032      	beq.n	8007ca4 <__sflush_r+0x98>
 8007c3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	075a      	lsls	r2, r3, #29
 8007c44:	d505      	bpl.n	8007c52 <__sflush_r+0x46>
 8007c46:	6863      	ldr	r3, [r4, #4]
 8007c48:	1ac0      	subs	r0, r0, r3
 8007c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c4c:	b10b      	cbz	r3, 8007c52 <__sflush_r+0x46>
 8007c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c50:	1ac0      	subs	r0, r0, r3
 8007c52:	2300      	movs	r3, #0
 8007c54:	4602      	mov	r2, r0
 8007c56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c58:	6a21      	ldr	r1, [r4, #32]
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b0      	blx	r6
 8007c5e:	1c43      	adds	r3, r0, #1
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	d106      	bne.n	8007c72 <__sflush_r+0x66>
 8007c64:	6829      	ldr	r1, [r5, #0]
 8007c66:	291d      	cmp	r1, #29
 8007c68:	d82c      	bhi.n	8007cc4 <__sflush_r+0xb8>
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <__sflush_r+0x108>)
 8007c6c:	40ca      	lsrs	r2, r1
 8007c6e:	07d6      	lsls	r6, r2, #31
 8007c70:	d528      	bpl.n	8007cc4 <__sflush_r+0xb8>
 8007c72:	2200      	movs	r2, #0
 8007c74:	6062      	str	r2, [r4, #4]
 8007c76:	04d9      	lsls	r1, r3, #19
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	6022      	str	r2, [r4, #0]
 8007c7c:	d504      	bpl.n	8007c88 <__sflush_r+0x7c>
 8007c7e:	1c42      	adds	r2, r0, #1
 8007c80:	d101      	bne.n	8007c86 <__sflush_r+0x7a>
 8007c82:	682b      	ldr	r3, [r5, #0]
 8007c84:	b903      	cbnz	r3, 8007c88 <__sflush_r+0x7c>
 8007c86:	6560      	str	r0, [r4, #84]	; 0x54
 8007c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c8a:	602f      	str	r7, [r5, #0]
 8007c8c:	2900      	cmp	r1, #0
 8007c8e:	d0ca      	beq.n	8007c26 <__sflush_r+0x1a>
 8007c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c94:	4299      	cmp	r1, r3
 8007c96:	d002      	beq.n	8007c9e <__sflush_r+0x92>
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f7ff fc29 	bl	80074f0 <_free_r>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ca2:	e7c1      	b.n	8007c28 <__sflush_r+0x1c>
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b0      	blx	r6
 8007cac:	1c41      	adds	r1, r0, #1
 8007cae:	d1c7      	bne.n	8007c40 <__sflush_r+0x34>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0c4      	beq.n	8007c40 <__sflush_r+0x34>
 8007cb6:	2b1d      	cmp	r3, #29
 8007cb8:	d001      	beq.n	8007cbe <__sflush_r+0xb2>
 8007cba:	2b16      	cmp	r3, #22
 8007cbc:	d101      	bne.n	8007cc2 <__sflush_r+0xb6>
 8007cbe:	602f      	str	r7, [r5, #0]
 8007cc0:	e7b1      	b.n	8007c26 <__sflush_r+0x1a>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	e7ad      	b.n	8007c28 <__sflush_r+0x1c>
 8007ccc:	690f      	ldr	r7, [r1, #16]
 8007cce:	2f00      	cmp	r7, #0
 8007cd0:	d0a9      	beq.n	8007c26 <__sflush_r+0x1a>
 8007cd2:	0793      	lsls	r3, r2, #30
 8007cd4:	680e      	ldr	r6, [r1, #0]
 8007cd6:	bf08      	it	eq
 8007cd8:	694b      	ldreq	r3, [r1, #20]
 8007cda:	600f      	str	r7, [r1, #0]
 8007cdc:	bf18      	it	ne
 8007cde:	2300      	movne	r3, #0
 8007ce0:	eba6 0807 	sub.w	r8, r6, r7
 8007ce4:	608b      	str	r3, [r1, #8]
 8007ce6:	f1b8 0f00 	cmp.w	r8, #0
 8007cea:	dd9c      	ble.n	8007c26 <__sflush_r+0x1a>
 8007cec:	6a21      	ldr	r1, [r4, #32]
 8007cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cf0:	4643      	mov	r3, r8
 8007cf2:	463a      	mov	r2, r7
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b0      	blx	r6
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	dc06      	bgt.n	8007d0a <__sflush_r+0xfe>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d08:	e78e      	b.n	8007c28 <__sflush_r+0x1c>
 8007d0a:	4407      	add	r7, r0
 8007d0c:	eba8 0800 	sub.w	r8, r8, r0
 8007d10:	e7e9      	b.n	8007ce6 <__sflush_r+0xda>
 8007d12:	bf00      	nop
 8007d14:	20400001 	.word	0x20400001

08007d18 <_fflush_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	690b      	ldr	r3, [r1, #16]
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	b913      	cbnz	r3, 8007d28 <_fflush_r+0x10>
 8007d22:	2500      	movs	r5, #0
 8007d24:	4628      	mov	r0, r5
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	b118      	cbz	r0, 8007d32 <_fflush_r+0x1a>
 8007d2a:	6983      	ldr	r3, [r0, #24]
 8007d2c:	b90b      	cbnz	r3, 8007d32 <_fflush_r+0x1a>
 8007d2e:	f7fe ff89 	bl	8006c44 <__sinit>
 8007d32:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <_fflush_r+0x6c>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d11b      	bne.n	8007d70 <_fflush_r+0x58>
 8007d38:	686c      	ldr	r4, [r5, #4]
 8007d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0ef      	beq.n	8007d22 <_fflush_r+0xa>
 8007d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d44:	07d0      	lsls	r0, r2, #31
 8007d46:	d404      	bmi.n	8007d52 <_fflush_r+0x3a>
 8007d48:	0599      	lsls	r1, r3, #22
 8007d4a:	d402      	bmi.n	8007d52 <_fflush_r+0x3a>
 8007d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d4e:	f7ff f81c 	bl	8006d8a <__retarget_lock_acquire_recursive>
 8007d52:	4628      	mov	r0, r5
 8007d54:	4621      	mov	r1, r4
 8007d56:	f7ff ff59 	bl	8007c0c <__sflush_r>
 8007d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d5c:	07da      	lsls	r2, r3, #31
 8007d5e:	4605      	mov	r5, r0
 8007d60:	d4e0      	bmi.n	8007d24 <_fflush_r+0xc>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	059b      	lsls	r3, r3, #22
 8007d66:	d4dd      	bmi.n	8007d24 <_fflush_r+0xc>
 8007d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6a:	f7ff f80f 	bl	8006d8c <__retarget_lock_release_recursive>
 8007d6e:	e7d9      	b.n	8007d24 <_fflush_r+0xc>
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <_fflush_r+0x70>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d101      	bne.n	8007d7a <_fflush_r+0x62>
 8007d76:	68ac      	ldr	r4, [r5, #8]
 8007d78:	e7df      	b.n	8007d3a <_fflush_r+0x22>
 8007d7a:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <_fflush_r+0x74>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	bf08      	it	eq
 8007d80:	68ec      	ldreq	r4, [r5, #12]
 8007d82:	e7da      	b.n	8007d3a <_fflush_r+0x22>
 8007d84:	08008170 	.word	0x08008170
 8007d88:	08008190 	.word	0x08008190
 8007d8c:	08008150 	.word	0x08008150

08007d90 <fiprintf>:
 8007d90:	b40e      	push	{r1, r2, r3}
 8007d92:	b503      	push	{r0, r1, lr}
 8007d94:	4601      	mov	r1, r0
 8007d96:	ab03      	add	r3, sp, #12
 8007d98:	4805      	ldr	r0, [pc, #20]	; (8007db0 <fiprintf+0x20>)
 8007d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9e:	6800      	ldr	r0, [r0, #0]
 8007da0:	9301      	str	r3, [sp, #4]
 8007da2:	f7ff fcaf 	bl	8007704 <_vfiprintf_r>
 8007da6:	b002      	add	sp, #8
 8007da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dac:	b003      	add	sp, #12
 8007dae:	4770      	bx	lr
 8007db0:	2000000c 	.word	0x2000000c

08007db4 <_lseek_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d07      	ldr	r5, [pc, #28]	; (8007dd4 <_lseek_r+0x20>)
 8007db8:	4604      	mov	r4, r0
 8007dba:	4608      	mov	r0, r1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	602a      	str	r2, [r5, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7f9 fbc8 	bl	8001558 <_lseek>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_lseek_r+0x1e>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_lseek_r+0x1e>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20000370 	.word	0x20000370

08007dd8 <__swhatbuf_r>:
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	460e      	mov	r6, r1
 8007ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de0:	2900      	cmp	r1, #0
 8007de2:	b096      	sub	sp, #88	; 0x58
 8007de4:	4614      	mov	r4, r2
 8007de6:	461d      	mov	r5, r3
 8007de8:	da08      	bge.n	8007dfc <__swhatbuf_r+0x24>
 8007dea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	061a      	lsls	r2, r3, #24
 8007df4:	d410      	bmi.n	8007e18 <__swhatbuf_r+0x40>
 8007df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dfa:	e00e      	b.n	8007e1a <__swhatbuf_r+0x42>
 8007dfc:	466a      	mov	r2, sp
 8007dfe:	f000 f895 	bl	8007f2c <_fstat_r>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	dbf1      	blt.n	8007dea <__swhatbuf_r+0x12>
 8007e06:	9a01      	ldr	r2, [sp, #4]
 8007e08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e10:	425a      	negs	r2, r3
 8007e12:	415a      	adcs	r2, r3
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	e7ee      	b.n	8007df6 <__swhatbuf_r+0x1e>
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	b016      	add	sp, #88	; 0x58
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e24 <__smakebuf_r>:
 8007e24:	898b      	ldrh	r3, [r1, #12]
 8007e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e28:	079d      	lsls	r5, r3, #30
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	d507      	bpl.n	8007e40 <__smakebuf_r+0x1c>
 8007e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	6163      	str	r3, [r4, #20]
 8007e3c:	b002      	add	sp, #8
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	ab01      	add	r3, sp, #4
 8007e42:	466a      	mov	r2, sp
 8007e44:	f7ff ffc8 	bl	8007dd8 <__swhatbuf_r>
 8007e48:	9900      	ldr	r1, [sp, #0]
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7ff fbbb 	bl	80075c8 <_malloc_r>
 8007e52:	b948      	cbnz	r0, 8007e68 <__smakebuf_r+0x44>
 8007e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e58:	059a      	lsls	r2, r3, #22
 8007e5a:	d4ef      	bmi.n	8007e3c <__smakebuf_r+0x18>
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	f043 0302 	orr.w	r3, r3, #2
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	e7e3      	b.n	8007e30 <__smakebuf_r+0xc>
 8007e68:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <__smakebuf_r+0x7c>)
 8007e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	6020      	str	r0, [r4, #0]
 8007e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	6163      	str	r3, [r4, #20]
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	6120      	str	r0, [r4, #16]
 8007e7e:	b15b      	cbz	r3, 8007e98 <__smakebuf_r+0x74>
 8007e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 f863 	bl	8007f50 <_isatty_r>
 8007e8a:	b128      	cbz	r0, 8007e98 <__smakebuf_r+0x74>
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	f043 0301 	orr.w	r3, r3, #1
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	89a0      	ldrh	r0, [r4, #12]
 8007e9a:	4305      	orrs	r5, r0
 8007e9c:	81a5      	strh	r5, [r4, #12]
 8007e9e:	e7cd      	b.n	8007e3c <__smakebuf_r+0x18>
 8007ea0:	08006bdd 	.word	0x08006bdd

08007ea4 <__ascii_mbtowc>:
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	b901      	cbnz	r1, 8007eaa <__ascii_mbtowc+0x6>
 8007ea8:	a901      	add	r1, sp, #4
 8007eaa:	b142      	cbz	r2, 8007ebe <__ascii_mbtowc+0x1a>
 8007eac:	b14b      	cbz	r3, 8007ec2 <__ascii_mbtowc+0x1e>
 8007eae:	7813      	ldrb	r3, [r2, #0]
 8007eb0:	600b      	str	r3, [r1, #0]
 8007eb2:	7812      	ldrb	r2, [r2, #0]
 8007eb4:	1e10      	subs	r0, r2, #0
 8007eb6:	bf18      	it	ne
 8007eb8:	2001      	movne	r0, #1
 8007eba:	b002      	add	sp, #8
 8007ebc:	4770      	bx	lr
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	e7fb      	b.n	8007eba <__ascii_mbtowc+0x16>
 8007ec2:	f06f 0001 	mvn.w	r0, #1
 8007ec6:	e7f8      	b.n	8007eba <__ascii_mbtowc+0x16>

08007ec8 <__malloc_lock>:
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <__malloc_lock+0x8>)
 8007eca:	f7fe bf5e 	b.w	8006d8a <__retarget_lock_acquire_recursive>
 8007ece:	bf00      	nop
 8007ed0:	20000364 	.word	0x20000364

08007ed4 <__malloc_unlock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__malloc_unlock+0x8>)
 8007ed6:	f7fe bf59 	b.w	8006d8c <__retarget_lock_release_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000364 	.word	0x20000364

08007ee0 <_read_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	; (8007f00 <_read_r+0x20>)
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4608      	mov	r0, r1
 8007ee8:	4611      	mov	r1, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	602a      	str	r2, [r5, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f7f9 fad2 	bl	8001498 <_read>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_read_r+0x1e>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_read_r+0x1e>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20000370 	.word	0x20000370

08007f04 <__ascii_wctomb>:
 8007f04:	b149      	cbz	r1, 8007f1a <__ascii_wctomb+0x16>
 8007f06:	2aff      	cmp	r2, #255	; 0xff
 8007f08:	bf85      	ittet	hi
 8007f0a:	238a      	movhi	r3, #138	; 0x8a
 8007f0c:	6003      	strhi	r3, [r0, #0]
 8007f0e:	700a      	strbls	r2, [r1, #0]
 8007f10:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007f14:	bf98      	it	ls
 8007f16:	2001      	movls	r0, #1
 8007f18:	4770      	bx	lr
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4770      	bx	lr

08007f1e <abort>:
 8007f1e:	b508      	push	{r3, lr}
 8007f20:	2006      	movs	r0, #6
 8007f22:	f000 f84d 	bl	8007fc0 <raise>
 8007f26:	2001      	movs	r0, #1
 8007f28:	f7f9 faac 	bl	8001484 <_exit>

08007f2c <_fstat_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	; (8007f4c <_fstat_r+0x20>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	f7f9 faf2 	bl	8001522 <_fstat>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	d102      	bne.n	8007f48 <_fstat_r+0x1c>
 8007f42:	682b      	ldr	r3, [r5, #0]
 8007f44:	b103      	cbz	r3, 8007f48 <_fstat_r+0x1c>
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000370 	.word	0x20000370

08007f50 <_isatty_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d06      	ldr	r5, [pc, #24]	; (8007f6c <_isatty_r+0x1c>)
 8007f54:	2300      	movs	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	f7f9 faf1 	bl	8001542 <_isatty>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_isatty_r+0x1a>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_isatty_r+0x1a>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	20000370 	.word	0x20000370

08007f70 <_raise_r>:
 8007f70:	291f      	cmp	r1, #31
 8007f72:	b538      	push	{r3, r4, r5, lr}
 8007f74:	4604      	mov	r4, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	d904      	bls.n	8007f84 <_raise_r+0x14>
 8007f7a:	2316      	movs	r3, #22
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f86:	b112      	cbz	r2, 8007f8e <_raise_r+0x1e>
 8007f88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f8c:	b94b      	cbnz	r3, 8007fa2 <_raise_r+0x32>
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 f830 	bl	8007ff4 <_getpid_r>
 8007f94:	462a      	mov	r2, r5
 8007f96:	4601      	mov	r1, r0
 8007f98:	4620      	mov	r0, r4
 8007f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f9e:	f000 b817 	b.w	8007fd0 <_kill_r>
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d00a      	beq.n	8007fbc <_raise_r+0x4c>
 8007fa6:	1c59      	adds	r1, r3, #1
 8007fa8:	d103      	bne.n	8007fb2 <_raise_r+0x42>
 8007faa:	2316      	movs	r3, #22
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	2001      	movs	r0, #1
 8007fb0:	e7e7      	b.n	8007f82 <_raise_r+0x12>
 8007fb2:	2400      	movs	r4, #0
 8007fb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fb8:	4628      	mov	r0, r5
 8007fba:	4798      	blx	r3
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e7e0      	b.n	8007f82 <_raise_r+0x12>

08007fc0 <raise>:
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <raise+0xc>)
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	f7ff bfd3 	b.w	8007f70 <_raise_r>
 8007fca:	bf00      	nop
 8007fcc:	2000000c 	.word	0x2000000c

08007fd0 <_kill_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	; (8007ff0 <_kill_r+0x20>)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	4611      	mov	r1, r2
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	f7f9 fa41 	bl	8001464 <_kill>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d102      	bne.n	8007fec <_kill_r+0x1c>
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	b103      	cbz	r3, 8007fec <_kill_r+0x1c>
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000370 	.word	0x20000370

08007ff4 <_getpid_r>:
 8007ff4:	f7f9 ba2e 	b.w	8001454 <_getpid>

08007ff8 <_init>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr

08008004 <_fini>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr
